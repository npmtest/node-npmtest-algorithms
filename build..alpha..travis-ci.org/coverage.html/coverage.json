{"/home/travis/build/npmtest/node-npmtest-algorithms/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_algorithms */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/lib.npmtest_algorithms.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/lib.npmtest_algorithms.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":55}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":61}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_algorithms */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_algorithms = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_algorithms = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":54}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":68},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-algorithms && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_algorithms */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_algorithms","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_algorithms.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_algorithms.rollup.js'] =","            local.assetsDict['/assets.npmtest_algorithms.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_algorithms.__dirname + '/lib.npmtest_algorithms.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/index.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":11,"column":2}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":21}}},"branchMap":{},"code":["'use strict';","","var lib = {","  DataStructures: require('./data_structures'),","  Graph: require('./graph'),","  Geometry: require('./geometry'),","  Math: require('./math'),","  Search: require('./search'),","  Sorting: require('./sorting'),","  String: require('./string')","};","","module.exports = lib;",""],"l":{"3":1,"13":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":18,"column":2}}},"branchMap":{},"code":["'use strict';","","// Data Structures","module.exports = {","  AVLTree: require('./data_structures/avl_tree'),","  BST: require('./data_structures/bst'),","  Treap: require('./data_structures/treap'),","  Graph: require('./data_structures/graph'),","  HashTable: require('./data_structures/hash_table'),","  Heap: require('./data_structures/heap'),","  LinkedList: require('./data_structures/linked_list'),","  PriorityQueue: require('./data_structures/priority_queue'),","  Queue: require('./data_structures/queue'),","  Stack: require('./data_structures/stack'),","  Set: require('./data_structures/set'),","  DisjointSetForest: require('./data_structures/disjoint_set_forest'),","  FenwickTree: require('./data_structures/fenwick_tree')","};",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/avl_tree.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/avl_tree.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":1,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":1,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":1,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":1,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":1,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":1,"197":0,"198":1,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":1,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":1,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":1,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":1,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":1,"253":0,"254":1,"255":0,"256":1,"257":0,"258":0,"259":0,"260":0,"261":1,"262":0,"263":0,"264":0,"265":0,"266":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0,0],"92":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"fnMap":{"1":{"name":"AVLTree","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":19}}},"2":{"name":"Node","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":50}}},"3":{"name":"(anonymous_3)","line":25,"loc":{"start":{"line":25,"column":34},"end":{"line":25,"column":50}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":35},"end":{"line":40,"column":51}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":53},"end":{"line":57,"column":78}}},"6":{"name":"(anonymous_6)","line":97,"loc":{"start":{"line":97,"column":53},"end":{"line":97,"column":78}}},"7":{"name":"(anonymous_7)","line":133,"loc":{"start":{"line":133,"column":38},"end":{"line":133,"column":67}}},"8":{"name":"(anonymous_8)","line":153,"loc":{"start":{"line":153,"column":32},"end":{"line":153,"column":62}}},"9":{"name":"(anonymous_9)","line":173,"loc":{"start":{"line":173,"column":31},"end":{"line":173,"column":50}}},"10":{"name":"(anonymous_10)","line":202,"loc":{"start":{"line":202,"column":29},"end":{"line":202,"column":48}}},"11":{"name":"(anonymous_11)","line":230,"loc":{"start":{"line":230,"column":30},"end":{"line":230,"column":49}}},"12":{"name":"(anonymous_12)","line":266,"loc":{"start":{"line":266,"column":30},"end":{"line":266,"column":49}}},"13":{"name":"(anonymous_13)","line":302,"loc":{"start":{"line":302,"column":27},"end":{"line":302,"column":53}}},"14":{"name":"(anonymous_14)","line":328,"loc":{"start":{"line":328,"column":28},"end":{"line":328,"column":57}}},"15":{"name":"(anonymous_15)","line":342,"loc":{"start":{"line":342,"column":30},"end":{"line":342,"column":59}}},"16":{"name":"(anonymous_16)","line":357,"loc":{"start":{"line":357,"column":29},"end":{"line":357,"column":58}}},"17":{"name":"(anonymous_17)","line":371,"loc":{"start":{"line":371,"column":25},"end":{"line":371,"column":42}}},"18":{"name":"(anonymous_18)","line":378,"loc":{"start":{"line":378,"column":26},"end":{"line":378,"column":52}}},"19":{"name":"(anonymous_19)","line":399,"loc":{"start":{"line":399,"column":33},"end":{"line":399,"column":71}}},"20":{"name":"(anonymous_20)","line":420,"loc":{"start":{"line":420,"column":27},"end":{"line":420,"column":44}}},"21":{"name":"(anonymous_21)","line":449,"loc":{"start":{"line":449,"column":29},"end":{"line":449,"column":54}}},"22":{"name":"(anonymous_22)","line":466,"loc":{"start":{"line":466,"column":29},"end":{"line":466,"column":54}}},"23":{"name":"(anonymous_23)","line":482,"loc":{"start":{"line":482,"column":28},"end":{"line":482,"column":40}}},"24":{"name":"(anonymous_24)","line":489,"loc":{"start":{"line":489,"column":28},"end":{"line":489,"column":40}}},"25":{"name":"(anonymous_25)","line":496,"loc":{"start":{"line":496,"column":35},"end":{"line":496,"column":47}}},"26":{"name":"(anonymous_26)","line":512,"loc":{"start":{"line":512,"column":34},"end":{"line":512,"column":46}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":8,"column":1}},"2":{"start":{"line":7,"column":2},"end":{"line":7,"column":19}},"3":{"start":{"line":13,"column":0},"end":{"line":19,"column":1}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":21}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":19}},"6":{"start":{"line":16,"column":2},"end":{"line":16,"column":21}},"7":{"start":{"line":17,"column":2},"end":{"line":17,"column":23}},"8":{"start":{"line":18,"column":2},"end":{"line":18,"column":23}},"9":{"start":{"line":25,"column":0},"end":{"line":35,"column":2}},"10":{"start":{"line":26,"column":2},"end":{"line":26,"column":17}},"11":{"start":{"line":27,"column":2},"end":{"line":33,"column":3}},"12":{"start":{"line":28,"column":4},"end":{"line":28,"column":63}},"13":{"start":{"line":29,"column":9},"end":{"line":33,"column":3}},"14":{"start":{"line":30,"column":4},"end":{"line":30,"column":34}},"15":{"start":{"line":31,"column":9},"end":{"line":33,"column":3}},"16":{"start":{"line":32,"column":4},"end":{"line":32,"column":35}},"17":{"start":{"line":34,"column":2},"end":{"line":34,"column":16}},"18":{"start":{"line":40,"column":0},"end":{"line":51,"column":2}},"19":{"start":{"line":41,"column":2},"end":{"line":41,"column":24}},"20":{"start":{"line":43,"column":2},"end":{"line":49,"column":3}},"21":{"start":{"line":44,"column":4},"end":{"line":44,"column":71}},"22":{"start":{"line":45,"column":9},"end":{"line":49,"column":3}},"23":{"start":{"line":46,"column":4},"end":{"line":46,"column":39}},"24":{"start":{"line":47,"column":9},"end":{"line":49,"column":3}},"25":{"start":{"line":48,"column":4},"end":{"line":48,"column":38}},"26":{"start":{"line":50,"column":2},"end":{"line":50,"column":20}},"27":{"start":{"line":57,"column":0},"end":{"line":91,"column":2}},"28":{"start":{"line":59,"column":2},"end":{"line":59,"column":40}},"29":{"start":{"line":60,"column":2},"end":{"line":60,"column":32}},"30":{"start":{"line":64,"column":2},"end":{"line":64,"column":8}},"31":{"start":{"line":65,"column":2},"end":{"line":71,"column":3}},"32":{"start":{"line":66,"column":4},"end":{"line":66,"column":42}},"33":{"start":{"line":67,"column":9},"end":{"line":71,"column":3}},"34":{"start":{"line":68,"column":4},"end":{"line":68,"column":15}},"35":{"start":{"line":69,"column":9},"end":{"line":71,"column":3}},"36":{"start":{"line":70,"column":4},"end":{"line":70,"column":16}},"37":{"start":{"line":76,"column":2},"end":{"line":76,"column":8}},"38":{"start":{"line":77,"column":2},"end":{"line":89,"column":3}},"39":{"start":{"line":78,"column":4},"end":{"line":84,"column":5}},"40":{"start":{"line":79,"column":6},"end":{"line":79,"column":17}},"41":{"start":{"line":80,"column":11},"end":{"line":84,"column":5}},"42":{"start":{"line":81,"column":6},"end":{"line":81,"column":18}},"43":{"start":{"line":82,"column":11},"end":{"line":84,"column":5}},"44":{"start":{"line":83,"column":6},"end":{"line":83,"column":44}},"45":{"start":{"line":85,"column":9},"end":{"line":89,"column":3}},"46":{"start":{"line":86,"column":4},"end":{"line":86,"column":15}},"47":{"start":{"line":87,"column":9},"end":{"line":89,"column":3}},"48":{"start":{"line":88,"column":4},"end":{"line":88,"column":16}},"49":{"start":{"line":90,"column":2},"end":{"line":90,"column":19}},"50":{"start":{"line":97,"column":0},"end":{"line":127,"column":2}},"51":{"start":{"line":99,"column":2},"end":{"line":99,"column":40}},"52":{"start":{"line":100,"column":2},"end":{"line":100,"column":32}},"53":{"start":{"line":105,"column":2},"end":{"line":105,"column":40}},"54":{"start":{"line":106,"column":2},"end":{"line":106,"column":32}},"55":{"start":{"line":111,"column":2},"end":{"line":111,"column":8}},"56":{"start":{"line":112,"column":2},"end":{"line":125,"column":3}},"57":{"start":{"line":113,"column":4},"end":{"line":120,"column":5}},"58":{"start":{"line":114,"column":6},"end":{"line":114,"column":17}},"59":{"start":{"line":115,"column":11},"end":{"line":120,"column":5}},"60":{"start":{"line":116,"column":6},"end":{"line":116,"column":18}},"61":{"start":{"line":117,"column":11},"end":{"line":120,"column":5}},"62":{"start":{"line":118,"column":6},"end":{"line":118,"column":44}},"63":{"start":{"line":119,"column":6},"end":{"line":119,"column":32}},"64":{"start":{"line":121,"column":9},"end":{"line":125,"column":3}},"65":{"start":{"line":122,"column":4},"end":{"line":122,"column":15}},"66":{"start":{"line":123,"column":9},"end":{"line":125,"column":3}},"67":{"start":{"line":124,"column":4},"end":{"line":124,"column":16}},"68":{"start":{"line":126,"column":2},"end":{"line":126,"column":19}},"69":{"start":{"line":133,"column":0},"end":{"line":147,"column":2}},"70":{"start":{"line":134,"column":2},"end":{"line":134,"column":21}},"71":{"start":{"line":135,"column":2},"end":{"line":135,"column":25}},"72":{"start":{"line":136,"column":2},"end":{"line":146,"column":3}},"73":{"start":{"line":137,"column":4},"end":{"line":137,"column":32}},"74":{"start":{"line":138,"column":4},"end":{"line":138,"column":49}},"75":{"start":{"line":139,"column":4},"end":{"line":144,"column":5}},"76":{"start":{"line":140,"column":6},"end":{"line":142,"column":61}},"77":{"start":{"line":143,"column":6},"end":{"line":143,"column":46}},"78":{"start":{"line":145,"column":4},"end":{"line":145,"column":29}},"79":{"start":{"line":153,"column":0},"end":{"line":168,"column":2}},"80":{"start":{"line":154,"column":2},"end":{"line":154,"column":32}},"81":{"start":{"line":155,"column":2},"end":{"line":155,"column":32}},"82":{"start":{"line":156,"column":2},"end":{"line":156,"column":32}},"83":{"start":{"line":159,"column":2},"end":{"line":167,"column":3}},"84":{"start":{"line":160,"column":4},"end":{"line":160,"column":29}},"85":{"start":{"line":161,"column":9},"end":{"line":167,"column":3}},"86":{"start":{"line":162,"column":4},"end":{"line":162,"column":27}},"87":{"start":{"line":163,"column":9},"end":{"line":167,"column":3}},"88":{"start":{"line":164,"column":4},"end":{"line":164,"column":28}},"89":{"start":{"line":165,"column":9},"end":{"line":167,"column":3}},"90":{"start":{"line":166,"column":4},"end":{"line":166,"column":28}},"91":{"start":{"line":173,"column":0},"end":{"line":197,"column":2}},"92":{"start":{"line":175,"column":2},"end":{"line":182,"column":3}},"93":{"start":{"line":176,"column":4},"end":{"line":176,"column":63}},"94":{"start":{"line":177,"column":4},"end":{"line":177,"column":30}},"95":{"start":{"line":178,"column":4},"end":{"line":178,"column":24}},"96":{"start":{"line":180,"column":4},"end":{"line":180,"column":18}},"97":{"start":{"line":181,"column":4},"end":{"line":181,"column":20}},"98":{"start":{"line":185,"column":2},"end":{"line":185,"column":19}},"99":{"start":{"line":186,"column":2},"end":{"line":188,"column":3}},"100":{"start":{"line":187,"column":4},"end":{"line":187,"column":23}},"101":{"start":{"line":190,"column":2},"end":{"line":190,"column":13}},"102":{"start":{"line":191,"column":2},"end":{"line":191,"column":15}},"103":{"start":{"line":194,"column":2},"end":{"line":194,"column":35}},"104":{"start":{"line":195,"column":2},"end":{"line":195,"column":35}},"105":{"start":{"line":196,"column":2},"end":{"line":196,"column":35}},"106":{"start":{"line":202,"column":0},"end":{"line":225,"column":2}},"107":{"start":{"line":204,"column":2},"end":{"line":211,"column":3}},"108":{"start":{"line":205,"column":4},"end":{"line":205,"column":63}},"109":{"start":{"line":206,"column":4},"end":{"line":206,"column":30}},"110":{"start":{"line":207,"column":4},"end":{"line":207,"column":24}},"111":{"start":{"line":209,"column":4},"end":{"line":209,"column":18}},"112":{"start":{"line":210,"column":4},"end":{"line":210,"column":20}},"113":{"start":{"line":213,"column":2},"end":{"line":213,"column":19}},"114":{"start":{"line":214,"column":2},"end":{"line":216,"column":3}},"115":{"start":{"line":215,"column":4},"end":{"line":215,"column":22}},"116":{"start":{"line":218,"column":2},"end":{"line":218,"column":14}},"117":{"start":{"line":219,"column":2},"end":{"line":219,"column":15}},"118":{"start":{"line":222,"column":2},"end":{"line":222,"column":35}},"119":{"start":{"line":223,"column":2},"end":{"line":223,"column":35}},"120":{"start":{"line":224,"column":2},"end":{"line":224,"column":35}},"121":{"start":{"line":230,"column":0},"end":{"line":261,"column":2}},"122":{"start":{"line":232,"column":2},"end":{"line":239,"column":3}},"123":{"start":{"line":233,"column":4},"end":{"line":233,"column":63}},"124":{"start":{"line":234,"column":4},"end":{"line":234,"column":30}},"125":{"start":{"line":235,"column":4},"end":{"line":235,"column":24}},"126":{"start":{"line":237,"column":4},"end":{"line":237,"column":18}},"127":{"start":{"line":238,"column":4},"end":{"line":238,"column":20}},"128":{"start":{"line":242,"column":2},"end":{"line":242,"column":19}},"129":{"start":{"line":243,"column":2},"end":{"line":245,"column":3}},"130":{"start":{"line":244,"column":4},"end":{"line":244,"column":23}},"131":{"start":{"line":246,"column":2},"end":{"line":246,"column":19}},"132":{"start":{"line":247,"column":2},"end":{"line":249,"column":3}},"133":{"start":{"line":248,"column":4},"end":{"line":248,"column":22}},"134":{"start":{"line":252,"column":2},"end":{"line":252,"column":13}},"135":{"start":{"line":253,"column":2},"end":{"line":253,"column":14}},"136":{"start":{"line":254,"column":2},"end":{"line":254,"column":20}},"137":{"start":{"line":255,"column":2},"end":{"line":255,"column":21}},"138":{"start":{"line":258,"column":2},"end":{"line":258,"column":35}},"139":{"start":{"line":259,"column":2},"end":{"line":259,"column":35}},"140":{"start":{"line":260,"column":2},"end":{"line":260,"column":35}},"141":{"start":{"line":266,"column":0},"end":{"line":297,"column":2}},"142":{"start":{"line":268,"column":2},"end":{"line":275,"column":3}},"143":{"start":{"line":269,"column":4},"end":{"line":269,"column":63}},"144":{"start":{"line":270,"column":4},"end":{"line":270,"column":30}},"145":{"start":{"line":271,"column":4},"end":{"line":271,"column":24}},"146":{"start":{"line":273,"column":4},"end":{"line":273,"column":18}},"147":{"start":{"line":274,"column":4},"end":{"line":274,"column":20}},"148":{"start":{"line":278,"column":2},"end":{"line":278,"column":19}},"149":{"start":{"line":279,"column":2},"end":{"line":281,"column":3}},"150":{"start":{"line":280,"column":4},"end":{"line":280,"column":22}},"151":{"start":{"line":282,"column":2},"end":{"line":282,"column":19}},"152":{"start":{"line":283,"column":2},"end":{"line":285,"column":3}},"153":{"start":{"line":284,"column":4},"end":{"line":284,"column":23}},"154":{"start":{"line":288,"column":2},"end":{"line":288,"column":14}},"155":{"start":{"line":289,"column":2},"end":{"line":289,"column":13}},"156":{"start":{"line":290,"column":2},"end":{"line":290,"column":20}},"157":{"start":{"line":291,"column":2},"end":{"line":291,"column":21}},"158":{"start":{"line":294,"column":2},"end":{"line":294,"column":35}},"159":{"start":{"line":295,"column":2},"end":{"line":295,"column":35}},"160":{"start":{"line":296,"column":2},"end":{"line":296,"column":35}},"161":{"start":{"line":302,"column":0},"end":{"line":323,"column":2}},"162":{"start":{"line":303,"column":2},"end":{"line":307,"column":3}},"163":{"start":{"line":304,"column":4},"end":{"line":304,"column":53}},"164":{"start":{"line":305,"column":4},"end":{"line":305,"column":38}},"165":{"start":{"line":306,"column":4},"end":{"line":306,"column":11}},"166":{"start":{"line":309,"column":2},"end":{"line":309,"column":16}},"167":{"start":{"line":310,"column":2},"end":{"line":310,"column":33}},"168":{"start":{"line":311,"column":2},"end":{"line":315,"column":3}},"169":{"start":{"line":312,"column":4},"end":{"line":312,"column":23}},"170":{"start":{"line":314,"column":4},"end":{"line":314,"column":24}},"171":{"start":{"line":317,"column":2},"end":{"line":322,"column":3}},"172":{"start":{"line":318,"column":4},"end":{"line":318,"column":62}},"173":{"start":{"line":319,"column":4},"end":{"line":319,"column":54}},"174":{"start":{"line":321,"column":4},"end":{"line":321,"column":43}},"175":{"start":{"line":328,"column":0},"end":{"line":337,"column":2}},"176":{"start":{"line":329,"column":2},"end":{"line":331,"column":3}},"177":{"start":{"line":330,"column":4},"end":{"line":330,"column":11}},"178":{"start":{"line":332,"column":2},"end":{"line":332,"column":39}},"179":{"start":{"line":333,"column":2},"end":{"line":335,"column":3}},"180":{"start":{"line":334,"column":4},"end":{"line":334,"column":22}},"181":{"start":{"line":336,"column":2},"end":{"line":336,"column":40}},"182":{"start":{"line":342,"column":0},"end":{"line":352,"column":2}},"183":{"start":{"line":343,"column":2},"end":{"line":345,"column":3}},"184":{"start":{"line":344,"column":4},"end":{"line":344,"column":11}},"185":{"start":{"line":347,"column":2},"end":{"line":347,"column":41}},"186":{"start":{"line":348,"column":2},"end":{"line":348,"column":42}},"187":{"start":{"line":349,"column":2},"end":{"line":351,"column":3}},"188":{"start":{"line":350,"column":4},"end":{"line":350,"column":22}},"189":{"start":{"line":357,"column":0},"end":{"line":366,"column":2}},"190":{"start":{"line":358,"column":2},"end":{"line":360,"column":3}},"191":{"start":{"line":359,"column":4},"end":{"line":359,"column":11}},"192":{"start":{"line":361,"column":2},"end":{"line":363,"column":3}},"193":{"start":{"line":362,"column":4},"end":{"line":362,"column":22}},"194":{"start":{"line":364,"column":2},"end":{"line":364,"column":40}},"195":{"start":{"line":365,"column":2},"end":{"line":365,"column":41}},"196":{"start":{"line":371,"column":0},"end":{"line":373,"column":2}},"197":{"start":{"line":372,"column":2},"end":{"line":372,"column":38}},"198":{"start":{"line":378,"column":0},"end":{"line":393,"column":2}},"199":{"start":{"line":379,"column":2},"end":{"line":381,"column":3}},"200":{"start":{"line":380,"column":4},"end":{"line":380,"column":16}},"201":{"start":{"line":383,"column":2},"end":{"line":383,"column":11}},"202":{"start":{"line":384,"column":2},"end":{"line":390,"column":3}},"203":{"start":{"line":385,"column":4},"end":{"line":385,"column":19}},"204":{"start":{"line":386,"column":9},"end":{"line":390,"column":3}},"205":{"start":{"line":387,"column":4},"end":{"line":387,"column":43}},"206":{"start":{"line":388,"column":9},"end":{"line":390,"column":3}},"207":{"start":{"line":389,"column":4},"end":{"line":389,"column":44}},"208":{"start":{"line":392,"column":2},"end":{"line":392,"column":14}},"209":{"start":{"line":399,"column":0},"end":{"line":415,"column":2}},"210":{"start":{"line":400,"column":2},"end":{"line":414,"column":3}},"211":{"start":{"line":401,"column":4},"end":{"line":401,"column":25}},"212":{"start":{"line":402,"column":4},"end":{"line":404,"column":5}},"213":{"start":{"line":403,"column":6},"end":{"line":403,"column":30}},"214":{"start":{"line":406,"column":4},"end":{"line":410,"column":5}},"215":{"start":{"line":407,"column":6},"end":{"line":407,"column":29}},"216":{"start":{"line":409,"column":6},"end":{"line":409,"column":30}},"217":{"start":{"line":411,"column":4},"end":{"line":413,"column":5}},"218":{"start":{"line":412,"column":6},"end":{"line":412,"column":31}},"219":{"start":{"line":420,"column":0},"end":{"line":443,"column":2}},"220":{"start":{"line":421,"column":2},"end":{"line":421,"column":30}},"221":{"start":{"line":422,"column":2},"end":{"line":424,"column":3}},"222":{"start":{"line":423,"column":4},"end":{"line":423,"column":17}},"223":{"start":{"line":426,"column":2},"end":{"line":441,"column":3}},"224":{"start":{"line":427,"column":4},"end":{"line":427,"column":39}},"225":{"start":{"line":428,"column":4},"end":{"line":428,"column":26}},"226":{"start":{"line":429,"column":4},"end":{"line":429,"column":27}},"227":{"start":{"line":430,"column":4},"end":{"line":430,"column":21}},"228":{"start":{"line":431,"column":4},"end":{"line":431,"column":28}},"229":{"start":{"line":432,"column":9},"end":{"line":441,"column":3}},"230":{"start":{"line":433,"column":4},"end":{"line":433,"column":52}},"231":{"start":{"line":434,"column":4},"end":{"line":434,"column":44}},"232":{"start":{"line":435,"column":9},"end":{"line":441,"column":3}},"233":{"start":{"line":436,"column":4},"end":{"line":436,"column":53}},"234":{"start":{"line":437,"column":4},"end":{"line":437,"column":45}},"235":{"start":{"line":439,"column":4},"end":{"line":439,"column":47}},"236":{"start":{"line":440,"column":4},"end":{"line":440,"column":46}},"237":{"start":{"line":442,"column":2},"end":{"line":442,"column":14}},"238":{"start":{"line":449,"column":0},"end":{"line":460,"column":2}},"239":{"start":{"line":450,"column":2},"end":{"line":452,"column":4}},"240":{"start":{"line":453,"column":2},"end":{"line":455,"column":3}},"241":{"start":{"line":454,"column":4},"end":{"line":454,"column":19}},"242":{"start":{"line":456,"column":2},"end":{"line":458,"column":3}},"243":{"start":{"line":457,"column":4},"end":{"line":457,"column":19}},"244":{"start":{"line":459,"column":2},"end":{"line":459,"column":43}},"245":{"start":{"line":466,"column":0},"end":{"line":477,"column":2}},"246":{"start":{"line":467,"column":2},"end":{"line":469,"column":4}},"247":{"start":{"line":470,"column":2},"end":{"line":472,"column":3}},"248":{"start":{"line":471,"column":4},"end":{"line":471,"column":19}},"249":{"start":{"line":473,"column":2},"end":{"line":475,"column":3}},"250":{"start":{"line":474,"column":4},"end":{"line":474,"column":19}},"251":{"start":{"line":476,"column":2},"end":{"line":476,"column":44}},"252":{"start":{"line":482,"column":0},"end":{"line":484,"column":2}},"253":{"start":{"line":483,"column":2},"end":{"line":483,"column":34}},"254":{"start":{"line":489,"column":0},"end":{"line":491,"column":2}},"255":{"start":{"line":490,"column":2},"end":{"line":490,"column":34}},"256":{"start":{"line":496,"column":0},"end":{"line":506,"column":2}},"257":{"start":{"line":497,"column":2},"end":{"line":497,"column":26}},"258":{"start":{"line":499,"column":2},"end":{"line":501,"column":3}},"259":{"start":{"line":500,"column":4},"end":{"line":500,"column":16}},"260":{"start":{"line":502,"column":2},"end":{"line":505,"column":48}},"261":{"start":{"line":512,"column":0},"end":{"line":520,"column":2}},"262":{"start":{"line":513,"column":2},"end":{"line":513,"column":26}},"263":{"start":{"line":515,"column":2},"end":{"line":517,"column":3}},"264":{"start":{"line":516,"column":4},"end":{"line":516,"column":13}},"265":{"start":{"line":518,"column":2},"end":{"line":519,"column":41}},"266":{"start":{"line":522,"column":0},"end":{"line":522,"column":25}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":24}},{"start":{"line":27,"column":28},"end":{"line":27,"column":47}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":9},"end":{"line":29,"column":9}},{"start":{"line":29,"column":9},"end":{"line":29,"column":9}}]},"4":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":9},"end":{"line":31,"column":9}},{"start":{"line":31,"column":9},"end":{"line":31,"column":9}}]},"5":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":43,"column":2}},{"start":{"line":43,"column":2},"end":{"line":43,"column":2}}]},"6":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":24}},{"start":{"line":43,"column":28},"end":{"line":43,"column":47}}]},"7":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":9},"end":{"line":45,"column":9}},{"start":{"line":45,"column":9},"end":{"line":45,"column":9}}]},"8":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":13},"end":{"line":45,"column":32}},{"start":{"line":45,"column":36},"end":{"line":45,"column":54}}]},"9":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":9},"end":{"line":47,"column":9}},{"start":{"line":47,"column":9},"end":{"line":47,"column":9}}]},"10":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":13},"end":{"line":47,"column":31}},{"start":{"line":47,"column":35},"end":{"line":47,"column":54}}]},"11":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"12":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":21}},{"start":{"line":65,"column":25},"end":{"line":65,"column":41}}]},"13":{"line":66,"type":"cond-expr","locations":[{"start":{"line":66,"column":25},"end":{"line":66,"column":32}},{"start":{"line":66,"column":35},"end":{"line":66,"column":41}}]},"14":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":9},"end":{"line":67,"column":9}},{"start":{"line":67,"column":9},"end":{"line":67,"column":9}}]},"15":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":13},"end":{"line":67,"column":28}},{"start":{"line":67,"column":32},"end":{"line":67,"column":48}}]},"16":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":9},"end":{"line":69,"column":9}},{"start":{"line":69,"column":9},"end":{"line":69,"column":9}}]},"17":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":13},"end":{"line":69,"column":29}},{"start":{"line":69,"column":33},"end":{"line":69,"column":48}}]},"18":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":2},"end":{"line":77,"column":2}},{"start":{"line":77,"column":2},"end":{"line":77,"column":2}}]},"19":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":6},"end":{"line":77,"column":21}},{"start":{"line":77,"column":25},"end":{"line":77,"column":41}}]},"20":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"21":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":11},"end":{"line":80,"column":11}},{"start":{"line":80,"column":11},"end":{"line":80,"column":11}}]},"22":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":11},"end":{"line":82,"column":11}},{"start":{"line":82,"column":11},"end":{"line":82,"column":11}}]},"23":{"line":83,"type":"cond-expr","locations":[{"start":{"line":83,"column":27},"end":{"line":83,"column":33}},{"start":{"line":83,"column":36},"end":{"line":83,"column":43}}]},"24":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":9},"end":{"line":85,"column":9}},{"start":{"line":85,"column":9},"end":{"line":85,"column":9}}]},"25":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":13},"end":{"line":85,"column":28}},{"start":{"line":85,"column":32},"end":{"line":85,"column":48}}]},"26":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":9},"end":{"line":87,"column":9}},{"start":{"line":87,"column":9},"end":{"line":87,"column":9}}]},"27":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":13},"end":{"line":87,"column":29}},{"start":{"line":87,"column":33},"end":{"line":87,"column":48}}]},"28":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":2},"end":{"line":112,"column":2}},{"start":{"line":112,"column":2},"end":{"line":112,"column":2}}]},"29":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":6},"end":{"line":112,"column":21}},{"start":{"line":112,"column":25},"end":{"line":112,"column":41}}]},"30":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":4},"end":{"line":113,"column":4}},{"start":{"line":113,"column":4},"end":{"line":113,"column":4}}]},"31":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":11},"end":{"line":115,"column":11}},{"start":{"line":115,"column":11},"end":{"line":115,"column":11}}]},"32":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":11},"end":{"line":117,"column":11}},{"start":{"line":117,"column":11},"end":{"line":117,"column":11}}]},"33":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":9},"end":{"line":121,"column":9}},{"start":{"line":121,"column":9},"end":{"line":121,"column":9}}]},"34":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":13},"end":{"line":121,"column":28}},{"start":{"line":121,"column":32},"end":{"line":121,"column":48}}]},"35":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":9},"end":{"line":123,"column":9}},{"start":{"line":123,"column":9},"end":{"line":123,"column":9}}]},"36":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":13},"end":{"line":123,"column":29}},{"start":{"line":123,"column":33},"end":{"line":123,"column":48}}]},"37":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":4},"end":{"line":139,"column":4}},{"start":{"line":139,"column":4},"end":{"line":139,"column":4}}]},"38":{"line":140,"type":"cond-expr","locations":[{"start":{"line":141,"column":8},"end":{"line":141,"column":60}},{"start":{"line":142,"column":8},"end":{"line":142,"column":60}}]},"39":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":2},"end":{"line":159,"column":2}},{"start":{"line":159,"column":2},"end":{"line":159,"column":2}}]},"40":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":6},"end":{"line":159,"column":19}},{"start":{"line":159,"column":23},"end":{"line":159,"column":36}}]},"41":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":9},"end":{"line":161,"column":9}},{"start":{"line":161,"column":9},"end":{"line":161,"column":9}}]},"42":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":13},"end":{"line":161,"column":25}},{"start":{"line":161,"column":29},"end":{"line":161,"column":41}}]},"43":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":9},"end":{"line":163,"column":9}},{"start":{"line":163,"column":9},"end":{"line":163,"column":9}}]},"44":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":13},"end":{"line":163,"column":26}},{"start":{"line":163,"column":30},"end":{"line":163,"column":42}}]},"45":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":9},"end":{"line":165,"column":9}},{"start":{"line":165,"column":9},"end":{"line":165,"column":9}}]},"46":{"line":165,"type":"binary-expr","locations":[{"start":{"line":165,"column":13},"end":{"line":165,"column":25}},{"start":{"line":165,"column":29},"end":{"line":165,"column":42}}]},"47":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":2},"end":{"line":175,"column":2}},{"start":{"line":175,"column":2},"end":{"line":175,"column":2}}]},"48":{"line":176,"type":"cond-expr","locations":[{"start":{"line":176,"column":46},"end":{"line":176,"column":52}},{"start":{"line":176,"column":55},"end":{"line":176,"column":62}}]},"49":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":2},"end":{"line":186,"column":2}},{"start":{"line":186,"column":2},"end":{"line":186,"column":2}}]},"50":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":2},"end":{"line":204,"column":2}},{"start":{"line":204,"column":2},"end":{"line":204,"column":2}}]},"51":{"line":205,"type":"cond-expr","locations":[{"start":{"line":205,"column":46},"end":{"line":205,"column":52}},{"start":{"line":205,"column":55},"end":{"line":205,"column":62}}]},"52":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":2},"end":{"line":214,"column":2}},{"start":{"line":214,"column":2},"end":{"line":214,"column":2}}]},"53":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":2},"end":{"line":232,"column":2}},{"start":{"line":232,"column":2},"end":{"line":232,"column":2}}]},"54":{"line":233,"type":"cond-expr","locations":[{"start":{"line":233,"column":46},"end":{"line":233,"column":52}},{"start":{"line":233,"column":55},"end":{"line":233,"column":62}}]},"55":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":2},"end":{"line":243,"column":2}},{"start":{"line":243,"column":2},"end":{"line":243,"column":2}}]},"56":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":2},"end":{"line":247,"column":2}},{"start":{"line":247,"column":2},"end":{"line":247,"column":2}}]},"57":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":2},"end":{"line":268,"column":2}},{"start":{"line":268,"column":2},"end":{"line":268,"column":2}}]},"58":{"line":269,"type":"cond-expr","locations":[{"start":{"line":269,"column":46},"end":{"line":269,"column":52}},{"start":{"line":269,"column":55},"end":{"line":269,"column":62}}]},"59":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":2},"end":{"line":279,"column":2}},{"start":{"line":279,"column":2},"end":{"line":279,"column":2}}]},"60":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":2},"end":{"line":283,"column":2}},{"start":{"line":283,"column":2},"end":{"line":283,"column":2}}]},"61":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":2},"end":{"line":303,"column":2}},{"start":{"line":303,"column":2},"end":{"line":303,"column":2}}]},"62":{"line":310,"type":"binary-expr","locations":[{"start":{"line":310,"column":12},"end":{"line":310,"column":19}},{"start":{"line":310,"column":23},"end":{"line":310,"column":32}}]},"63":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":2},"end":{"line":311,"column":2}},{"start":{"line":311,"column":2},"end":{"line":311,"column":2}}]},"64":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":2},"end":{"line":317,"column":2}},{"start":{"line":317,"column":2},"end":{"line":317,"column":2}}]},"65":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":2},"end":{"line":329,"column":2}},{"start":{"line":329,"column":2},"end":{"line":329,"column":2}}]},"66":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":2},"end":{"line":333,"column":2}},{"start":{"line":333,"column":2},"end":{"line":333,"column":2}}]},"67":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":2},"end":{"line":343,"column":2}},{"start":{"line":343,"column":2},"end":{"line":343,"column":2}}]},"68":{"line":349,"type":"if","locations":[{"start":{"line":349,"column":2},"end":{"line":349,"column":2}},{"start":{"line":349,"column":2},"end":{"line":349,"column":2}}]},"69":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":2},"end":{"line":358,"column":2}},{"start":{"line":358,"column":2},"end":{"line":358,"column":2}}]},"70":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":2},"end":{"line":361,"column":2}},{"start":{"line":361,"column":2},"end":{"line":361,"column":2}}]},"71":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":2},"end":{"line":379,"column":2}},{"start":{"line":379,"column":2},"end":{"line":379,"column":2}}]},"72":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":2},"end":{"line":384,"column":2}},{"start":{"line":384,"column":2},"end":{"line":384,"column":2}}]},"73":{"line":386,"type":"if","locations":[{"start":{"line":386,"column":9},"end":{"line":386,"column":9}},{"start":{"line":386,"column":9},"end":{"line":386,"column":9}}]},"74":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":9},"end":{"line":388,"column":9}},{"start":{"line":388,"column":9},"end":{"line":388,"column":9}}]},"75":{"line":400,"type":"if","locations":[{"start":{"line":400,"column":2},"end":{"line":400,"column":2}},{"start":{"line":400,"column":2},"end":{"line":400,"column":2}}]},"76":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":4},"end":{"line":402,"column":4}},{"start":{"line":402,"column":4},"end":{"line":402,"column":4}}]},"77":{"line":406,"type":"if","locations":[{"start":{"line":406,"column":4},"end":{"line":406,"column":4}},{"start":{"line":406,"column":4},"end":{"line":406,"column":4}}]},"78":{"line":411,"type":"if","locations":[{"start":{"line":411,"column":4},"end":{"line":411,"column":4}},{"start":{"line":411,"column":4},"end":{"line":411,"column":4}}]},"79":{"line":422,"type":"if","locations":[{"start":{"line":422,"column":2},"end":{"line":422,"column":2}},{"start":{"line":422,"column":2},"end":{"line":422,"column":2}}]},"80":{"line":426,"type":"if","locations":[{"start":{"line":426,"column":2},"end":{"line":426,"column":2}},{"start":{"line":426,"column":2},"end":{"line":426,"column":2}}]},"81":{"line":426,"type":"binary-expr","locations":[{"start":{"line":426,"column":6},"end":{"line":426,"column":15}},{"start":{"line":426,"column":19},"end":{"line":426,"column":29}}]},"82":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":9},"end":{"line":432,"column":9}},{"start":{"line":432,"column":9},"end":{"line":432,"column":9}}]},"83":{"line":435,"type":"if","locations":[{"start":{"line":435,"column":9},"end":{"line":435,"column":9}},{"start":{"line":435,"column":9},"end":{"line":435,"column":9}}]},"84":{"line":450,"type":"binary-expr","locations":[{"start":{"line":450,"column":12},"end":{"line":450,"column":19}},{"start":{"line":450,"column":23},"end":{"line":452,"column":3}}]},"85":{"line":453,"type":"if","locations":[{"start":{"line":453,"column":2},"end":{"line":453,"column":2}},{"start":{"line":453,"column":2},"end":{"line":453,"column":2}}]},"86":{"line":456,"type":"if","locations":[{"start":{"line":456,"column":2},"end":{"line":456,"column":2}},{"start":{"line":456,"column":2},"end":{"line":456,"column":2}}]},"87":{"line":467,"type":"binary-expr","locations":[{"start":{"line":467,"column":12},"end":{"line":467,"column":19}},{"start":{"line":467,"column":23},"end":{"line":469,"column":3}}]},"88":{"line":470,"type":"if","locations":[{"start":{"line":470,"column":2},"end":{"line":470,"column":2}},{"start":{"line":470,"column":2},"end":{"line":470,"column":2}}]},"89":{"line":473,"type":"if","locations":[{"start":{"line":473,"column":2},"end":{"line":473,"column":2}},{"start":{"line":473,"column":2},"end":{"line":473,"column":2}}]},"90":{"line":499,"type":"if","locations":[{"start":{"line":499,"column":2},"end":{"line":499,"column":2}},{"start":{"line":499,"column":2},"end":{"line":499,"column":2}}]},"91":{"line":502,"type":"binary-expr","locations":[{"start":{"line":502,"column":9},"end":{"line":502,"column":40}},{"start":{"line":503,"column":4},"end":{"line":503,"column":36}},{"start":{"line":504,"column":4},"end":{"line":505,"column":47}}]},"92":{"line":515,"type":"if","locations":[{"start":{"line":515,"column":2},"end":{"line":515,"column":2}},{"start":{"line":515,"column":2},"end":{"line":515,"column":2}}]}},"code":["'use strict';","","/**"," * AVL Tree"," */","function AVLTree() {","  this.root = null;","}","","/**"," * Tree node"," */","function Node(value, left, right, parent, height) {","  this.value = value;","  this.left = left;","  this.right = right;","  this.parent = parent;","  this.height = height;","}","","/**"," * Calculates the height of a node based on height"," * property of all his children."," */","AVLTree.prototype.getNodeHeight = function (node) {","  var height = 1;","  if (node.left !== null && node.right !== null) {","    height = Math.max(node.left.height, node.right.height) + 1;","  } else if (node.left !== null) {","    height = node.left.height + 1;","  } else if (node.right !== null) {","    height = node.right.height + 1;","  }","  return height;","};","","/**"," * Verifies if the given node is balanced."," */","AVLTree.prototype.isNodeBalanced = function (node) {","  var isBalanced = true;","","  if (node.left !== null && node.right !== null) {","    isBalanced = (Math.abs(node.left.height - node.right.height) <= 1);","  } else if (node.right !== null && node.left === null) {","    isBalanced = node.right.height < 2;","  } else if (node.left !== null && node.right === null) {","    isBalanced = node.left.height < 2;","  }","  return isBalanced;","};","","/**"," * When a removal happens, some nodes need to be"," * restructured. Gets and return these nodes."," */","AVLTree.prototype.getNodesToRestructureAfterRemove = function (traveledNodes) {","  // z is last traveled node - imbalance found at z","  var zIndex = traveledNodes.length - 1;","  var z = traveledNodes[zIndex];","","  // y should be child of z with larger height","  // (cannot be ancestor of removed node)","  var y;","  if (z.left !== null && z.right !== null) {","    y = (z.left === y) ? z.right : z.left;","  } else if (z.left !== null && z.right === null) {","    y = z.left;","  } else if (z.right !== null && z.left === null) {","    y = z.right;","  }","","  // x should be tallest child of y","  // If children same height, x should be child of y","  // that has same orientation as z to y","  var x;","  if (y.left !== null && y.right !== null) {","    if (y.left.height > y.right.height) {","      x = y.left;","    } else if (y.left.height < y.right.height) {","      x = y.right;","    } else if (y.left.height === y.right.height) {","      x = (z.left === y) ? y.left : y.right;","    }","  } else if (y.left !== null && y.right === null) {","    x = y.left;","  } else if (y.right !== null && y.left === null) {","    x = y.right;","  }","  return [x, y, z];","};","","/**"," * When a insertion happens, some nodes need to be"," * restructured. Gets and return these nodes."," */","AVLTree.prototype.getNodesToRestructureAfterInsert = function (traveledNodes) {","  // z is last traveled node - imbalance found at z","  var zIndex = traveledNodes.length - 1;","  var z = traveledNodes[zIndex];","","  // y should be child of z with larger height","  // (must be ancestor of inserted node)","  // therefore, last traveled node is correct.","  var yIndex = traveledNodes.length - 2;","  var y = traveledNodes[yIndex];","","  // x should be tallest child of y","  // If children same height, x should be ancestor","  // of inserted node (in traveled path)","  var x;","  if (y.left !== null && y.right !== null) {","    if (y.left.height > y.right.height) {","      x = y.left;","    } else if (y.left.height < y.right.height) {","      x = y.right;","    } else if (y.left.height === y.right.height) {","      var xIndex = traveledNodes.length - 3;","      x = traveledNodes[xIndex];","    }","  } else if (y.left !== null && y.right === null) {","    x = y.left;","  } else if (y.right !== null && y.left === null) {","    x = y.right;","  }","  return [x, y, z];","};","","/**"," * Keep the height balance property by walking to"," * root and checking for invalid heights."," */","AVLTree.prototype.keepHeightBalance = function (node, afterRemove) {","  var current = node;","  var traveledNodes = [];","  while (current !== null) {","    traveledNodes.push(current);","    current.height = this.getNodeHeight(current);","    if (!this.isNodeBalanced(current)) {","      var nodesToBeRestructured = (afterRemove) ?","        this.getNodesToRestructureAfterRemove(traveledNodes) :","        this.getNodesToRestructureAfterInsert(traveledNodes);","      this.restructure(nodesToBeRestructured);","    }","    current = current.parent;","  }","};","","/**"," * Identifies and calls the appropriate pattern"," * rotator."," */","AVLTree.prototype.restructure = function (nodesToRestructure) {","  var x = nodesToRestructure[0];","  var y = nodesToRestructure[1];","  var z = nodesToRestructure[2];","","  // Determine Rotation Pattern","  if (z.right === y && y.right === x) {","    this.rightRight(x, y, z);","  } else if (z.left === y && y.left === x) {","    this.leftLeft(x, y, z);","  } else if (z.right === y && y.left === x) {","    this.rightLeft(x, y, z);","  } else if (z.left === y && y.right === x) {","    this.leftRight(x, y, z);","  }","};","","/**"," * Right-right rotation pattern."," */","AVLTree.prototype.rightRight = function (x, y, z) {","  // pass z parent to y and move y's left to z's right","  if (z.parent !== null) {","    var orientation = (z.parent.left === z) ? 'left' : 'right';","    z.parent[orientation] = y;","    y.parent = z.parent;","  } else {","    this.root = y;","    y.parent = null;","  }","","  // z adopts y's left.","  z.right = y.left;","  if (z.right !== null) {","    z.right.parent = z;","  }","  // y adopts z","  y.left = z;","  z.parent = y;","","  // Correct each nodes height - order matters, children first","  x.height = this.getNodeHeight(x);","  z.height = this.getNodeHeight(z);","  y.height = this.getNodeHeight(y);","};","","/**"," * Left-left rotation pattern."," */","AVLTree.prototype.leftLeft = function (x, y, z) {","  //pass z parent to y and move y's right to z's left","  if (z.parent !== null) {","    var orientation = (z.parent.left === z) ? 'left' : 'right';","    z.parent[orientation] = y;","    y.parent = z.parent;","  } else {","    this.root = y;","    y.parent = null;","  }","","  z.left = y.right;","  if (z.left !== null) {","    z.left.parent = z;","  }","  //fix y right child","  y.right = z;","  z.parent = y;","","  // Correct each nodes height - order matters, children first","  x.height = this.getNodeHeight(x);","  z.height = this.getNodeHeight(z);","  y.height = this.getNodeHeight(y);","};","","/**"," * Right-left rotation pattern."," */","AVLTree.prototype.rightLeft = function (x, y, z) {","  //pass z parent to x","  if (z.parent !== null) {","    var orientation = (z.parent.left === z) ? 'left' : 'right';","    z.parent[orientation] = x;","    x.parent = z.parent;","  } else {","    this.root = x;","    x.parent = null;","  }","","  // Adoptions","  z.right = x.left;","  if (z.right !== null) {","    z.right.parent = z;","  }","  y.left = x.right;","  if (y.left !== null) {","    y.left.parent = y;","  }","","  // Point to new children (x new parent)","  x.left = z;","  x.right = y;","  x.left.parent = x;","  x.right.parent = x;","","  // Correct each nodes height - order matters, children first","  y.height = this.getNodeHeight(y);","  z.height = this.getNodeHeight(z);","  x.height = this.getNodeHeight(x);","};","","/**"," * Left-right rotation pattern."," */","AVLTree.prototype.leftRight = function (x, y, z) {","  //pass z parent to x","  if (z.parent !== null) {","    var orientation = (z.parent.left === z) ? 'left' : 'right';","    z.parent[orientation] = x;","    x.parent = z.parent;","  } else {","    this.root = x;","    x.parent = null;","  }","","  // Adoptions","  z.left = x.right;","  if (z.left !== null) {","    z.left.parent = z;","  }","  y.right = x.left;","  if (y.right !== null) {","    y.right.parent = y;","  }","","  // Point to new children (x new parent)","  x.right = z;","  x.left = y;","  x.left.parent = x;","  x.right.parent = x;","","  // Correct each nodes height - order matters, children first","  y.height = this.getNodeHeight(y);","  z.height = this.getNodeHeight(z);","  x.height = this.getNodeHeight(x);","};","","/**"," * Inserts a value as a Node of an AVL Tree."," */","AVLTree.prototype.insert = function (value, current) {","  if (this.root === null) {","    this.root = new Node(value, null, null, null, 1);","    this.keepHeightBalance(this.root);","    return;","  }","","  var insertKey;","  current = current || this.root;","  if (current.value > value) {","    insertKey = 'left';","  } else {","    insertKey = 'right';","  }","","  if (!current[insertKey]) {","    current[insertKey] = new Node(value, null, null, current);","    this.keepHeightBalance(current[insertKey], false);","  } else {","    this.insert(value, current[insertKey]);","  }","};","","/**"," * In-order traversal from the given node."," */","AVLTree.prototype.inOrder = function (current, callback) {","  if (!current) {","    return;","  }","  this.inOrder(current.left, callback);","  if (typeof callback === 'function') {","    callback(current);","  }","  this.inOrder(current.right, callback);","};","","/**"," * Post-order traversal from the given node."," */","AVLTree.prototype.postOrder = function (current, callback) {","  if (!current) {","    return;","  }","","  this.postOrder(current.left, callback);","  this.postOrder(current.right, callback);","  if (typeof callback === 'function') {","    callback(current);","  }","};","","/**"," * Pre-order traversal from the given node."," */","AVLTree.prototype.preOrder = function (current, callback) {","  if (!current) {","    return;","  }","  if (typeof callback === 'function') {","    callback(current);","  }","  this.preOrder(current.left, callback);","  this.preOrder(current.right, callback);","};","","/**"," * Finds a node by its value."," */","AVLTree.prototype.find = function (value) {","  return this._find(value, this.root);","};","","/**"," * Finds a node by its value in the given sub-tree."," */","AVLTree.prototype._find = function (value, current) {","  if (!current) {","    return null;","  }","","  var node;","  if (current.value === value) {","    node = current;","  } else if (current.value > value) {","    node = this._find(value, current.left);","  } else if (current.value < value) {","    node = this._find(value, current.right);","  }","","  return node;","};","","/**"," * Replaces the given child with the new one,"," * for the given parent."," */","AVLTree.prototype.replaceChild = function (parent, oldChild, newChild) {","  if (parent === null) {","    this.root = newChild;","    if (this.root !== null) {","      this.root.parent = null;","    }","  } else {","    if (parent.left === oldChild) {","      parent.left = newChild;","    } else {","      parent.right = newChild;","    }","    if (newChild) {","      newChild.parent = parent;","    }","  }","};","","/**"," * Removes a node by its value."," */","AVLTree.prototype.remove = function (value) {","  var node = this.find(value);","  if (!node) {","    return false;","  }","","  if (node.left && node.right) {","    var min = this.findMin(node.right);","    var temp = node.value;","    node.value = min.value;","    min.value = temp;","    return this.remove(min);","  } else if (node.left) {","    this.replaceChild(node.parent, node, node.left);","    this.keepHeightBalance(node.left, true);","  } else if (node.right) {","    this.replaceChild(node.parent, node, node.right);","    this.keepHeightBalance(node.right, true);","  } else {","    this.replaceChild(node.parent, node, null);","    this.keepHeightBalance(node.parent, true);","  }","  return true;","};","","/**"," * Finds the node with minimum value in the given"," * sub-tree."," */","AVLTree.prototype._findMin = function (node, current) {","  current = current || {","    value: Infinity","  };","  if (!node) {","    return current;","  }","  if (current.value > node.value) {","    current = node;","  }","  return this._findMin(node.left, current);","};","","/**"," * Finds the node with maximum value in the given"," * sub-tree."," */","AVLTree.prototype._findMax = function (node, current) {","  current = current || {","    value: -Infinity","  };","  if (!node) {","    return current;","  }","  if (current.value < node.value) {","    current = node;","  }","  return this._findMax(node.right, current);","};","","/**"," * Finds the node with minimum value in the whole tree."," */","AVLTree.prototype.findMin = function () {","  return this._findMin(this.root);","};","","/**"," * Finds the node with maximum value in the whole tree."," */","AVLTree.prototype.findMax = function () {","  return this._findMax(this.root);","};","","/**"," * Verifies if the tree is balanced."," */","AVLTree.prototype.isTreeBalanced = function () {","  var current = this.root;","","  if (!current) {","    return true;","  }","  return this._isBalanced(current._left) &&","    this._isBalanced(current._right) &&","    Math.abs(this._getNodeHeight(current._left) -","      this._getNodeHeight(current._right)) <= 1;","};","","/**"," * Calculates the height of the tree based on height"," * property."," */","AVLTree.prototype.getTreeHeight = function () {","  var current = this.root;","","  if (!current) {","    return 0;","  }","  return 1 + Math.max(this.getNodeHeight(current._left),","    this._getNodeHeight(current._right));","};","","module.exports = AVLTree;",""],"l":{"6":1,"7":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"34":0,"40":1,"41":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0,"57":1,"59":0,"60":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"85":0,"86":0,"87":0,"88":0,"90":0,"97":1,"99":0,"100":0,"105":0,"106":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"121":0,"122":0,"123":0,"124":0,"126":0,"133":1,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"143":0,"145":0,"153":1,"154":0,"155":0,"156":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"173":1,"175":0,"176":0,"177":0,"178":0,"180":0,"181":0,"185":0,"186":0,"187":0,"190":0,"191":0,"194":0,"195":0,"196":0,"202":1,"204":0,"205":0,"206":0,"207":0,"209":0,"210":0,"213":0,"214":0,"215":0,"218":0,"219":0,"222":0,"223":0,"224":0,"230":1,"232":0,"233":0,"234":0,"235":0,"237":0,"238":0,"242":0,"243":0,"244":0,"246":0,"247":0,"248":0,"252":0,"253":0,"254":0,"255":0,"258":0,"259":0,"260":0,"266":1,"268":0,"269":0,"270":0,"271":0,"273":0,"274":0,"278":0,"279":0,"280":0,"282":0,"283":0,"284":0,"288":0,"289":0,"290":0,"291":0,"294":0,"295":0,"296":0,"302":1,"303":0,"304":0,"305":0,"306":0,"309":0,"310":0,"311":0,"312":0,"314":0,"317":0,"318":0,"319":0,"321":0,"328":1,"329":0,"330":0,"332":0,"333":0,"334":0,"336":0,"342":1,"343":0,"344":0,"347":0,"348":0,"349":0,"350":0,"357":1,"358":0,"359":0,"361":0,"362":0,"364":0,"365":0,"371":1,"372":0,"378":1,"379":0,"380":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"392":0,"399":1,"400":0,"401":0,"402":0,"403":0,"406":0,"407":0,"409":0,"411":0,"412":0,"420":1,"421":0,"422":0,"423":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"439":0,"440":0,"442":0,"449":1,"450":0,"453":0,"454":0,"456":0,"457":0,"459":0,"466":1,"467":0,"470":0,"471":0,"473":0,"474":0,"476":0,"482":1,"483":0,"489":1,"490":0,"496":1,"497":0,"499":0,"500":0,"502":0,"512":1,"513":0,"515":0,"516":0,"518":0,"522":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/bst.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/bst.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"BST","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":24}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":9},"end":{"line":19,"column":21}}},"3":{"name":"Node","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":29}}},"4":{"name":"(anonymous_4)","line":36,"loc":{"start":{"line":36,"column":23},"end":{"line":36,"column":48}}},"5":{"name":"(anonymous_5)","line":60,"loc":{"start":{"line":60,"column":25},"end":{"line":60,"column":38}}},"6":{"name":"(anonymous_6)","line":64,"loc":{"start":{"line":64,"column":22},"end":{"line":64,"column":41}}},"7":{"name":"(anonymous_7)","line":84,"loc":{"start":{"line":84,"column":37},"end":{"line":84,"column":66}}},"8":{"name":"(anonymous_8)","line":98,"loc":{"start":{"line":98,"column":25},"end":{"line":98,"column":41}}},"9":{"name":"(anonymous_9)","line":109,"loc":{"start":{"line":109,"column":23},"end":{"line":109,"column":36}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":47}},"2":{"start":{"line":7,"column":0},"end":{"line":21,"column":1}},"3":{"start":{"line":8,"column":2},"end":{"line":8,"column":19}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":17}},"5":{"start":{"line":13,"column":2},"end":{"line":13,"column":47}},"6":{"start":{"line":18,"column":2},"end":{"line":20,"column":5}},"7":{"start":{"line":19,"column":23},"end":{"line":19,"column":41}},"8":{"start":{"line":26,"column":0},"end":{"line":31,"column":1}},"9":{"start":{"line":27,"column":2},"end":{"line":27,"column":21}},"10":{"start":{"line":28,"column":2},"end":{"line":28,"column":23}},"11":{"start":{"line":29,"column":2},"end":{"line":29,"column":19}},"12":{"start":{"line":30,"column":2},"end":{"line":30,"column":20}},"13":{"start":{"line":36,"column":0},"end":{"line":55,"column":2}},"14":{"start":{"line":39,"column":2},"end":{"line":46,"column":3}},"15":{"start":{"line":40,"column":4},"end":{"line":44,"column":5}},"16":{"start":{"line":41,"column":6},"end":{"line":41,"column":34}},"17":{"start":{"line":42,"column":6},"end":{"line":42,"column":19}},"18":{"start":{"line":43,"column":6},"end":{"line":43,"column":13}},"19":{"start":{"line":45,"column":4},"end":{"line":45,"column":23}},"20":{"start":{"line":48,"column":2},"end":{"line":48,"column":80}},"21":{"start":{"line":49,"column":2},"end":{"line":54,"column":3}},"22":{"start":{"line":50,"column":4},"end":{"line":50,"column":38}},"23":{"start":{"line":52,"column":4},"end":{"line":52,"column":44}},"24":{"start":{"line":53,"column":4},"end":{"line":53,"column":17}},"25":{"start":{"line":60,"column":0},"end":{"line":62,"column":2}},"26":{"start":{"line":61,"column":2},"end":{"line":61,"column":25}},"27":{"start":{"line":64,"column":0},"end":{"line":79,"column":2}},"28":{"start":{"line":66,"column":2},"end":{"line":69,"column":3}},"29":{"start":{"line":67,"column":4},"end":{"line":68,"column":22}},"30":{"start":{"line":67,"column":19},"end":{"line":67,"column":36}},"31":{"start":{"line":68,"column":9},"end":{"line":68,"column":22}},"32":{"start":{"line":71,"column":2},"end":{"line":72,"column":16}},"33":{"start":{"line":72,"column":4},"end":{"line":72,"column":16}},"34":{"start":{"line":74,"column":2},"end":{"line":75,"column":49}},"35":{"start":{"line":75,"column":4},"end":{"line":75,"column":49}},"36":{"start":{"line":77,"column":2},"end":{"line":78,"column":51}},"37":{"start":{"line":78,"column":4},"end":{"line":78,"column":51}},"38":{"start":{"line":84,"column":0},"end":{"line":93,"column":2}},"39":{"start":{"line":85,"column":2},"end":{"line":85,"column":31}},"40":{"start":{"line":86,"column":2},"end":{"line":92,"column":3}},"41":{"start":{"line":87,"column":4},"end":{"line":87,"column":66}},"42":{"start":{"line":88,"column":4},"end":{"line":89,"column":30}},"43":{"start":{"line":89,"column":6},"end":{"line":89,"column":30}},"44":{"start":{"line":91,"column":4},"end":{"line":91,"column":24}},"45":{"start":{"line":98,"column":0},"end":{"line":104,"column":2}},"46":{"start":{"line":99,"column":2},"end":{"line":99,"column":21}},"47":{"start":{"line":100,"column":2},"end":{"line":102,"column":3}},"48":{"start":{"line":101,"column":4},"end":{"line":101,"column":27}},"49":{"start":{"line":103,"column":2},"end":{"line":103,"column":17}},"50":{"start":{"line":109,"column":0},"end":{"line":133,"column":2}},"51":{"start":{"line":110,"column":2},"end":{"line":110,"column":27}},"52":{"start":{"line":111,"column":2},"end":{"line":113,"column":3}},"53":{"start":{"line":112,"column":4},"end":{"line":112,"column":50}},"54":{"start":{"line":115,"column":2},"end":{"line":132,"column":3}},"55":{"start":{"line":121,"column":4},"end":{"line":121,"column":46}},"56":{"start":{"line":122,"column":4},"end":{"line":122,"column":33}},"57":{"start":{"line":123,"column":4},"end":{"line":123,"column":33}},"58":{"start":{"line":130,"column":4},"end":{"line":130,"column":61}},"59":{"start":{"line":131,"column":4},"end":{"line":131,"column":17}},"60":{"start":{"line":135,"column":0},"end":{"line":135,"column":21}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"3":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":63},"end":{"line":48,"column":69}},{"start":{"line":48,"column":72},"end":{"line":48,"column":79}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":2},"end":{"line":49,"column":2}},{"start":{"line":49,"column":2},"end":{"line":49,"column":2}}]},"5":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"6":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"7":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"8":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":2},"end":{"line":74,"column":2}},{"start":{"line":74,"column":2},"end":{"line":74,"column":2}}]},"9":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":11},"end":{"line":75,"column":20}},{"start":{"line":75,"column":24},"end":{"line":75,"column":48}}]},"10":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":2},"end":{"line":77,"column":2}},{"start":{"line":77,"column":2},"end":{"line":77,"column":2}}]},"11":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":11},"end":{"line":78,"column":21}},{"start":{"line":78,"column":25},"end":{"line":78,"column":50}}]},"12":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":2},"end":{"line":86,"column":2}},{"start":{"line":86,"column":2},"end":{"line":86,"column":2}}]},"13":{"line":87,"type":"cond-expr","locations":[{"start":{"line":87,"column":38},"end":{"line":87,"column":44}},{"start":{"line":87,"column":47},"end":{"line":87,"column":54}}]},"14":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"15":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":2},"end":{"line":111,"column":2}},{"start":{"line":111,"column":2},"end":{"line":111,"column":2}}]},"16":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":2},"end":{"line":115,"column":2}},{"start":{"line":115,"column":2},"end":{"line":115,"column":2}}]},"17":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":15}},{"start":{"line":115,"column":19},"end":{"line":115,"column":29}}]},"18":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":36},"end":{"line":130,"column":45}},{"start":{"line":130,"column":49},"end":{"line":130,"column":59}}]}},"code":["'use strict';","var Comparator = require('../util/comparator');","","/**"," * Binary Search Tree"," */","function BST(compareFn) {","  this.root = null;","  this._size = 0;","  /**","   * @var Comparator","   */","  this._comparator = new Comparator(compareFn);","","  /**","   * Read-only property for the size of the tree","   */","  Object.defineProperty(this, 'size', {","    get: function () { return this._size; }.bind(this)","  });","}","","/**"," * Tree node"," */","function Node(value, parent) {","  this.value = value;","  this.parent = parent;","  this.left = null;","  this.right = null;","}","","/**"," * Insert elements to the tree respecting the BST restrictions"," */","BST.prototype.insert = function (value, parent) {","  // Set the root as the initial insertion point","  // if it has not been passed","  if (!parent) {","    if (!this.root) {","      this.root = new Node(value);","      this._size++;","      return;","    }","    parent = this.root;","  }","","  var child = this._comparator.lessThan(value, parent.value) ? 'left' : 'right';","  if (parent[child]) {","    this.insert(value, parent[child]);","  } else {","    parent[child] = new Node(value, parent);","    this._size++;","  }","};","","/**"," * Returns if a tree contains an element in O(lg n)"," */","BST.prototype.contains = function (e) {","  return !!this._find(e);","};","","BST.prototype._find = function (e, root) {","","  if (!root) {","    if (this.root) root = this.root;","    else return false;","  }","","  if (root.value === e)","    return root;","","  if (this._comparator.lessThan(e, root.value))","    return root.left && this._find(e, root.left);","","  if (this._comparator.greaterThan(e, root.value))","    return root.right && this._find(e, root.right);","};","","/**"," * Substitute two nodes"," */","BST.prototype._replaceNodeInParent = function (currNode, newNode) {","  var parent = currNode.parent;","  if (parent) {","    parent[currNode === parent.left ? 'left' : 'right'] = newNode;","    if (newNode)","      newNode.parent = parent;","  } else {","    this.root = newNode;","  }","};","","/**"," * Find the minimum value in a tree"," */","BST.prototype._findMin = function (root) {","  var minNode = root;","  while (minNode.left) {","    minNode = minNode.left;","  }","  return minNode;","};","","/**"," * Remove an element from the BST"," */","BST.prototype.remove = function (e) {","  var node = this._find(e);","  if (!node) {","    throw new Error('Item not found in the tree');","  }","","  if (node.left && node.right) {","    /**","     * If the node to be removed has both left and right children,","     * replace the node's value by the minimum value of the right","     * sub-tree, and remove the leave containing the value","     */","    var successor = this._findMin(node.right);","    this.remove(successor.value);","    node.value = successor.value;","  } else {","    /**","     * If the node is a leaf, just make the parent point to null,","     * and if it has one child, make the parent point to this child","     * instead","     */","    this._replaceNodeInParent(node, node.left || node.right);","    this._size--;","  }","};","","module.exports = BST;",""],"l":{"2":1,"7":1,"8":0,"9":0,"13":0,"18":0,"19":0,"26":1,"27":0,"28":0,"29":0,"30":0,"36":1,"39":0,"40":0,"41":0,"42":0,"43":0,"45":0,"48":0,"49":0,"50":0,"52":0,"53":0,"60":1,"61":0,"64":1,"66":0,"67":0,"68":0,"71":0,"72":0,"74":0,"75":0,"77":0,"78":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"91":0,"98":1,"99":0,"100":0,"101":0,"103":0,"109":1,"110":0,"111":0,"112":0,"115":0,"121":0,"122":0,"123":0,"130":0,"131":0,"135":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/util/comparator.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/util/comparator.js","s":{"1":1,"2":2,"3":0,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":0,"21":0,"22":1},"b":{"1":[0,2],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"Comparator","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":31}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":31},"end":{"line":20,"column":47}}},"3":{"name":"(anonymous_3)","line":25,"loc":{"start":{"line":25,"column":32},"end":{"line":25,"column":48}}},"4":{"name":"(anonymous_4)","line":29,"loc":{"start":{"line":29,"column":39},"end":{"line":29,"column":55}}},"5":{"name":"(anonymous_5)","line":33,"loc":{"start":{"line":33,"column":35},"end":{"line":33,"column":51}}},"6":{"name":"(anonymous_6)","line":37,"loc":{"start":{"line":37,"column":42},"end":{"line":37,"column":58}}},"7":{"name":"(anonymous_7)","line":41,"loc":{"start":{"line":41,"column":29},"end":{"line":41,"column":45}}},"8":{"name":"(anonymous_8)","line":51,"loc":{"start":{"line":51,"column":31},"end":{"line":51,"column":43}}},"9":{"name":"(anonymous_9)","line":53,"loc":{"start":{"line":53,"column":17},"end":{"line":53,"column":33}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":15,"column":1}},"2":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":29}},"4":{"start":{"line":20,"column":0},"end":{"line":23,"column":2}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":24}},"6":{"start":{"line":21,"column":15},"end":{"line":21,"column":24}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":24}},"8":{"start":{"line":25,"column":0},"end":{"line":27,"column":2}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":32}},"10":{"start":{"line":29,"column":0},"end":{"line":31,"column":2}},"11":{"start":{"line":30,"column":2},"end":{"line":30,"column":49}},"12":{"start":{"line":33,"column":0},"end":{"line":35,"column":2}},"13":{"start":{"line":34,"column":2},"end":{"line":34,"column":32}},"14":{"start":{"line":37,"column":0},"end":{"line":39,"column":2}},"15":{"start":{"line":38,"column":2},"end":{"line":38,"column":52}},"16":{"start":{"line":41,"column":0},"end":{"line":43,"column":2}},"17":{"start":{"line":42,"column":2},"end":{"line":42,"column":34}},"18":{"start":{"line":51,"column":0},"end":{"line":56,"column":2}},"19":{"start":{"line":52,"column":2},"end":{"line":52,"column":39}},"20":{"start":{"line":53,"column":2},"end":{"line":55,"column":4}},"21":{"start":{"line":54,"column":4},"end":{"line":54,"column":35}},"22":{"start":{"line":58,"column":0},"end":{"line":58,"column":28}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"3":{"line":22,"type":"cond-expr","locations":[{"start":{"line":22,"column":17},"end":{"line":22,"column":19}},{"start":{"line":22,"column":22},"end":{"line":22,"column":23}}]},"4":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":9},"end":{"line":30,"column":28}},{"start":{"line":30,"column":32},"end":{"line":30,"column":48}}]},"5":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":9},"end":{"line":38,"column":31}},{"start":{"line":38,"column":35},"end":{"line":38,"column":51}}]}},"code":["'use strict';","","/**"," * Initialize the comparator object with a compare function"," *"," * If the function is not passed, it will use the default"," * compare signs (<, > and ==)"," *"," * @param { Function } compareFn"," */","function Comparator(compareFn) {","  if (compareFn) {","    this.compare = compareFn;","  }","}","","/**"," * Default implementation for the compare function"," */","Comparator.prototype.compare = function (a, b) {","  if (a === b) return 0;","  return a < b ? -1 : 1;","};","","Comparator.prototype.lessThan = function (a, b) {","  return this.compare(a, b) < 0;","};","","Comparator.prototype.lessThanOrEqual = function (a, b) {","  return this.lessThan(a, b) || this.equal(a, b);","};","","Comparator.prototype.greaterThan = function (a, b) {","  return this.compare(a, b) > 0;","};","","Comparator.prototype.greaterThanOrEqual = function (a, b) {","  return this.greaterThan(a, b) || this.equal(a, b);","};","","Comparator.prototype.equal = function (a, b) {","  return this.compare(a, b) === 0;","};","","/**"," * Reverse the comparison function to use the opposite logic, e.g:"," * this.compare(a, b) => 1"," * this.reverse();"," * this.compare(a, b) => -1"," */","Comparator.prototype.reverse = function () {","  var originalCompareFn = this.compare;","  this.compare = function (a, b) {","    return originalCompareFn(b, a);","  };","};","","module.exports = Comparator;",""],"l":{"11":1,"12":2,"13":0,"20":1,"21":0,"22":0,"25":1,"26":0,"29":1,"30":0,"33":1,"34":0,"37":1,"38":0,"41":1,"42":0,"51":1,"52":0,"53":0,"54":0,"58":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/treap.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/treap.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":1,"60":0,"61":1,"62":0,"63":1,"64":0,"65":1,"66":0,"67":1,"68":0,"69":1,"70":0,"71":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"Node","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":24},"end":{"line":17,"column":36}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":24},"end":{"line":28,"column":40}}},"4":{"name":"Treap","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":17}}},"5":{"name":"(anonymous_5)","line":51,"loc":{"start":{"line":51,"column":26},"end":{"line":51,"column":49}}},"6":{"name":"(anonymous_6)","line":68,"loc":{"start":{"line":68,"column":24},"end":{"line":68,"column":47}}},"7":{"name":"(anonymous_7)","line":83,"loc":{"start":{"line":83,"column":27},"end":{"line":83,"column":43}}},"8":{"name":"(anonymous_8)","line":92,"loc":{"start":{"line":92,"column":27},"end":{"line":92,"column":43}}},"9":{"name":"(anonymous_9)","line":101,"loc":{"start":{"line":101,"column":26},"end":{"line":101,"column":49}}},"10":{"name":"(anonymous_10)","line":127,"loc":{"start":{"line":127,"column":25},"end":{"line":127,"column":42}}},"11":{"name":"(anonymous_11)","line":131,"loc":{"start":{"line":131,"column":23},"end":{"line":131,"column":40}}},"12":{"name":"(anonymous_12)","line":135,"loc":{"start":{"line":135,"column":26},"end":{"line":135,"column":38}}},"13":{"name":"(anonymous_13)","line":139,"loc":{"start":{"line":139,"column":26},"end":{"line":139,"column":38}}},"14":{"name":"(anonymous_14)","line":143,"loc":{"start":{"line":143,"column":25},"end":{"line":143,"column":42}}},"15":{"name":"(anonymous_15)","line":147,"loc":{"start":{"line":147,"column":23},"end":{"line":147,"column":35}}},"16":{"name":"(anonymous_16)","line":151,"loc":{"start":{"line":151,"column":25},"end":{"line":151,"column":37}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":12,"column":1}},"2":{"start":{"line":7,"column":2},"end":{"line":7,"column":21}},"3":{"start":{"line":8,"column":2},"end":{"line":8,"column":32}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":16}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":18}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":27}},"7":{"start":{"line":17,"column":0},"end":{"line":23,"column":2}},"8":{"start":{"line":18,"column":2},"end":{"line":19,"column":65}},"9":{"start":{"line":20,"column":2},"end":{"line":21,"column":61}},"10":{"start":{"line":22,"column":2},"end":{"line":22,"column":14}},"11":{"start":{"line":28,"column":0},"end":{"line":39,"column":2}},"12":{"start":{"line":29,"column":2},"end":{"line":29,"column":33}},"13":{"start":{"line":32,"column":2},"end":{"line":32,"column":48}},"14":{"start":{"line":33,"column":2},"end":{"line":33,"column":33}},"15":{"start":{"line":35,"column":2},"end":{"line":35,"column":16}},"16":{"start":{"line":36,"column":2},"end":{"line":36,"column":16}},"17":{"start":{"line":38,"column":2},"end":{"line":38,"column":14}},"18":{"start":{"line":44,"column":0},"end":{"line":46,"column":1}},"19":{"start":{"line":45,"column":2},"end":{"line":45,"column":19}},"20":{"start":{"line":51,"column":0},"end":{"line":66,"column":2}},"21":{"start":{"line":52,"column":2},"end":{"line":54,"column":3}},"22":{"start":{"line":53,"column":4},"end":{"line":53,"column":39}},"23":{"start":{"line":57,"column":2},"end":{"line":57,"column":36}},"24":{"start":{"line":58,"column":2},"end":{"line":58,"column":65}},"25":{"start":{"line":61,"column":2},"end":{"line":65,"column":3}},"26":{"start":{"line":62,"column":1},"end":{"line":62,"column":26}},"27":{"start":{"line":64,"column":1},"end":{"line":64,"column":22}},"28":{"start":{"line":68,"column":0},"end":{"line":81,"column":2}},"29":{"start":{"line":69,"column":2},"end":{"line":72,"column":3}},"30":{"start":{"line":71,"column":4},"end":{"line":71,"column":17}},"31":{"start":{"line":73,"column":2},"end":{"line":76,"column":3}},"32":{"start":{"line":75,"column":4},"end":{"line":75,"column":16}},"33":{"start":{"line":79,"column":2},"end":{"line":79,"column":36}},"34":{"start":{"line":80,"column":2},"end":{"line":80,"column":48}},"35":{"start":{"line":83,"column":0},"end":{"line":90,"column":2}},"36":{"start":{"line":84,"column":2},"end":{"line":87,"column":3}},"37":{"start":{"line":86,"column":4},"end":{"line":86,"column":20}},"38":{"start":{"line":89,"column":2},"end":{"line":89,"column":63}},"39":{"start":{"line":92,"column":0},"end":{"line":99,"column":2}},"40":{"start":{"line":93,"column":2},"end":{"line":96,"column":3}},"41":{"start":{"line":95,"column":4},"end":{"line":95,"column":21}},"42":{"start":{"line":98,"column":2},"end":{"line":98,"column":63}},"43":{"start":{"line":101,"column":0},"end":{"line":125,"column":2}},"44":{"start":{"line":102,"column":2},"end":{"line":105,"column":3}},"45":{"start":{"line":104,"column":4},"end":{"line":104,"column":16}},"46":{"start":{"line":107,"column":2},"end":{"line":107,"column":11}},"47":{"start":{"line":109,"column":2},"end":{"line":124,"column":3}},"48":{"start":{"line":110,"column":4},"end":{"line":113,"column":5}},"49":{"start":{"line":112,"column":6},"end":{"line":112,"column":18}},"50":{"start":{"line":116,"column":1},"end":{"line":116,"column":44}},"51":{"start":{"line":117,"column":1},"end":{"line":117,"column":26}},"52":{"start":{"line":118,"column":3},"end":{"line":118,"column":74}},"53":{"start":{"line":119,"column":3},"end":{"line":119,"column":24}},"54":{"start":{"line":121,"column":4},"end":{"line":121,"column":34}},"55":{"start":{"line":122,"column":4},"end":{"line":122,"column":67}},"56":{"start":{"line":123,"column":3},"end":{"line":123,"column":24}},"57":{"start":{"line":127,"column":0},"end":{"line":129,"column":2}},"58":{"start":{"line":128,"column":2},"end":{"line":128,"column":45}},"59":{"start":{"line":131,"column":0},"end":{"line":133,"column":2}},"60":{"start":{"line":132,"column":2},"end":{"line":132,"column":38}},"61":{"start":{"line":135,"column":0},"end":{"line":137,"column":2}},"62":{"start":{"line":136,"column":2},"end":{"line":136,"column":34}},"63":{"start":{"line":139,"column":0},"end":{"line":141,"column":2}},"64":{"start":{"line":140,"column":2},"end":{"line":140,"column":34}},"65":{"start":{"line":143,"column":0},"end":{"line":145,"column":2}},"66":{"start":{"line":144,"column":2},"end":{"line":144,"column":45}},"67":{"start":{"line":147,"column":0},"end":{"line":149,"column":2}},"68":{"start":{"line":148,"column":2},"end":{"line":148,"column":40}},"69":{"start":{"line":151,"column":0},"end":{"line":153,"column":2}},"70":{"start":{"line":152,"column":2},"end":{"line":152,"column":42}},"71":{"start":{"line":155,"column":0},"end":{"line":155,"column":23}}},"branchMap":{"1":{"line":18,"type":"cond-expr","locations":[{"start":{"line":18,"column":34},"end":{"line":18,"column":55}},{"start":{"line":18,"column":58},"end":{"line":18,"column":59}}]},"2":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":34},"end":{"line":19,"column":55}},{"start":{"line":19,"column":58},"end":{"line":19,"column":59}}]},"3":{"line":20,"type":"cond-expr","locations":[{"start":{"line":20,"column":44},"end":{"line":20,"column":67}},{"start":{"line":20,"column":70},"end":{"line":20,"column":71}}]},"4":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":28},"end":{"line":21,"column":51}},{"start":{"line":21,"column":54},"end":{"line":21,"column":55}}]},"5":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":2},"end":{"line":52,"column":2}},{"start":{"line":52,"column":2},"end":{"line":52,"column":2}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"7":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"8":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":73,"column":2}},{"start":{"line":73,"column":2},"end":{"line":73,"column":2}}]},"9":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":2},"end":{"line":84,"column":2}},{"start":{"line":84,"column":2},"end":{"line":84,"column":2}}]},"10":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"11":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":2},"end":{"line":102,"column":2}},{"start":{"line":102,"column":2},"end":{"line":102,"column":2}}]},"12":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":2},"end":{"line":109,"column":2}},{"start":{"line":109,"column":2},"end":{"line":109,"column":2}}]},"13":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":4}},{"start":{"line":110,"column":4},"end":{"line":110,"column":4}}]},"14":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":8},"end":{"line":110,"column":33}},{"start":{"line":110,"column":37},"end":{"line":110,"column":62}}]},"15":{"line":116,"type":"cond-expr","locations":[{"start":{"line":116,"column":37},"end":{"line":116,"column":38}},{"start":{"line":116,"column":41},"end":{"line":116,"column":42}}]},"16":{"line":148,"type":"cond-expr","locations":[{"start":{"line":148,"column":21},"end":{"line":148,"column":35}},{"start":{"line":148,"column":38},"end":{"line":148,"column":39}}]},"17":{"line":152,"type":"cond-expr","locations":[{"start":{"line":152,"column":21},"end":{"line":152,"column":37}},{"start":{"line":152,"column":40},"end":{"line":152,"column":41}}]}},"code":["'use strict';","","/**"," * Tree node"," */","function Node(value, left, right) {","  this.value = value;","  this.children = [left, right];","  this.size = 1;","  this.height = 1;","  this.key = Math.random();","}","","/**"," * Computer the number of childnodes"," */","Node.prototype.resize = function () {","  this.size = (this.children[0] ? this.children[0].size : 0) ","            + (this.children[1] ? this.children[1].size : 0) + 1;","  this.height = Math.max(this.children[0] ? this.children[0].height : 0,","  \t\t\t\t\t\t this.children[1] ? this.children[1].height : 0) + 1;","  return this;","};","","/**"," * Zigzag rotate of tree nodes"," */","Node.prototype.rotate = function (side) {","  var temp = this.children[side];","","  // Rotate","  this.children[side] = temp.children[1 - side];","  temp.children[1 - side] = this;","","  this.resize();","  temp.resize();","","  return temp;","};","","/**"," * Treap"," */","function Treap() {","  this.root = null;","}","","/**"," * Insert new value into the subtree of `node`"," */","Treap.prototype._insert = function (node, value) {","  if (node === null) {","    return new Node(value, null, null);","  }","","  // Passing to childnodes and update","  var side = ~~(value > node.value);","  node.children[side] = this._insert(node.children[side], value);","","  // Keep it balance","  if (node.children[side].key < node.key) {","\treturn node.rotate(side);","  } else {","\treturn node.resize();","  }","};","","Treap.prototype._find = function (node, value) {","  if (node === null) {","    // Empty tree","    return false;","  }","  if (node.value === value) {","    // Found!","    return true;","  }","","  // Search within childnodes","  var side = ~~(value > node.value);","  return this._find(node.children[side], value);","};","","Treap.prototype._minimum = function (node) {","  if (node === null) {","    // Empty tree, returns Infinity","    return Infinity;","  }","","  return Math.min(node.value, this._minimum(node.children[0]));","};","","Treap.prototype._maximum = function (node) {","  if (node === null) {","    // Empty tree, returns -Infinity","    return -Infinity;","  }","","  return Math.max(node.value, this._maximum(node.children[1]));","};","","Treap.prototype._remove = function (node, value) {","  if (node === null) {","    // Empty node, value not found","    return null;","  }","","  var side;","","  if (node.value === value) {","    if (node.children[0] === null && node.children[1] === null) {","      // It's a leaf, set to null","      return null;","    }","","\t// Rotate to a subtree and remove it","\tside = (node.children[0] === null ? 1 : 0);","\tnode = node.rotate(side);","  \tnode.children[1 - side] = this._remove(node.children[1 - side], value);","  \treturn node.resize();","  } else {","    side = ~~(value > node.value);","    node.children[side] = this._remove(node.children[side], value);","  \treturn node.resize();","  }","};","","Treap.prototype.insert = function (value) {","  this.root = this._insert(this.root, value);","};","","Treap.prototype.find = function (value) {","  return this._find(this.root, value);","};","","Treap.prototype.minimum = function () {","  return this._minimum(this.root);","};","","Treap.prototype.maximum = function () {","  return this._maximum(this.root);","};","","Treap.prototype.remove = function (value) {","  this.root = this._remove(this.root, value);","};","","Treap.prototype.size = function () {","  return this.root ? this.root.size : 0;","};","","Treap.prototype.height = function () {","  return this.root ? this.root.height : 0;","};","","module.exports = Treap;",""],"l":{"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"17":1,"18":0,"20":0,"22":0,"28":1,"29":0,"32":0,"33":0,"35":0,"36":0,"38":0,"44":1,"45":0,"51":1,"52":0,"53":0,"57":0,"58":0,"61":0,"62":0,"64":0,"68":1,"69":0,"71":0,"73":0,"75":0,"79":0,"80":0,"83":1,"84":0,"86":0,"89":0,"92":1,"93":0,"95":0,"98":0,"101":1,"102":0,"104":0,"107":0,"109":0,"110":0,"112":0,"116":0,"117":0,"118":0,"119":0,"121":0,"122":0,"123":0,"127":1,"128":0,"131":1,"132":0,"135":1,"136":0,"139":1,"140":0,"143":1,"144":0,"147":1,"148":0,"151":1,"152":0,"155":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/graph.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/graph.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":1,"28":0,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"Graph","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":25}}},"2":{"name":"(anonymous_2)","line":16,"loc":{"start":{"line":16,"column":8},"end":{"line":16,"column":21}}},"3":{"name":"(anonymous_3)","line":20,"loc":{"start":{"line":20,"column":28},"end":{"line":20,"column":41}}},"4":{"name":"(anonymous_4)","line":29,"loc":{"start":{"line":29,"column":26},"end":{"line":29,"column":45}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":28},"end":{"line":48,"column":41}}},"6":{"name":"(anonymous_6)","line":52,"loc":{"start":{"line":52,"column":23},"end":{"line":52,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":9,"column":0},"end":{"line":13,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":63}},"4":{"start":{"line":11,"column":2},"end":{"line":11,"column":37}},"5":{"start":{"line":12,"column":2},"end":{"line":12,"column":32}},"6":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"7":{"start":{"line":17,"column":2},"end":{"line":17,"column":16}},"8":{"start":{"line":20,"column":0},"end":{"line":27,"column":2}},"9":{"start":{"line":21,"column":2},"end":{"line":21,"column":11}},"10":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"11":{"start":{"line":23,"column":4},"end":{"line":23,"column":65}},"12":{"start":{"line":25,"column":2},"end":{"line":25,"column":23}},"13":{"start":{"line":26,"column":2},"end":{"line":26,"column":40}},"14":{"start":{"line":29,"column":0},"end":{"line":46,"column":2}},"15":{"start":{"line":30,"column":2},"end":{"line":30,"column":11}},"16":{"start":{"line":31,"column":2},"end":{"line":31,"column":11}},"17":{"start":{"line":33,"column":2},"end":{"line":33,"column":32}},"18":{"start":{"line":35,"column":2},"end":{"line":35,"column":42}},"19":{"start":{"line":35,"column":24},"end":{"line":35,"column":42}},"20":{"start":{"line":36,"column":2},"end":{"line":36,"column":42}},"21":{"start":{"line":36,"column":24},"end":{"line":36,"column":42}},"22":{"start":{"line":40,"column":2},"end":{"line":40,"column":53}},"23":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"24":{"start":{"line":44,"column":4},"end":{"line":44,"column":55}},"25":{"start":{"line":48,"column":0},"end":{"line":50,"column":2}},"26":{"start":{"line":49,"column":2},"end":{"line":49,"column":41}},"27":{"start":{"line":52,"column":0},"end":{"line":54,"column":2}},"28":{"start":{"line":53,"column":2},"end":{"line":53,"column":34}},"29":{"start":{"line":56,"column":0},"end":{"line":56,"column":23}}},"branchMap":{"1":{"line":10,"type":"cond-expr","locations":[{"start":{"line":10,"column":44},"end":{"line":10,"column":48}},{"start":{"line":10,"column":51},"end":{"line":10,"column":61}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"3":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":25},"end":{"line":33,"column":26}},{"start":{"line":33,"column":29},"end":{"line":33,"column":30}}]},"4":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"5":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":2},"end":{"line":36,"column":2}},{"start":{"line":36,"column":2},"end":{"line":36,"column":2}}]},"6":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":24},"end":{"line":40,"column":42}},{"start":{"line":40,"column":46},"end":{"line":40,"column":47}}]},"7":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":43,"column":2}},{"start":{"line":43,"column":2},"end":{"line":43,"column":2}}]},"8":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":26},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":49}}]}},"code":["'use strict';","","var HashSet = require('./set');","","/**"," * Adjacency list representation of a graph"," * @param {bool} directed"," */","function Graph(directed) {","  this.directed = (directed === undefined ? true : !!directed);","  this.adjList = Object.create(null);","  this.vertices = new HashSet();","}","","// Normalize vertex labels as strings","var _ = function (v) {","  return '' + v;","};","","Graph.prototype.addVertex = function (v) {","  v = _(v);","  if (this.vertices.contains(v)) {","    throw new Error('Vertex \"' + v + '\" has already been added');","  }","  this.vertices.add(v);","  this.adjList[v] = Object.create(null);","};","","Graph.prototype.addEdge = function (a, b, w) {","  a = _(a);","  b = _(b);","  // If no weight is assigned to the edge, 1 is the default","  w = (w === undefined ? 1 : w);","","  if (!this.adjList[a]) this.addVertex(a);","  if (!this.adjList[b]) this.addVertex(b);","","  // If there's already another edge with the same origin and destination","  // sum with the current one","  this.adjList[a][b] = (this.adjList[a][b] || 0) + w;","","  // If the graph is not directed add the edge in both directions","  if (!this.directed) {","    this.adjList[b][a] = (this.adjList[b][a] || 0) + w;","  }","};","","Graph.prototype.neighbors = function (v) {","  return Object.keys(this.adjList[_(v)]);","};","","Graph.prototype.edge = function (a, b) {","  return this.adjList[_(a)][_(b)];","};","","module.exports = Graph;",""],"l":{"3":1,"9":1,"10":0,"11":0,"12":0,"16":1,"17":0,"20":1,"21":0,"22":0,"23":0,"25":0,"26":0,"29":1,"30":0,"31":0,"33":0,"35":0,"36":0,"40":0,"43":0,"44":0,"48":1,"49":0,"52":1,"53":0,"56":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/set.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/set.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":14},"end":{"line":10,"column":26}}},"2":{"name":"(anonymous_2)","line":15,"loc":{"start":{"line":15,"column":9},"end":{"line":15,"column":21}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":24},"end":{"line":21,"column":36}}},"4":{"name":"(anonymous_4)","line":28,"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":39}}},"5":{"name":"(anonymous_5)","line":35,"loc":{"start":{"line":35,"column":29},"end":{"line":35,"column":42}}},"6":{"name":"(anonymous_6)","line":39,"loc":{"start":{"line":39,"column":28},"end":{"line":39,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":10,"column":0},"end":{"line":19,"column":2}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":51}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":34}},"5":{"start":{"line":14,"column":2},"end":{"line":18,"column":5}},"6":{"start":{"line":16,"column":6},"end":{"line":16,"column":33}},"7":{"start":{"line":21,"column":0},"end":{"line":26,"column":2}},"8":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"9":{"start":{"line":23,"column":4},"end":{"line":23,"column":43}},"10":{"start":{"line":25,"column":2},"end":{"line":25,"column":14}},"11":{"start":{"line":28,"column":0},"end":{"line":33,"column":2}},"12":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"13":{"start":{"line":30,"column":4},"end":{"line":30,"column":37}},"14":{"start":{"line":32,"column":2},"end":{"line":32,"column":14}},"15":{"start":{"line":35,"column":0},"end":{"line":37,"column":2}},"16":{"start":{"line":36,"column":2},"end":{"line":36,"column":45}},"17":{"start":{"line":39,"column":0},"end":{"line":41,"column":2}},"18":{"start":{"line":40,"column":2},"end":{"line":40,"column":29}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":25}}},"branchMap":{},"code":["'use strict';","","var HashTable = require('./hash_table');","","/**"," * Typical representation of a mathematical set"," * No restriction on element types"," *   i.e. set.add(1,'a', \"b\", { \"foo\" : \"bar\" })"," */","var HashSet = function () {","  this._elements = new HashTable(arguments.length);","  this.add.apply(this, arguments);","","  Object.defineProperty(this, 'size', {","    get: function () {","      return this._elements.size;","    }","  });","};","","HashSet.prototype.add = function () {","  for (var i = 0; i < arguments.length; i++) {","    this._elements.put(arguments[i], true);","  }","  return this;","};","","HashSet.prototype.remove = function () {","  for (var i = 0; i < arguments.length; i++) {","    this._elements.del(arguments[i]);","  }","  return this;","};","","HashSet.prototype.contains = function (e) {","  return this._elements.get(e) !== undefined;","};","","HashSet.prototype.forEach = function (fn) {","  this._elements.forEach(fn);","};","","module.exports = HashSet;",""],"l":{"3":1,"10":1,"11":0,"12":0,"14":0,"16":0,"21":1,"22":0,"23":0,"25":0,"28":1,"29":0,"30":0,"32":0,"35":1,"36":0,"39":1,"40":0,"43":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/hash_table.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/hash_table.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"HashTable","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":36}}},"2":{"name":"(anonymous_2)","line":10,"loc":{"start":{"line":10,"column":9},"end":{"line":10,"column":21}}},"3":{"name":"(anonymous_3)","line":16,"loc":{"start":{"line":16,"column":9},"end":{"line":16,"column":21}}},"4":{"name":"(anonymous_4)","line":30,"loc":{"start":{"line":30,"column":27},"end":{"line":30,"column":40}}},"5":{"name":"(anonymous_5)","line":40,"loc":{"start":{"line":40,"column":26},"end":{"line":40,"column":41}}},"6":{"name":"(anonymous_6)","line":48,"loc":{"start":{"line":48,"column":26},"end":{"line":48,"column":48}}},"7":{"name":"(anonymous_7)","line":69,"loc":{"start":{"line":69,"column":26},"end":{"line":69,"column":41}}},"8":{"name":"(anonymous_8)","line":79,"loc":{"start":{"line":79,"column":32},"end":{"line":79,"column":47}}},"9":{"name":"(anonymous_9)","line":83,"loc":{"start":{"line":83,"column":34},"end":{"line":83,"column":55}}},"10":{"name":"(anonymous_10)","line":91,"loc":{"start":{"line":91,"column":40},"end":{"line":91,"column":52}}},"11":{"name":"(anonymous_11)","line":105,"loc":{"start":{"line":105,"column":30},"end":{"line":105,"column":44}}},"12":{"name":"(anonymous_12)","line":106,"loc":{"start":{"line":106,"column":22},"end":{"line":106,"column":44}}},"13":{"name":"(anonymous_13)","line":107,"loc":{"start":{"line":107,"column":23},"end":{"line":107,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"2":{"start":{"line":5,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":49}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":18}},"5":{"start":{"line":9,"column":2},"end":{"line":13,"column":5}},"6":{"start":{"line":11,"column":6},"end":{"line":11,"column":32}},"7":{"start":{"line":15,"column":2},"end":{"line":19,"column":5}},"8":{"start":{"line":17,"column":6},"end":{"line":17,"column":25}},"9":{"start":{"line":30,"column":0},"end":{"line":38,"column":2}},"10":{"start":{"line":31,"column":2},"end":{"line":31,"column":51}},"11":{"start":{"line":31,"column":29},"end":{"line":31,"column":51}},"12":{"start":{"line":32,"column":2},"end":{"line":32,"column":15}},"13":{"start":{"line":33,"column":2},"end":{"line":36,"column":3}},"14":{"start":{"line":34,"column":4},"end":{"line":34,"column":50}},"15":{"start":{"line":35,"column":4},"end":{"line":35,"column":17}},"16":{"start":{"line":37,"column":2},"end":{"line":37,"column":14}},"17":{"start":{"line":40,"column":0},"end":{"line":46,"column":2}},"18":{"start":{"line":41,"column":2},"end":{"line":41,"column":30}},"19":{"start":{"line":42,"column":2},"end":{"line":42,"column":11}},"20":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"21":{"start":{"line":44,"column":4},"end":{"line":44,"column":24}},"22":{"start":{"line":48,"column":0},"end":{"line":67,"column":2}},"23":{"start":{"line":49,"column":2},"end":{"line":49,"column":30}},"24":{"start":{"line":50,"column":2},"end":{"line":53,"column":3}},"25":{"start":{"line":52,"column":4},"end":{"line":52,"column":38}},"26":{"start":{"line":54,"column":2},"end":{"line":54,"column":32}},"27":{"start":{"line":56,"column":2},"end":{"line":56,"column":51}},"28":{"start":{"line":57,"column":2},"end":{"line":66,"column":3}},"29":{"start":{"line":60,"column":4},"end":{"line":60,"column":22}},"30":{"start":{"line":62,"column":4},"end":{"line":62,"column":29}},"31":{"start":{"line":63,"column":4},"end":{"line":63,"column":18}},"32":{"start":{"line":65,"column":4},"end":{"line":65,"column":64}},"33":{"start":{"line":65,"column":39},"end":{"line":65,"column":64}},"34":{"start":{"line":69,"column":0},"end":{"line":77,"column":2}},"35":{"start":{"line":70,"column":2},"end":{"line":70,"column":30}},"36":{"start":{"line":71,"column":2},"end":{"line":71,"column":11}},"37":{"start":{"line":73,"column":2},"end":{"line":76,"column":3}},"38":{"start":{"line":74,"column":4},"end":{"line":74,"column":33}},"39":{"start":{"line":75,"column":4},"end":{"line":75,"column":18}},"40":{"start":{"line":79,"column":0},"end":{"line":81,"column":2}},"41":{"start":{"line":80,"column":2},"end":{"line":80,"column":50}},"42":{"start":{"line":83,"column":0},"end":{"line":89,"column":2}},"43":{"start":{"line":84,"column":2},"end":{"line":84,"column":31}},"44":{"start":{"line":85,"column":2},"end":{"line":88,"column":3}},"45":{"start":{"line":86,"column":4},"end":{"line":86,"column":42}},"46":{"start":{"line":86,"column":30},"end":{"line":86,"column":42}},"47":{"start":{"line":87,"column":4},"end":{"line":87,"column":21}},"48":{"start":{"line":91,"column":0},"end":{"line":103,"column":2}},"49":{"start":{"line":92,"column":2},"end":{"line":92,"column":29}},"50":{"start":{"line":93,"column":2},"end":{"line":93,"column":45}},"51":{"start":{"line":94,"column":2},"end":{"line":94,"column":18}},"52":{"start":{"line":96,"column":2},"end":{"line":102,"column":3}},"53":{"start":{"line":97,"column":4},"end":{"line":97,"column":47}},"54":{"start":{"line":98,"column":4},"end":{"line":101,"column":5}},"55":{"start":{"line":99,"column":6},"end":{"line":99,"column":43}},"56":{"start":{"line":100,"column":6},"end":{"line":100,"column":23}},"57":{"start":{"line":105,"column":0},"end":{"line":117,"column":2}},"58":{"start":{"line":106,"column":2},"end":{"line":110,"column":4}},"59":{"start":{"line":107,"column":4},"end":{"line":109,"column":7}},"60":{"start":{"line":108,"column":6},"end":{"line":108,"column":25}},"61":{"start":{"line":112,"column":2},"end":{"line":116,"column":3}},"62":{"start":{"line":113,"column":4},"end":{"line":115,"column":5}},"63":{"start":{"line":114,"column":6},"end":{"line":114,"column":36}},"64":{"start":{"line":119,"column":0},"end":{"line":119,"column":27}}},"branchMap":{"1":{"line":6,"type":"binary-expr","locations":[{"start":{"line":6,"column":26},"end":{"line":6,"column":41}},{"start":{"line":6,"column":45},"end":{"line":6,"column":47}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":43,"column":2}},{"start":{"line":43,"column":2},"end":{"line":43,"column":2}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":2},"end":{"line":50,"column":2}},{"start":{"line":50,"column":2},"end":{"line":50,"column":2}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":2},"end":{"line":57,"column":2}},{"start":{"line":57,"column":2},"end":{"line":57,"column":2}}]},"6":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":65,"column":4}},{"start":{"line":65,"column":4},"end":{"line":65,"column":4}}]},"7":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":73,"column":2}},{"start":{"line":73,"column":2},"end":{"line":73,"column":2}}]},"8":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":13},"end":{"line":84,"column":17}},{"start":{"line":84,"column":21},"end":{"line":84,"column":30}}]},"9":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"10":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":15},"end":{"line":97,"column":26}},{"start":{"line":97,"column":30},"end":{"line":97,"column":46}}]},"11":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":4},"end":{"line":113,"column":4}},{"start":{"line":113,"column":4},"end":{"line":113,"column":4}}]}},"code":["'use strict';","","var LinkedList = require('./linked_list');","","function HashTable(initialCapacity) {","  this._table = new Array(initialCapacity || 64);","  this._items = 0;","","  Object.defineProperty(this, 'capacity', {","    get: function () {","      return this._table.length;","    }","  });","","  Object.defineProperty(this, 'size', {","    get: function () {","      return this._items;","    }","  });","}","","/**"," * (Same algorithm as Java's String.hashCode)"," * Returns a hash code for this string. The hash code for a String object is"," * computed as: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]"," * using int arithmetic, where s[i] is the ith character of the string,"," * n is the length of the string, and ^ indicates exponentiation."," * (The hash value of the empty string is zero.)"," */","HashTable.prototype.hash = function (s) {","  if (typeof s !== 'string') s = JSON.stringify(s);","  var hash = 0;","  for (var i = 0; i < s.length; i++) {","    hash = ((hash << 5) - hash) + s.charCodeAt(i);","    hash &= hash; // Keep it a 32bit int","  }","  return hash;","};","","HashTable.prototype.get = function (key) {","  var i = this._position(key);","  var node;","  if ((node = this._findInList(this._table[i], key))) {","    return node.value.v;","  }","};","","HashTable.prototype.put = function (key, value) {","  var i = this._position(key);","  if (!this._table[i]) {","    // Hashing with chaining","    this._table[i] = new LinkedList();","  }","  var item = {k: key, v: value};","","  var node = this._findInList(this._table[i], key);","  if (node) {","    // if the key already exists in the list, replace","    // by the current item","    node.value = item;","  } else {","    this._table[i].add(item);","    this._items++;","","    if (this._items === this.capacity) this._increaseCapacity();","  }","};","","HashTable.prototype.del = function (key) {","  var i = this._position(key);","  var node;","","  if ((node = this._findInList(this._table[i], key))) {","    this._table[i].delNode(node);","    this._items--;","  }","};","","HashTable.prototype._position = function (key) {","  return Math.abs(this.hash(key)) % this.capacity;","};","","HashTable.prototype._findInList = function (list, key) {","  var node = list && list.head;","  while (node) {","    if (node.value.k === key) return node;","    node = node.next;","  }","};","","HashTable.prototype._increaseCapacity = function () {","  var oldTable = this._table;","  this._table = new Array(2 * this.capacity);","  this._items = 0;","","  for (var i = 0; i < oldTable.length; i++) {","    var node = oldTable[i] && oldTable[i].head;","    while (node) {","      this.put(node.value.k, node.value.v);","      node = node.next;","    }","  }","};","","HashTable.prototype.forEach = function (fn) {","  var applyFunction = function (linkedList) {","    linkedList.forEach(function (elem) {","      fn(elem.k, elem.v);","    });","  };","","  for (var i = 0; i < this._table.length; i++) {","    if (this._table[i]) {","      applyFunction(this._table[i]);","    }","  }","};","","module.exports = HashTable;",""],"l":{"3":1,"5":1,"6":0,"7":0,"9":0,"11":0,"15":0,"17":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"37":0,"40":1,"41":0,"42":0,"43":0,"44":0,"48":1,"49":0,"50":0,"52":0,"54":0,"56":0,"57":0,"60":0,"62":0,"63":0,"65":0,"69":1,"70":0,"71":0,"73":0,"74":0,"75":0,"79":1,"80":0,"83":1,"84":0,"85":0,"86":0,"87":0,"91":1,"92":0,"93":0,"94":0,"96":0,"97":0,"98":0,"99":0,"100":0,"105":1,"106":0,"107":0,"108":0,"112":0,"113":0,"114":0,"119":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/linked_list.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/linked_list.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"LinkedList","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":22}}},"2":{"name":"(anonymous_2)","line":14,"loc":{"start":{"line":14,"column":9},"end":{"line":14,"column":21}}},"3":{"name":"Node","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":21}}},"4":{"name":"(anonymous_4)","line":34,"loc":{"start":{"line":34,"column":31},"end":{"line":34,"column":43}}},"5":{"name":"(anonymous_5)","line":44,"loc":{"start":{"line":44,"column":27},"end":{"line":44,"column":47}}},"6":{"name":"(anonymous_6)","line":87,"loc":{"start":{"line":87,"column":27},"end":{"line":87,"column":44}}},"7":{"name":"(anonymous_7)","line":97,"loc":{"start":{"line":97,"column":31},"end":{"line":97,"column":48}}},"8":{"name":"(anonymous_8)","line":115,"loc":{"start":{"line":115,"column":27},"end":{"line":115,"column":44}}},"9":{"name":"(anonymous_9)","line":123,"loc":{"start":{"line":123,"column":31},"end":{"line":123,"column":47}}},"10":{"name":"(anonymous_10)","line":143,"loc":{"start":{"line":143,"column":31},"end":{"line":143,"column":45}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":18,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":19}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":19}},"4":{"start":{"line":10,"column":2},"end":{"line":10,"column":19}},"5":{"start":{"line":13,"column":2},"end":{"line":17,"column":5}},"6":{"start":{"line":15,"column":6},"end":{"line":15,"column":26}},"7":{"start":{"line":23,"column":0},"end":{"line":27,"column":1}},"8":{"start":{"line":24,"column":2},"end":{"line":24,"column":21}},"9":{"start":{"line":25,"column":2},"end":{"line":25,"column":19}},"10":{"start":{"line":26,"column":2},"end":{"line":26,"column":19}},"11":{"start":{"line":34,"column":0},"end":{"line":36,"column":2}},"12":{"start":{"line":35,"column":2},"end":{"line":35,"column":27}},"13":{"start":{"line":44,"column":0},"end":{"line":79,"column":2}},"14":{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},"15":{"start":{"line":46,"column":4},"end":{"line":46,"column":43}},"16":{"start":{"line":49,"column":2},"end":{"line":49,"column":25}},"17":{"start":{"line":51,"column":2},"end":{"line":76,"column":3}},"18":{"start":{"line":52,"column":4},"end":{"line":53,"column":17}},"19":{"start":{"line":55,"column":4},"end":{"line":64,"column":5}},"20":{"start":{"line":57,"column":6},"end":{"line":57,"column":27}},"21":{"start":{"line":58,"column":6},"end":{"line":58,"column":23}},"22":{"start":{"line":60,"column":6},"end":{"line":60,"column":37}},"23":{"start":{"line":61,"column":6},"end":{"line":61,"column":31}},"24":{"start":{"line":62,"column":6},"end":{"line":62,"column":27}},"25":{"start":{"line":63,"column":6},"end":{"line":63,"column":27}},"26":{"start":{"line":65,"column":4},"end":{"line":65,"column":25}},"27":{"start":{"line":66,"column":4},"end":{"line":66,"column":25}},"28":{"start":{"line":69,"column":4},"end":{"line":69,"column":37}},"29":{"start":{"line":69,"column":20},"end":{"line":69,"column":37}},"30":{"start":{"line":71,"column":4},"end":{"line":74,"column":5}},"31":{"start":{"line":72,"column":6},"end":{"line":72,"column":28}},"32":{"start":{"line":73,"column":6},"end":{"line":73,"column":28}},"33":{"start":{"line":75,"column":4},"end":{"line":75,"column":21}},"34":{"start":{"line":78,"column":2},"end":{"line":78,"column":17}},"35":{"start":{"line":87,"column":0},"end":{"line":89,"column":2}},"36":{"start":{"line":88,"column":2},"end":{"line":88,"column":35}},"37":{"start":{"line":97,"column":0},"end":{"line":108,"column":2}},"38":{"start":{"line":98,"column":2},"end":{"line":100,"column":3}},"39":{"start":{"line":99,"column":4},"end":{"line":99,"column":43}},"40":{"start":{"line":102,"column":2},"end":{"line":102,"column":23}},"41":{"start":{"line":103,"column":2},"end":{"line":105,"column":3}},"42":{"start":{"line":104,"column":4},"end":{"line":104,"column":21}},"43":{"start":{"line":107,"column":2},"end":{"line":107,"column":14}},"44":{"start":{"line":115,"column":0},"end":{"line":121,"column":2}},"45":{"start":{"line":116,"column":2},"end":{"line":118,"column":3}},"46":{"start":{"line":117,"column":4},"end":{"line":117,"column":43}},"47":{"start":{"line":120,"column":2},"end":{"line":120,"column":36}},"48":{"start":{"line":123,"column":0},"end":{"line":138,"column":2}},"49":{"start":{"line":124,"column":2},"end":{"line":129,"column":3}},"50":{"start":{"line":126,"column":4},"end":{"line":126,"column":26}},"51":{"start":{"line":128,"column":4},"end":{"line":128,"column":31}},"52":{"start":{"line":130,"column":2},"end":{"line":135,"column":3}},"53":{"start":{"line":132,"column":4},"end":{"line":132,"column":26}},"54":{"start":{"line":134,"column":4},"end":{"line":134,"column":31}},"55":{"start":{"line":137,"column":2},"end":{"line":137,"column":17}},"56":{"start":{"line":143,"column":0},"end":{"line":149,"column":2}},"57":{"start":{"line":144,"column":2},"end":{"line":144,"column":23}},"58":{"start":{"line":145,"column":2},"end":{"line":148,"column":3}},"59":{"start":{"line":146,"column":4},"end":{"line":146,"column":19}},"60":{"start":{"line":147,"column":4},"end":{"line":147,"column":21}},"61":{"start":{"line":151,"column":0},"end":{"line":151,"column":28}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":25}},{"start":{"line":45,"column":29},"end":{"line":45,"column":38}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"4":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":25}},{"start":{"line":51,"column":29},"end":{"line":51,"column":48}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"6":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]},"7":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"8":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":2},"end":{"line":98,"column":2}},{"start":{"line":98,"column":2},"end":{"line":98,"column":2}}]},"9":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":6},"end":{"line":98,"column":26}},{"start":{"line":98,"column":30},"end":{"line":98,"column":39}}]},"10":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":2},"end":{"line":116,"column":2}},{"start":{"line":116,"column":2},"end":{"line":116,"column":2}}]},"11":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":6},"end":{"line":116,"column":26}},{"start":{"line":116,"column":30},"end":{"line":116,"column":39}}]},"12":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":2},"end":{"line":124,"column":2}},{"start":{"line":124,"column":2},"end":{"line":124,"column":2}}]},"13":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":2},"end":{"line":130,"column":2}},{"start":{"line":130,"column":2},"end":{"line":130,"column":2}}]}},"code":["'use strict';","","/**"," * Doubly-linked list"," */","function LinkedList() {","","  this._length = 0;","  this.head = null;","  this.tail = null;","","  // Read-only length property","  Object.defineProperty(this, 'length', {","    get: function () {","      return this._length;","    }.bind(this)","  });","}","","/**"," * A linked list node"," */","function Node(value) {","  this.value = value;","  this.prev = null;","  this.next = null;","}","","/**"," * Whether the list is empty"," *"," * @return Boolean"," */","LinkedList.prototype.isEmpty = function () {","  return this.length === 0;","};","","/**"," * Adds the element to the end of the list or to the desired index"," *"," * @param { Object } n"," * @param { Number } index"," */","LinkedList.prototype.add = function (n, index) {","  if (index > this.length || index < 0) {","    throw new Error('Index out of bounds');","  }","","  var node = new Node(n);","","  if (index !== undefined && index < this.length) {","    var prevNode,","        nextNode;","","    if (index === 0) {","      // Insert in the beginning","      nextNode = this.head;","      this.head = node;","    } else {","      nextNode = this.getNode(index);","      prevNode = nextNode.prev;","      prevNode.next = node;","      node.prev = prevNode;","    }","    nextNode.prev = node;","    node.next = nextNode;","  } else {","    // Insert at the end","    if (!this.head) this.head = node;","","    if (this.tail) {","      this.tail.next = node;","      node.prev = this.tail;","    }","    this.tail = node;","  }","","  this._length++;","};","","/**"," * Return the value associated to the Node on the given index"," *"," * @param { Number } index"," * @return misc"," */","LinkedList.prototype.get = function (index) {","  return this.getNode(index).value;","};","","/**"," * O(n) get"," *"," * @param { Number } index"," * @return Node"," */","LinkedList.prototype.getNode = function (index) {","  if (index >= this.length || index < 0) {","    throw new Error('Index out of bounds');","  }","","  var node = this.head;","  for (var i = 1; i <= index; i++) {","    node = node.next;","  }","","  return node;","};","","/**"," * Delete the element in the indexth position"," *"," * @param { Number } index"," */","LinkedList.prototype.del = function (index) {","  if (index >= this.length || index < 0) {","    throw new Error('Index out of bounds');","  }","","  this.delNode(this.getNode(index));","};","","LinkedList.prototype.delNode = function (node) {","  if (node === this.tail) {","    // node is the last element","    this.tail = node.prev;","  } else {","    node.next.prev = node.prev;","  }","  if (node === this.head) {","    // node is the first element","    this.head = node.next;","  } else {","    node.prev.next = node.next;","  }","","  this._length--;","};","","/**"," * Performs the fn function with each element in the list"," */","LinkedList.prototype.forEach = function (fn) {","  var node = this.head;","  while (node) {","    fn(node.value);","    node = node.next;","  }","};","","module.exports = LinkedList;",""],"l":{"6":1,"8":1,"9":1,"10":1,"13":1,"15":0,"23":1,"24":0,"25":0,"26":0,"34":1,"35":0,"44":1,"45":0,"46":0,"49":0,"51":0,"52":0,"55":0,"57":0,"58":0,"60":0,"61":0,"62":0,"63":0,"65":0,"66":0,"69":0,"71":0,"72":0,"73":0,"75":0,"78":0,"87":1,"88":0,"97":1,"98":0,"99":0,"102":0,"103":0,"104":0,"107":0,"115":1,"116":0,"117":0,"120":0,"123":1,"124":0,"126":0,"128":0,"130":0,"132":0,"134":0,"137":0,"143":1,"144":0,"145":0,"146":0,"147":0,"151":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/heap.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/heap.js","s":{"1":1,"2":1,"3":2,"4":2,"5":2,"6":0,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":1,"53":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"MinHeap","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":28}}},"2":{"name":"(anonymous_2)","line":12,"loc":{"start":{"line":12,"column":9},"end":{"line":12,"column":21}}},"3":{"name":"(anonymous_3)","line":18,"loc":{"start":{"line":18,"column":26},"end":{"line":18,"column":42}}},"4":{"name":"(anonymous_4)","line":24,"loc":{"start":{"line":24,"column":28},"end":{"line":24,"column":40}}},"5":{"name":"(anonymous_5)","line":28,"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":40}}},"6":{"name":"(anonymous_6)","line":33,"loc":{"start":{"line":33,"column":28},"end":{"line":33,"column":40}}},"7":{"name":"(anonymous_7)","line":51,"loc":{"start":{"line":51,"column":28},"end":{"line":51,"column":40}}},"8":{"name":"(anonymous_8)","line":66,"loc":{"start":{"line":66,"column":30},"end":{"line":66,"column":43}}},"9":{"name":"(anonymous_9)","line":81,"loc":{"start":{"line":81,"column":28},"end":{"line":81,"column":41}}},"10":{"name":"(anonymous_10)","line":92,"loc":{"start":{"line":92,"column":28},"end":{"line":92,"column":42}}},"11":{"name":"MaxHeap","line":116,"loc":{"start":{"line":116,"column":0},"end":{"line":116,"column":28}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":47}},"2":{"start":{"line":7,"column":0},"end":{"line":16,"column":1}},"3":{"start":{"line":8,"column":2},"end":{"line":8,"column":26}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":47}},"5":{"start":{"line":11,"column":2},"end":{"line":15,"column":5}},"6":{"start":{"line":13,"column":6},"end":{"line":13,"column":39}},"7":{"start":{"line":18,"column":0},"end":{"line":22,"column":2}},"8":{"start":{"line":19,"column":2},"end":{"line":19,"column":30}},"9":{"start":{"line":20,"column":2},"end":{"line":20,"column":40}},"10":{"start":{"line":21,"column":2},"end":{"line":21,"column":26}},"11":{"start":{"line":24,"column":0},"end":{"line":26,"column":2}},"12":{"start":{"line":25,"column":2},"end":{"line":25,"column":22}},"13":{"start":{"line":28,"column":0},"end":{"line":31,"column":2}},"14":{"start":{"line":29,"column":2},"end":{"line":29,"column":25}},"15":{"start":{"line":30,"column":2},"end":{"line":30,"column":17}},"16":{"start":{"line":33,"column":0},"end":{"line":45,"column":2}},"17":{"start":{"line":34,"column":2},"end":{"line":34,"column":34}},"18":{"start":{"line":38,"column":2},"end":{"line":38,"column":34}},"19":{"start":{"line":39,"column":2},"end":{"line":42,"column":3}},"20":{"start":{"line":40,"column":4},"end":{"line":40,"column":29}},"21":{"start":{"line":41,"column":4},"end":{"line":41,"column":21}},"22":{"start":{"line":44,"column":2},"end":{"line":44,"column":17}},"23":{"start":{"line":51,"column":0},"end":{"line":60,"column":2}},"24":{"start":{"line":52,"column":2},"end":{"line":52,"column":16}},"25":{"start":{"line":54,"column":2},"end":{"line":59,"column":3}},"26":{"start":{"line":58,"column":4},"end":{"line":58,"column":26}},"27":{"start":{"line":66,"column":0},"end":{"line":79,"column":2}},"28":{"start":{"line":67,"column":2},"end":{"line":67,"column":8}},"29":{"start":{"line":68,"column":2},"end":{"line":78,"column":3}},"30":{"start":{"line":70,"column":4},"end":{"line":73,"column":10}},"31":{"start":{"line":73,"column":6},"end":{"line":73,"column":10}},"32":{"start":{"line":74,"column":4},"end":{"line":76,"column":12}},"33":{"start":{"line":76,"column":6},"end":{"line":76,"column":12}},"34":{"start":{"line":77,"column":4},"end":{"line":77,"column":21}},"35":{"start":{"line":81,"column":0},"end":{"line":90,"column":2}},"36":{"start":{"line":82,"column":2},"end":{"line":85,"column":3}},"37":{"start":{"line":83,"column":4},"end":{"line":83,"column":23}},"38":{"start":{"line":84,"column":4},"end":{"line":84,"column":33}},"39":{"start":{"line":87,"column":2},"end":{"line":89,"column":3}},"40":{"start":{"line":88,"column":4},"end":{"line":88,"column":22}},"41":{"start":{"line":92,"column":0},"end":{"line":108,"column":2}},"42":{"start":{"line":96,"column":2},"end":{"line":96,"column":24}},"43":{"start":{"line":97,"column":2},"end":{"line":97,"column":8}},"44":{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},"45":{"start":{"line":100,"column":4},"end":{"line":100,"column":41}},"46":{"start":{"line":103,"column":2},"end":{"line":105,"column":3}},"47":{"start":{"line":104,"column":4},"end":{"line":104,"column":23}},"48":{"start":{"line":107,"column":2},"end":{"line":107,"column":32}},"49":{"start":{"line":116,"column":0},"end":{"line":120,"column":1}},"50":{"start":{"line":118,"column":2},"end":{"line":118,"column":32}},"51":{"start":{"line":119,"column":2},"end":{"line":119,"column":29}},"52":{"start":{"line":122,"column":0},"end":{"line":122,"column":34}},"53":{"start":{"line":124,"column":0},"end":{"line":127,"column":2}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"2":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":11}},{"start":{"line":55,"column":16},"end":{"line":55,"column":31}},{"start":{"line":55,"column":36},"end":{"line":56,"column":50}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"4":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":23}},{"start":{"line":70,"column":27},"end":{"line":71,"column":51}}]},"5":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":74,"column":4}},{"start":{"line":74,"column":4},"end":{"line":74,"column":4}}]},"6":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]}},"code":["'use strict';","var Comparator = require('../util/comparator');","","/**"," * Basic Heap structure"," */","function MinHeap(compareFn) {","  this._elements = [null];","  this._comparator = new Comparator(compareFn);","","  Object.defineProperty(this, 'n', {","    get: function () {","      return this._elements.length - 1;","    }.bind(this)","  });","}","","MinHeap.prototype._swap = function (a, b) {","  var tmp = this._elements[a];","  this._elements[a] = this._elements[b];","  this._elements[b] = tmp;","};","","MinHeap.prototype.isEmpty = function () {","  return this.n === 0;","};","","MinHeap.prototype.insert = function (e) {","  this._elements.push(e);","  this._siftUp();","};","","MinHeap.prototype.extract = function () {","  var element = this._elements[1];","","  // Get the one from the bottom in insert it on top","  // If this isn't already the last element","  var last = this._elements.pop();","  if (this.n) {","    this._elements[1] = last;","    this._siftDown();","  }","","  return element;","};","","/**"," * Sift up the last element"," * O(lg n)"," */","MinHeap.prototype._siftUp = function () {","  var i, parent;","","  for (i = this.n;","      i > 1 && (parent = i >> 1) && this._comparator.greaterThan(","        this._elements[parent], this._elements[i]);","      i = parent) {","    this._swap(parent, i);","  }","};","","/**"," * Sifts down the first element"," * O(lg n)"," */","MinHeap.prototype._siftDown = function (i) {","  var c;","  for (i = i || 1; (c = i << 1) <= this.n; i = c) {","    // checks which is the smaller child to compare with","    if (c + 1 <= this.n && this._comparator.lessThan(","          this._elements[c + 1], this._elements[c]))","      // use the right child if it's lower than the left one","      c++;","    if (this._comparator.lessThan(this._elements[i],","          this._elements[c]))","      break;","    this._swap(i, c);","  }","};","","MinHeap.prototype.heapify = function (a) {","  if (a) {","    this._elements = a;","    this._elements.unshift(null);","  }","","  for (var i = this.n >> 1; i > 0; i--) {","    this._siftDown(i);","  }","};","","MinHeap.prototype.forEach = function (fn) {","  // A copy is necessary in order to perform extract(),","  // get the items in sorted order and then restore the original","  // this._elements array","  var elementsCopy = [];","  var i;","","  for (i = 0; i < this._elements.length; i++) {","    elementsCopy.push(this._elements[i]);","  }","","  for (i = this.n; i > 0; i--) {","    fn(this.extract());","  }","","  this._elements = elementsCopy;","};","","/**"," * Max Heap, keeps the highest element always on top"," *"," * To avoid code repetition, the Min Heap is used just with"," * a reverse comparator;"," */","function MaxHeap(compareFn) {","","  MinHeap.call(this, compareFn);","  this._comparator.reverse();","}","","MaxHeap.prototype = new MinHeap();","","module.exports = {","  MinHeap: MinHeap,","  MaxHeap: MaxHeap","};",""],"l":{"2":1,"7":1,"8":2,"9":2,"11":2,"13":0,"18":1,"19":0,"20":0,"21":0,"24":1,"25":0,"28":1,"29":0,"30":0,"33":1,"34":0,"38":0,"39":0,"40":0,"41":0,"44":0,"51":1,"52":0,"54":0,"58":0,"66":1,"67":0,"68":0,"70":0,"73":0,"74":0,"76":0,"77":0,"81":1,"82":0,"83":0,"84":0,"87":0,"88":0,"92":1,"96":0,"97":0,"99":0,"100":0,"103":0,"104":0,"107":0,"116":1,"118":0,"119":0,"122":1,"124":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/priority_queue.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/priority_queue.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"PriorityQueue","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":37}}},"2":{"name":"(anonymous_2)","line":13,"loc":{"start":{"line":13,"column":21},"end":{"line":13,"column":37}}},"3":{"name":"(anonymous_3)","line":20,"loc":{"start":{"line":20,"column":36},"end":{"line":20,"column":52}}},"4":{"name":"(anonymous_4)","line":27,"loc":{"start":{"line":27,"column":33},"end":{"line":27,"column":59}}},"5":{"name":"(anonymous_5)","line":35,"loc":{"start":{"line":35,"column":34},"end":{"line":35,"column":58}}},"6":{"name":"(anonymous_6)","line":42,"loc":{"start":{"line":42,"column":35},"end":{"line":42,"column":51}}},"7":{"name":"(anonymous_7)","line":46,"loc":{"start":{"line":46,"column":41},"end":{"line":46,"column":67}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":10,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":12,"column":2},"end":{"line":12,"column":18}},"4":{"start":{"line":13,"column":2},"end":{"line":15,"column":5}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":56}},"6":{"start":{"line":17,"column":2},"end":{"line":17,"column":22}},"7":{"start":{"line":19,"column":2},"end":{"line":19,"column":36}},"8":{"start":{"line":20,"column":2},"end":{"line":22,"column":5}},"9":{"start":{"line":21,"column":4},"end":{"line":21,"column":42}},"10":{"start":{"line":25,"column":0},"end":{"line":25,"column":40}},"11":{"start":{"line":27,"column":0},"end":{"line":33,"column":2}},"12":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"13":{"start":{"line":29,"column":4},"end":{"line":29,"column":47}},"14":{"start":{"line":31,"column":2},"end":{"line":31,"column":34}},"15":{"start":{"line":32,"column":2},"end":{"line":32,"column":44}},"16":{"start":{"line":35,"column":0},"end":{"line":40,"column":2}},"17":{"start":{"line":36,"column":2},"end":{"line":36,"column":49}},"18":{"start":{"line":37,"column":2},"end":{"line":39,"column":8}},"19":{"start":{"line":42,"column":0},"end":{"line":44,"column":2}},"20":{"start":{"line":43,"column":2},"end":{"line":43,"column":30}},"21":{"start":{"line":46,"column":0},"end":{"line":49,"column":2}},"22":{"start":{"line":47,"column":2},"end":{"line":47,"column":34}},"23":{"start":{"line":48,"column":2},"end":{"line":48,"column":17}},"24":{"start":{"line":51,"column":0},"end":{"line":51,"column":31}}},"branchMap":{"1":{"line":14,"type":"cond-expr","locations":[{"start":{"line":14,"column":49},"end":{"line":14,"column":51}},{"start":{"line":14,"column":54},"end":{"line":14,"column":55}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":17},"end":{"line":19,"column":29}},{"start":{"line":19,"column":33},"end":{"line":19,"column":35}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"4":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":4},"end":{"line":38,"column":53}},{"start":{"line":39,"column":4},"end":{"line":39,"column":7}}]},"5":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":4},"end":{"line":38,"column":7}},{"start":{"line":38,"column":11},"end":{"line":38,"column":53}}]}},"code":["'use strict';","","var MinHeap = require('./heap').MinHeap;","","/**"," * Extends the MinHeap with the only difference that"," * the heap operations are performed based on the priority of the element"," * and not on the element itself"," */","function PriorityQueue(initialItems) {","","  var self = this;","  MinHeap.call(this, function (a, b) {","    return self.priority(a) < self.priority(b) ? -1 : 1;","  });","","  this._priority = {};","","  initialItems = initialItems || {};","  Object.keys(initialItems).forEach(function (item) {","    self.insert(item, initialItems[item]);","  });","}","","PriorityQueue.prototype = new MinHeap();","","PriorityQueue.prototype.insert = function (item, priority) {","  if (this._priority[item] !== undefined) {","    return this.changePriority(item, priority);","  }","  this._priority[item] = priority;","  MinHeap.prototype.insert.call(this, item);","};","","PriorityQueue.prototype.extract = function (withPriority) {","  var min = MinHeap.prototype.extract.call(this);","  return withPriority ?","    min && {item: min, priority: this._priority[min]} :","    min;","};","","PriorityQueue.prototype.priority = function (item) {","  return this._priority[item];","};","","PriorityQueue.prototype.changePriority = function (item, priority) {","  this._priority[item] = priority;","  this.heapify();","};","","module.exports = PriorityQueue;",""],"l":{"3":1,"10":1,"12":0,"13":0,"14":0,"17":0,"19":0,"20":0,"21":0,"25":1,"27":1,"28":0,"29":0,"31":0,"32":0,"35":1,"36":0,"37":0,"42":1,"43":0,"46":1,"47":0,"48":0,"51":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/queue.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/queue.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":1,"21":0,"22":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"Queue","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":17}}},"2":{"name":"(anonymous_2)","line":12,"loc":{"start":{"line":12,"column":9},"end":{"line":12,"column":21}}},"3":{"name":"(anonymous_3)","line":18,"loc":{"start":{"line":18,"column":26},"end":{"line":18,"column":38}}},"4":{"name":"(anonymous_4)","line":25,"loc":{"start":{"line":25,"column":23},"end":{"line":25,"column":36}}},"5":{"name":"(anonymous_5)","line":32,"loc":{"start":{"line":32,"column":22},"end":{"line":32,"column":34}}},"6":{"name":"(anonymous_6)","line":41,"loc":{"start":{"line":41,"column":23},"end":{"line":41,"column":35}}},"7":{"name":"(anonymous_7)","line":49,"loc":{"start":{"line":49,"column":26},"end":{"line":49,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"2":{"start":{"line":8,"column":0},"end":{"line":16,"column":1}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":36}},"4":{"start":{"line":11,"column":2},"end":{"line":15,"column":5}},"5":{"start":{"line":13,"column":6},"end":{"line":13,"column":35}},"6":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"7":{"start":{"line":19,"column":2},"end":{"line":19,"column":34}},"8":{"start":{"line":25,"column":0},"end":{"line":27,"column":2}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":24}},"10":{"start":{"line":32,"column":0},"end":{"line":39,"column":2}},"11":{"start":{"line":33,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":34,"column":4},"end":{"line":34,"column":35}},"13":{"start":{"line":36,"column":2},"end":{"line":36,"column":32}},"14":{"start":{"line":37,"column":2},"end":{"line":37,"column":24}},"15":{"start":{"line":38,"column":2},"end":{"line":38,"column":11}},"16":{"start":{"line":41,"column":0},"end":{"line":47,"column":2}},"17":{"start":{"line":42,"column":2},"end":{"line":44,"column":3}},"18":{"start":{"line":43,"column":4},"end":{"line":43,"column":35}},"19":{"start":{"line":46,"column":2},"end":{"line":46,"column":31}},"20":{"start":{"line":49,"column":0},"end":{"line":51,"column":2}},"21":{"start":{"line":50,"column":2},"end":{"line":50,"column":29}},"22":{"start":{"line":53,"column":0},"end":{"line":53,"column":23}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]}},"code":["'use strict';","","var LinkedList = require('./linked_list');","","/**"," * Queue (FIFO) using a Linked List as basis"," */","function Queue() {","  this._elements = new LinkedList();","","  Object.defineProperty(this, 'length', {","    get: function () {","      return this._elements.length;","    }.bind(this)","  });","}","","Queue.prototype.isEmpty = function () {","  return this._elements.isEmpty();","};","","/**"," * Adds element to the end of the queue"," */","Queue.prototype.push = function (e) {","  this._elements.add(e);","};","","/**"," * Pops the element in the beginning of the queue"," */","Queue.prototype.pop = function () {","  if (this.isEmpty()) {","    throw new Error('Empty queue');","  }","  var e = this._elements.get(0);","  this._elements.del(0);","  return e;","};","","Queue.prototype.peek = function () {","  if (this.isEmpty()) {","    throw new Error('Empty queue');","  }","","  return this._elements.get(0);","};","","Queue.prototype.forEach = function (fn) {","  this._elements.forEach(fn);","};","","module.exports = Queue;",""],"l":{"3":1,"8":1,"9":1,"11":1,"13":0,"18":1,"19":0,"25":1,"26":0,"32":1,"33":0,"34":0,"36":0,"37":0,"38":0,"41":1,"42":0,"43":0,"46":0,"49":1,"50":0,"53":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/stack.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/stack.js","s":{"1":1,"2":1,"3":0,"4":1,"5":1,"6":0,"7":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"Stack","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":17}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":23},"end":{"line":22,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":8,"column":0},"end":{"line":10,"column":1}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":19}},"4":{"start":{"line":17,"column":0},"end":{"line":17,"column":30}},"5":{"start":{"line":22,"column":0},"end":{"line":24,"column":2}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":27}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":23}}},"branchMap":{},"code":["'use strict';","","var Queue = require('./queue');","","/**"," * Stack (LIFO) using a Linked List as basis"," */","function Stack() {","  Queue.call(this);","}","","/**"," * Use a Queue as prototype and just overwrite"," * the push method to insert at the 0 position"," * instead of the end of the queue"," */","Stack.prototype = new Queue();","","/**"," * Adds element to the top of the stack"," */","Stack.prototype.push = function (e) {","  this._elements.add(e, 0);","};","","module.exports = Stack;",""],"l":{"3":1,"8":1,"9":0,"17":1,"22":1,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/disjoint_set_forest.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/disjoint_set_forest.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"DisjointSetForest","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":29}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":41},"end":{"line":17,"column":60}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":41},"end":{"line":33,"column":60}}},"4":{"name":"(anonymous_4)","line":36,"loc":{"start":{"line":36,"column":43},"end":{"line":36,"column":62}}},"5":{"name":"(anonymous_5)","line":52,"loc":{"start":{"line":52,"column":35},"end":{"line":52,"column":54}}},"6":{"name":"(anonymous_6)","line":68,"loc":{"start":{"line":68,"column":35},"end":{"line":68,"column":54}}},"7":{"name":"merge","line":83,"loc":{"start":{"line":83,"column":36},"end":{"line":83,"column":71}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":14,"column":1}},"2":{"start":{"line":11,"column":2},"end":{"line":11,"column":21}},"3":{"start":{"line":12,"column":2},"end":{"line":12,"column":19}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":19}},"5":{"start":{"line":17,"column":0},"end":{"line":23,"column":2}},"6":{"start":{"line":18,"column":2},"end":{"line":22,"column":3}},"7":{"start":{"line":19,"column":4},"end":{"line":19,"column":37}},"8":{"start":{"line":20,"column":4},"end":{"line":20,"column":29}},"9":{"start":{"line":21,"column":4},"end":{"line":21,"column":29}},"10":{"start":{"line":33,"column":0},"end":{"line":40,"column":2}},"11":{"start":{"line":34,"column":2},"end":{"line":34,"column":27}},"12":{"start":{"line":35,"column":2},"end":{"line":35,"column":32}},"13":{"start":{"line":36,"column":2},"end":{"line":39,"column":16}},"14":{"start":{"line":37,"column":4},"end":{"line":37,"column":29}},"15":{"start":{"line":38,"column":4},"end":{"line":38,"column":39}},"16":{"start":{"line":52,"column":0},"end":{"line":58,"column":2}},"17":{"start":{"line":53,"column":2},"end":{"line":53,"column":27}},"18":{"start":{"line":54,"column":2},"end":{"line":56,"column":3}},"19":{"start":{"line":55,"column":4},"end":{"line":55,"column":63}},"20":{"start":{"line":57,"column":2},"end":{"line":57,"column":32}},"21":{"start":{"line":68,"column":0},"end":{"line":71,"column":2}},"22":{"start":{"line":69,"column":2},"end":{"line":69,"column":27}},"23":{"start":{"line":70,"column":2},"end":{"line":70,"column":41}},"24":{"start":{"line":83,"column":0},"end":{"line":105,"column":2}},"25":{"start":{"line":84,"column":2},"end":{"line":86,"column":3}},"26":{"start":{"line":85,"column":4},"end":{"line":85,"column":51}},"27":{"start":{"line":88,"column":2},"end":{"line":88,"column":28}},"28":{"start":{"line":89,"column":2},"end":{"line":89,"column":28}},"29":{"start":{"line":90,"column":2},"end":{"line":90,"column":34}},"30":{"start":{"line":91,"column":2},"end":{"line":91,"column":34}},"31":{"start":{"line":93,"column":2},"end":{"line":103,"column":3}},"32":{"start":{"line":94,"column":4},"end":{"line":94,"column":33}},"33":{"start":{"line":95,"column":4},"end":{"line":95,"column":45}},"34":{"start":{"line":97,"column":7},"end":{"line":103,"column":3}},"35":{"start":{"line":98,"column":4},"end":{"line":98,"column":33}},"36":{"start":{"line":99,"column":4},"end":{"line":99,"column":45}},"37":{"start":{"line":100,"column":4},"end":{"line":102,"column":5}},"38":{"start":{"line":101,"column":6},"end":{"line":101,"column":30}},"39":{"start":{"line":104,"column":2},"end":{"line":104,"column":14}},"40":{"start":{"line":108,"column":0},"end":{"line":108,"column":35}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]},"2":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":2},"end":{"line":54,"column":2}},{"start":{"line":54,"column":2},"end":{"line":54,"column":2}}]},"3":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":2},"end":{"line":84,"column":2}},{"start":{"line":84,"column":2},"end":{"line":84,"column":2}}]},"4":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"5":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":7},"end":{"line":97,"column":7}},{"start":{"line":97,"column":7},"end":{"line":97,"column":7}}]},"6":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]}},"code":["'use strict';","","/**"," * Disjoint Set Forest data structure."," * Allows fast subset merging and querying."," * New elements lie in their own one-element subsets by default."," *"," * @constructor"," */","function DisjointSetForest() {","  this._parents = {};","  this._ranks = {};","  this._sizes = {};","}","","","DisjointSetForest.prototype._introduce = function (element) {","  if (!(element in this._parents)) {","    this._parents[element] = element;","    this._ranks[element] = 0;","    this._sizes[element] = 1;","  }","};","","","/**"," * Check if the elements belong to the same subset."," * Complexity: O(A^-1) (inverse Ackermann function) amortized."," *"," * @param {...*} element"," * @return {boolean}"," */","DisjointSetForest.prototype.sameSubset = function (element) {","  this._introduce(element);","  var root = this.root(element);","  return [].slice.call(arguments, 1).every(function (element) {","    this._introduce(element);","    return this.root(element) === root;","  }.bind(this));","};","","","/**"," * Return the root element which represents the given element's subset."," * The result does not depend on the choice of the element,"," *   but rather on the subset itself."," * Complexity: O(A^-1) (inverse Ackermann function) amortized."," *"," * @param {*} element"," * @return {*}"," */","DisjointSetForest.prototype.root = function (element) {","  this._introduce(element);","  if (this._parents[element] !== element) {","    this._parents[element] = this.root(this._parents[element]);","  }","  return this._parents[element];","};","","","/**"," * Return the size of the given element's subset."," * Complexity: O(A^-1) (inverse Ackermann function) amortized."," *"," * @param {*} element"," * @return {number}"," */","DisjointSetForest.prototype.size = function (element) {","  this._introduce(element);","  return this._sizes[this.root(element)];","};","","","/**"," * Merge subsets containing two (or more) given elements into one."," * Complexity: O(A^-1) (inverse Ackermann function) amortized."," *"," * @param {*} element1"," * @param {*} element2"," * @param {...*}"," * @return {DisjointSetForest}"," */","DisjointSetForest.prototype.merge = function merge(element1, element2) {","  if (arguments.length > 2) {","    merge.apply(this, [].slice.call(arguments, 1));","  }","","  this._introduce(element1);","  this._introduce(element2);","  var root1 = this.root(element1);","  var root2 = this.root(element2);","","  if (this._ranks[root1] < this._ranks[root2]) {","    this._parents[root1] = root2;","    this._sizes[root2] += this._sizes[root1];","  }","  else if (root1 !== root2) {","    this._parents[root2] = root1;","    this._sizes[root1] += this._sizes[root2];","    if (this._ranks[root1] === this._ranks[root2]) {","      this._ranks[root1] += 1;","    }","  }","  return this;","};","","","module.exports = DisjointSetForest;",""],"l":{"10":1,"11":0,"12":0,"13":0,"17":1,"18":0,"19":0,"20":0,"21":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"52":1,"53":0,"54":0,"55":0,"57":0,"68":1,"69":0,"70":0,"83":1,"84":0,"85":0,"88":0,"89":0,"90":0,"91":0,"93":0,"94":0,"95":0,"97":0,"98":0,"99":0,"100":0,"101":0,"104":0,"108":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/fenwick_tree.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/data_structures/fenwick_tree.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"FenwickTree","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":29}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":31},"end":{"line":34,"column":55}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":34},"end":{"line":58,"column":51}}},"4":{"name":"(anonymous_4)","line":83,"loc":{"start":{"line":83,"column":33},"end":{"line":83,"column":63}}}},"statementMap":{"1":{"start":{"line":25,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":26,"column":2},"end":{"line":26,"column":41}},"3":{"start":{"line":27,"column":2},"end":{"line":28,"column":26}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":26}},"5":{"start":{"line":34,"column":0},"end":{"line":53,"column":2}},"6":{"start":{"line":51,"column":2},"end":{"line":52,"column":35}},"7":{"start":{"line":52,"column":4},"end":{"line":52,"column":35}},"8":{"start":{"line":58,"column":0},"end":{"line":78,"column":2}},"9":{"start":{"line":74,"column":2},"end":{"line":74,"column":14}},"10":{"start":{"line":75,"column":2},"end":{"line":76,"column":33}},"11":{"start":{"line":76,"column":4},"end":{"line":76,"column":33}},"12":{"start":{"line":77,"column":2},"end":{"line":77,"column":13}},"13":{"start":{"line":83,"column":0},"end":{"line":85,"column":2}},"14":{"start":{"line":84,"column":2},"end":{"line":84,"column":65}},"15":{"start":{"line":87,"column":0},"end":{"line":87,"column":29}}},"branchMap":{},"code":["'use strict';","","/**"," * Fenwick Tree (Binary Indexed Tree)"," *"," * The fenwick tree is a tree in the sense it represents a structure where"," * the leafs are the original array values and each parent has the sum of its"," * two children. E.g., for an array [1, 2, 3, 4], we have:"," *"," *    10"," *  3    7"," * 1 2  3 4"," *"," * But some nodes aren't really important. In fact every right child isn't"," * needed to compute the prefix sum (as its value is just the parent's value"," * minus the left child), so we can store the tree in a compact array structure"," * like this:"," *"," * 1 3 3 10"," *"," * Here we assume all the operations will be on a 1-based array for two"," * reasons: (1) the bit operations become rather easy and (2) it's better to"," * reason about the range sum (prefix(b) - prefix(a-1)) on a 1-based array."," */","function FenwickTree(length) {","  this._elements = new Array(length + 1);","  for (var i = 0; i < this._elements.length ; i++)","    this._elements[i] = 0;","}","","/**"," * Adds value to the array at specified index in O(log n)"," */","FenwickTree.prototype.adjust = function (index, value) {","  /*","    This function goes up the tree adding the value to all parent nodes.","","    In the array, to know where a index is in the tree, just look at where is","    the rightmost bit. 1 is a leaf, because the rightmost bit is at position 0.","    2 (10) is 1 level above the leafs. 4 (100) is 2 levels above the leafs.","","    Going up the tree means pushing the rightmost bit far to the left. We do","    this by adding only the bit itself to the index. Eventually we skip","    some levels that aren't represented in the array. E.g. starting at 3 (11),","    it's imediate parent is 11b + 1b = 100b. We started at a leaf  and skipped","    the level-1 node, because it wasn't represented in the array","    (a right child).","","    Note: (index&-index) finds the rightmost bit in index.","  */","  for (; index < this._elements.length ; index += (index&-index))","    this._elements[index] += value;","};","","/**","* Returns the sum of all values up to specified index in O(log n)","*/","FenwickTree.prototype.prefixSum = function (index) {","  /*","    This function goes up the tree adding the required nodes to sum the prefix.","","    The key here is to sum every node that isn't in the same subtree as an","    already seen node. In practice we proceed always getting a node's uncle","    (the sibling of the node's parent). So, if we start at the index 7, we must","    go to 6 (7's uncle), then to 4 (6's uncle), then we stop, because 4 has","    no uncle.","","    Binary-wise, this is the same as erasing the rightmost bit of the index.","    E.g. 7 (111) -> 6 (110) -> 4 (100).","","    Note: (index&-index) finds the rightmost bit in index.","  */","","  var sum = 0;","  for (; index > 0 ; index -= (index&-index))","    sum += this._elements[index];","  return sum;","};","","/**","* Returns the sum of all values between two indexes in O(log n)","*/","FenwickTree.prototype.rangeSum = function (fromIndex, toIndex) {","  return this.prefixSum(toIndex) - this.prefixSum(fromIndex - 1);","};","","module.exports = FenwickTree;",""],"l":{"25":1,"26":0,"27":0,"28":0,"34":1,"51":0,"52":0,"58":1,"74":0,"75":0,"76":0,"77":0,"83":1,"84":0,"87":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/graph.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/graph.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":16,"column":2}}},"branchMap":{},"code":["'use strict';","","// Graph algorithms","module.exports = {","  topologicalSort: require('./algorithms/graph/topological_sort'),","  dijkstra: require('./algorithms/graph/dijkstra'),","  SPFA: require('./algorithms/graph/SPFA'),","  bellmanFord: require('./algorithms/graph/bellman_ford'),","  eulerPath: require('./algorithms/graph/euler_path'),","  depthFirstSearch: require('./algorithms/graph/depth_first_search'),","  kruskal: require('./algorithms/graph/kruskal'),","  breadthFirstSearch: require('./algorithms/graph/breadth_first_search'),","  bfsShortestPath: require('./algorithms/graph/bfs_shortest_path'),","  prim: require('./algorithms/graph/prim'),","  floydWarshall: require('./algorithms/graph/floyd_warshall')","};",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/topological_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/topological_sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":22},"end":{"line":20,"column":39}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":25},"end":{"line":25,"column":41}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":24},"end":{"line":28,"column":50}}},"4":{"name":"(anonymous_4)","line":31,"loc":{"start":{"line":31,"column":21},"end":{"line":31,"column":37}}},"5":{"name":"(anonymous_5)","line":34,"loc":{"start":{"line":34,"column":21},"end":{"line":34,"column":37}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":4,"column":76}},"2":{"start":{"line":20,"column":0},"end":{"line":42,"column":2}},"3":{"start":{"line":21,"column":2},"end":{"line":21,"column":26}},"4":{"start":{"line":22,"column":2},"end":{"line":22,"column":20}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":15}},"6":{"start":{"line":25,"column":2},"end":{"line":39,"column":5}},"7":{"start":{"line":26,"column":4},"end":{"line":38,"column":5}},"8":{"start":{"line":27,"column":6},"end":{"line":37,"column":9}},"9":{"start":{"line":29,"column":10},"end":{"line":29,"column":37}},"10":{"start":{"line":32,"column":10},"end":{"line":32,"column":34}},"11":{"start":{"line":35,"column":10},"end":{"line":35,"column":27}},"12":{"start":{"line":41,"column":2},"end":{"line":41,"column":15}},"13":{"start":{"line":44,"column":0},"end":{"line":44,"column":33}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]}},"code":["'use strict';","","var Stack = require('../../data_structures/stack'),","    depthFirstSearch = require('../../algorithms/graph/depth_first_search');","","/**"," * Sorts the edges of the DAG topologically"," *"," *  (node1) -> (node2) -> (node4)"," *     \\-> (node3)^"," *"," * Meaning that:"," * - \"node2\" and \"node3\" depend on \"node1\""," * - \"node4\" depend on node2"," * - \"node2\" depend on \"node3\""," *"," * @param {Graph}"," * @return Stack"," */","var topologicalSort = function (graph) {","  var stack = new Stack();","  var firstHit = {};","  var time = 0;","","  graph.vertices.forEach(function (node) {","    if (!firstHit[node]) {","      depthFirstSearch(graph, node, {","        allowTraversal: function (node, neighbor) {","          return !firstHit[neighbor];","        },","        enterVertex: function (node) {","          firstHit[node] = ++time;","        },","        leaveVertex: function (node) {","          stack.push(node);","        }","      });","    }","  });","","  return stack;","};","","module.exports = topologicalSort;",""],"l":{"3":1,"20":1,"21":0,"22":0,"23":0,"25":0,"26":0,"27":0,"29":0,"32":0,"35":0,"41":0,"44":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/depth_first_search.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/depth_first_search.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":25},"end":{"line":25,"column":60}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":58},"end":{"line":28,"column":70}}},"3":{"name":"(anonymous_3)","line":30,"loc":{"start":{"line":30,"column":25},"end":{"line":30,"column":43}}},"4":{"name":"(anonymous_4)","line":34,"loc":{"start":{"line":34,"column":11},"end":{"line":34,"column":39}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":13},"end":{"line":46,"column":25}}},"6":{"name":"(anonymous_6)","line":64,"loc":{"start":{"line":64,"column":23},"end":{"line":64,"column":64}}},"7":{"name":"dfsLoop","line":69,"loc":{"start":{"line":69,"column":14},"end":{"line":69,"column":57}}},"8":{"name":"(anonymous_8)","line":72,"loc":{"start":{"line":72,"column":34},"end":{"line":72,"column":54}}}},"statementMap":{"1":{"start":{"line":25,"column":0},"end":{"line":53,"column":2}},"2":{"start":{"line":26,"column":2},"end":{"line":26,"column":30}},"3":{"start":{"line":28,"column":2},"end":{"line":44,"column":7}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":18}},"5":{"start":{"line":30,"column":4},"end":{"line":32,"column":7}},"6":{"start":{"line":31,"column":6},"end":{"line":31,"column":26}},"7":{"start":{"line":34,"column":4},"end":{"line":43,"column":6}},"8":{"start":{"line":38,"column":6},"end":{"line":41,"column":7}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":30}},"10":{"start":{"line":40,"column":8},"end":{"line":40,"column":20}},"11":{"start":{"line":42,"column":6},"end":{"line":42,"column":19}},"12":{"start":{"line":46,"column":2},"end":{"line":46,"column":28}},"13":{"start":{"line":47,"column":2},"end":{"line":47,"column":64}},"14":{"start":{"line":48,"column":2},"end":{"line":48,"column":62}},"15":{"start":{"line":49,"column":2},"end":{"line":49,"column":56}},"16":{"start":{"line":50,"column":2},"end":{"line":50,"column":56}},"17":{"start":{"line":52,"column":2},"end":{"line":52,"column":19}},"18":{"start":{"line":64,"column":0},"end":{"line":66,"column":2}},"19":{"start":{"line":65,"column":2},"end":{"line":65,"column":76}},"20":{"start":{"line":69,"column":0},"end":{"line":81,"column":2}},"21":{"start":{"line":70,"column":2},"end":{"line":70,"column":32}},"22":{"start":{"line":72,"column":2},"end":{"line":78,"column":5}},"23":{"start":{"line":73,"column":4},"end":{"line":77,"column":5}},"24":{"start":{"line":74,"column":6},"end":{"line":74,"column":50}},"25":{"start":{"line":75,"column":6},"end":{"line":75,"column":42}},"26":{"start":{"line":76,"column":6},"end":{"line":76,"column":49}},"27":{"start":{"line":80,"column":2},"end":{"line":80,"column":32}},"28":{"start":{"line":84,"column":0},"end":{"line":84,"column":34}}},"branchMap":{"1":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":14},"end":{"line":26,"column":23}},{"start":{"line":26,"column":27},"end":{"line":26,"column":29}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":29},"end":{"line":28,"column":53}},{"start":{"line":28,"column":57},"end":{"line":44,"column":6}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"4":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":30},"end":{"line":47,"column":55}},{"start":{"line":47,"column":59},"end":{"line":47,"column":63}}]},"5":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":29},"end":{"line":48,"column":53}},{"start":{"line":48,"column":57},"end":{"line":48,"column":61}}]},"6":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":26},"end":{"line":49,"column":47}},{"start":{"line":49,"column":51},"end":{"line":49,"column":55}}]},"7":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":26},"end":{"line":50,"column":47}},{"start":{"line":50,"column":51},"end":{"line":50,"column":55}}]},"8":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]}},"code":["'use strict';","","","/**"," * @typedef {Object} Callbacks"," * @param {function(vertex: *, neighbor: *): boolean} allowTraversal -"," *   Determines whether DFS should traverse from the vertex to its neighbor"," *   (along the edge). By default prohibits visiting the same vertex again."," * @param {function(vertex: *, neighbor: *)} beforeTraversal - Called before"," *   recursive DFS call."," * @param {function(vertex: *, neighbor: *)} afterTraversal - Called after"," *   recursive DFS call."," * @param {function(vertex: *)} enterVertex - Called when DFS enters the vertex."," * @param {function(vertex: *)} leaveVertex - Called when DFS leaves the vertex."," */","","","/**"," * Fill in missing callbacks."," * @param {Callbacks} callbacks"," * @param {Array} seenVertices - Vertices already discovered,"," *   used by default allowTraversal implementation."," * @return {Callbacks} The same object or new one (if null passed)."," */","var normalizeCallbacks = function (callbacks, seenVertices) {","  callbacks = callbacks || {};","","  callbacks.allowTraversal = callbacks.allowTraversal || (function () {","    var seen = {};","    seenVertices.forEach(function (vertex) {","      seen[vertex] = true;","    });","","    return function (vertex, neighbor) {","      // It should still be possible to redefine other callbacks,","      // so we better do all at once here.","","      if (!seen[neighbor]) {","        seen[neighbor] = true;","        return true;","      }","      return false;","    };","  })();","","  var noop = function () {};","  callbacks.beforeTraversal = callbacks.beforeTraversal || noop;","  callbacks.afterTraversal = callbacks.afterTraversal || noop;","  callbacks.enterVertex = callbacks.enterVertex || noop;","  callbacks.leaveVertex = callbacks.leaveVertex || noop;","","  return callbacks;","};","","","/**"," * Run Depth-First Search from a start vertex."," * Complexity (default implementation): O(V + E)."," *"," * @param {Graph} graph"," * @param {*} startVertex"," * @param {Callbacks} [callbacks]"," */","var depthFirstSearch = function (graph, startVertex, callbacks) {","  dfsLoop(graph, startVertex, normalizeCallbacks(callbacks, [startVertex]));","};","","","var dfsLoop = function dfsLoop(graph, vertex, callbacks) {","  callbacks.enterVertex(vertex);","","  graph.neighbors(vertex).forEach(function (neighbor) {","    if (callbacks.allowTraversal(vertex, neighbor)) {","      callbacks.beforeTraversal(vertex, neighbor);","      dfsLoop(graph, neighbor, callbacks);","      callbacks.afterTraversal(vertex, neighbor);","    }","  });","","  callbacks.leaveVertex(vertex);","};","","","module.exports = depthFirstSearch;",""],"l":{"25":1,"26":0,"28":0,"29":0,"30":0,"31":0,"34":0,"38":0,"39":0,"40":0,"42":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"64":1,"65":0,"69":1,"70":0,"72":0,"73":0,"74":0,"75":0,"76":0,"80":0,"84":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/dijkstra.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/dijkstra.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"dijkstra","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":28}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":25},"end":{"line":19,"column":38}}},"3":{"name":"(anonymous_3)","line":27,"loc":{"start":{"line":27,"column":14},"end":{"line":27,"column":27}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":68}},"2":{"start":{"line":13,"column":0},"end":{"line":43,"column":1}},"3":{"start":{"line":14,"column":2},"end":{"line":14,"column":20}},"4":{"start":{"line":15,"column":2},"end":{"line":15,"column":20}},"5":{"start":{"line":16,"column":2},"end":{"line":16,"column":30}},"6":{"start":{"line":18,"column":2},"end":{"line":18,"column":18}},"7":{"start":{"line":19,"column":2},"end":{"line":24,"column":5}},"8":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"9":{"start":{"line":21,"column":6},"end":{"line":21,"column":29}},"10":{"start":{"line":23,"column":4},"end":{"line":23,"column":29}},"11":{"start":{"line":26,"column":2},"end":{"line":26,"column":15}},"12":{"start":{"line":27,"column":2},"end":{"line":34,"column":4}},"13":{"start":{"line":28,"column":4},"end":{"line":28,"column":67}},"14":{"start":{"line":29,"column":4},"end":{"line":33,"column":5}},"15":{"start":{"line":30,"column":6},"end":{"line":30,"column":32}},"16":{"start":{"line":31,"column":6},"end":{"line":31,"column":29}},"17":{"start":{"line":32,"column":6},"end":{"line":32,"column":39}},"18":{"start":{"line":35,"column":2},"end":{"line":38,"column":3}},"19":{"start":{"line":36,"column":4},"end":{"line":36,"column":27}},"20":{"start":{"line":37,"column":4},"end":{"line":37,"column":45}},"21":{"start":{"line":39,"column":2},"end":{"line":42,"column":4}},"22":{"start":{"line":45,"column":0},"end":{"line":45,"column":26}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["'use strict';","","var PriorityQueue = require('../../data_structures/priority_queue');","","/**"," * Calculates the shortest paths in a graph to every node from the node s"," * with Dijkstra's algorithm"," *"," * @param {Object} graph An adjacency list representing the graph"," * @param {string} start the starting node"," *"," */","function dijkstra(graph, s) {","  var distance = {};","  var previous = {};","  var q = new PriorityQueue();","  // Initialize","  distance[s] = 0;","  graph.vertices.forEach(function (v) {","    if (v !== s) {","      distance[v] = Infinity;","    }","    q.insert(v, distance[v]);","  });","","  var currNode;","  var relax = function (v) {","    var newDistance = distance[currNode] + graph.edge(currNode, v);","    if (newDistance < distance[v]) {","      distance[v] = newDistance;","      previous[v] = currNode;","      q.changePriority(v, distance[v]);","    }","  };","  while (!q.isEmpty()) {","    currNode = q.extract();","    graph.neighbors(currNode).forEach(relax);","  }","  return {","    distance: distance,","    previous: previous","  };","}","","module.exports = dijkstra;",""],"l":{"3":1,"13":1,"14":0,"15":0,"16":0,"18":0,"19":0,"20":0,"21":0,"23":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"35":0,"36":0,"37":0,"39":0,"45":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/SPFA.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/SPFA.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"spfa","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":24}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":25},"end":{"line":24,"column":38}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":62,"column":1}},"2":{"start":{"line":12,"column":2},"end":{"line":12,"column":20}},"3":{"start":{"line":13,"column":2},"end":{"line":13,"column":20}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":17}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":19}},"6":{"start":{"line":16,"column":2},"end":{"line":16,"column":15}},"7":{"start":{"line":17,"column":2},"end":{"line":17,"column":15}},"8":{"start":{"line":18,"column":2},"end":{"line":18,"column":15}},"9":{"start":{"line":20,"column":2},"end":{"line":20,"column":18}},"10":{"start":{"line":21,"column":2},"end":{"line":21,"column":15}},"11":{"start":{"line":22,"column":2},"end":{"line":22,"column":20}},"12":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"13":{"start":{"line":24,"column":2},"end":{"line":30,"column":5}},"14":{"start":{"line":25,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":26,"column":6},"end":{"line":26,"column":29}},"16":{"start":{"line":27,"column":6},"end":{"line":27,"column":25}},"17":{"start":{"line":28,"column":6},"end":{"line":28,"column":17}},"18":{"start":{"line":32,"column":2},"end":{"line":32,"column":15}},"19":{"start":{"line":33,"column":2},"end":{"line":56,"column":3}},"20":{"start":{"line":34,"column":4},"end":{"line":34,"column":29}},"21":{"start":{"line":35,"column":4},"end":{"line":35,"column":30}},"22":{"start":{"line":36,"column":4},"end":{"line":36,"column":46}},"23":{"start":{"line":37,"column":4},"end":{"line":55,"column":5}},"24":{"start":{"line":38,"column":6},"end":{"line":38,"column":27}},"25":{"start":{"line":40,"column":6},"end":{"line":40,"column":69}},"26":{"start":{"line":41,"column":6},"end":{"line":54,"column":7}},"27":{"start":{"line":42,"column":8},"end":{"line":42,"column":34}},"28":{"start":{"line":43,"column":8},"end":{"line":43,"column":31}},"29":{"start":{"line":44,"column":8},"end":{"line":53,"column":9}},"30":{"start":{"line":45,"column":10},"end":{"line":45,"column":28}},"31":{"start":{"line":46,"column":10},"end":{"line":46,"column":28}},"32":{"start":{"line":47,"column":10},"end":{"line":47,"column":19}},"33":{"start":{"line":48,"column":10},"end":{"line":52,"column":14}},"34":{"start":{"line":50,"column":12},"end":{"line":52,"column":14}},"35":{"start":{"line":58,"column":2},"end":{"line":61,"column":4}},"36":{"start":{"line":64,"column":0},"end":{"line":64,"column":22}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"3":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":8}},{"start":{"line":44,"column":8},"end":{"line":44,"column":8}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":10},"end":{"line":48,"column":10}},{"start":{"line":48,"column":10},"end":{"line":48,"column":10}}]}},"code":["'use strict';","","/**"," * Calculates the shortest paths in a graph to every node from the node s"," * with SPFA(Shortest Path Faster Algorithm) algorithm"," *"," * @param {Object} graph An adjacency list representing the graph"," * @param {string} start the starting node"," *"," */","function spfa(graph, s) {","  var distance = {};","  var previous = {};","  var queue = {};","  var isInQue = {};","  var cnt = {};","  var head = 0;","  var tail = 1;","  // initialize","  distance[s] = 0;","  queue[0] = s;","  isInQue[s] = true;","  cnt[s] = 1;","  graph.vertices.forEach(function (v) {","    if (v !== s) {","      distance[v] = Infinity;","      isInQue[v] = false;","      cnt[v] = 0;","    }","  });","","  var currNode;","  while (head !== tail) {","    currNode = queue[head++];","    isInQue[currNode] = false;","    var neighbors = graph.neighbors(currNode);","    for (var i = 0; i < neighbors.length; i++) {","      var v = neighbors[i];","      // relaxation","      var newDistance = distance[currNode] + graph.edge(currNode, v);","      if (newDistance < distance[v]) {","        distance[v] = newDistance;","        previous[v] = currNode;","        if (!isInQue[v]) {","          queue[tail++] = v;","          isInQue[v] = true;","          cnt[v]++;","          if (cnt[v] > graph.vertices.size)","            // indicates negative-weighted cycle","            return {","              distance: {}","            };","        }","      }","    }","  }","","  return {","    distance: distance,","    previous: previous","  };","}","","module.exports = spfa;",""],"l":{"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0,"58":0,"64":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/bellman_ford.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/bellman_ford.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":18},"end":{"line":16,"column":46}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":25},"end":{"line":23,"column":38}}},"3":{"name":"(anonymous_3)","line":24,"loc":{"start":{"line":24,"column":31},"end":{"line":24,"column":44}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":75,"column":2}},"2":{"start":{"line":17,"column":2},"end":{"line":17,"column":23}},"3":{"start":{"line":18,"column":2},"end":{"line":18,"column":26}},"4":{"start":{"line":19,"column":2},"end":{"line":19,"column":17}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":28}},"6":{"start":{"line":23,"column":2},"end":{"line":34,"column":5}},"7":{"start":{"line":24,"column":4},"end":{"line":30,"column":7}},"8":{"start":{"line":25,"column":6},"end":{"line":29,"column":9}},"9":{"start":{"line":32,"column":4},"end":{"line":32,"column":30}},"10":{"start":{"line":33,"column":4},"end":{"line":33,"column":24}},"11":{"start":{"line":36,"column":2},"end":{"line":36,"column":29}},"12":{"start":{"line":38,"column":2},"end":{"line":38,"column":31}},"13":{"start":{"line":39,"column":2},"end":{"line":39,"column":21}},"14":{"start":{"line":40,"column":2},"end":{"line":40,"column":21}},"15":{"start":{"line":42,"column":2},"end":{"line":42,"column":16}},"16":{"start":{"line":43,"column":2},"end":{"line":61,"column":3}},"17":{"start":{"line":44,"column":4},"end":{"line":44,"column":33}},"18":{"start":{"line":46,"column":4},"end":{"line":55,"column":5}},"19":{"start":{"line":47,"column":6},"end":{"line":47,"column":70}},"20":{"start":{"line":48,"column":6},"end":{"line":48,"column":52}},"21":{"start":{"line":50,"column":6},"end":{"line":54,"column":7}},"22":{"start":{"line":51,"column":8},"end":{"line":51,"column":32}},"23":{"start":{"line":52,"column":8},"end":{"line":52,"column":54}},"24":{"start":{"line":53,"column":8},"end":{"line":53,"column":58}},"25":{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},"26":{"start":{"line":59,"column":6},"end":{"line":59,"column":12}},"27":{"start":{"line":64,"column":2},"end":{"line":69,"column":3}},"28":{"start":{"line":66,"column":4},"end":{"line":68,"column":6}},"29":{"start":{"line":71,"column":2},"end":{"line":74,"column":4}},"30":{"start":{"line":77,"column":0},"end":{"line":77,"column":29}}},"branchMap":{"1":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"2":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":2},"end":{"line":64,"column":2}},{"start":{"line":64,"column":2},"end":{"line":64,"column":2}}]}},"code":["'use strict';","","/**"," * Calculates the shortest paths in a graph to every node"," * from the node 'startNode' with Bellman-Ford's algorithm"," *"," * Worst Case Complexity: O(|V| * |E|), where |V| is the number of"," * vertices and |E| is the number of edges in the graph"," *"," * @param Object 'graph' An adjacency list representing the graph"," * @param String 'startNode' The starting node"," * @return Object the minimum distance to reach every vertice of"," *    the graph starting in 'startNode', or an empty object if there"," *    exists a Negative-Weighted Cycle in the graph"," */","var bellmanFord = function (graph, startNode) {","  var minDistance = {};","  var previousVertex = {};","  var edges = [];","  var adjacencyListSize = 0;","","  // Add all the edges from the graph to the 'edges' array","  graph.vertices.forEach(function (s) {","    graph.neighbors(s).forEach(function (t) {","      edges.push({","        source: s,","        target: t,","        weight: graph.edge(s, t)","      });","    });","","    minDistance[s] = Infinity;","    ++adjacencyListSize;","  });","","  minDistance[startNode] = 0;","","  var edgesSize = edges.length;","  var sourceDistance;","  var targetDistance;","","  var iteration;","  for (iteration = 0; iteration < adjacencyListSize; ++iteration) {","    var somethingChanged = false;","","    for (var j = 0; j < edgesSize; j++) {","      sourceDistance = minDistance[edges[j].source] + edges[j].weight;","      targetDistance = minDistance[edges[j].target];","","      if (sourceDistance < targetDistance) {","        somethingChanged = true;","        minDistance[edges[j].target] = sourceDistance;","        previousVertex[edges[j].target] = edges[j].source;","      }","    }","","    if (!somethingChanged) {","      // Early stop.","      break;","    }","  }","","  // If the loop did not break early, then there is a negative-weighted cycle.","  if (iteration === adjacencyListSize) {","    // Empty 'distance' object indicates Negative-Weighted Cycle","    return {","      distance: {}","    };","  }","","  return {","    distance: minDistance,","    previous: previousVertex","  };","};","","module.exports = bellmanFord;",""],"l":{"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"32":0,"33":0,"36":0,"38":0,"39":0,"40":0,"42":0,"43":0,"44":0,"46":0,"47":0,"48":0,"50":0,"51":0,"52":0,"53":0,"57":0,"59":0,"64":0,"66":0,"71":0,"77":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/euler_path.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/euler_path.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":21},"end":{"line":15,"column":38}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":25},"end":{"line":22,"column":43}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":45}}},"4":{"name":"(anonymous_4)","line":29,"loc":{"start":{"line":29,"column":38},"end":{"line":29,"column":58}}},"5":{"name":"(anonymous_5)","line":37,"loc":{"start":{"line":37,"column":27},"end":{"line":37,"column":45}}},"6":{"name":"(anonymous_6)","line":50,"loc":{"start":{"line":50,"column":25},"end":{"line":50,"column":43}}},"7":{"name":"(anonymous_7)","line":87,"loc":{"start":{"line":87,"column":16},"end":{"line":87,"column":33}}},"8":{"name":"(anonymous_8)","line":99,"loc":{"start":{"line":99,"column":20},"end":{"line":99,"column":48}}},"9":{"name":"(anonymous_9)","line":102,"loc":{"start":{"line":102,"column":21},"end":{"line":102,"column":49}}},"10":{"name":"(anonymous_10)","line":105,"loc":{"start":{"line":105,"column":20},"end":{"line":105,"column":38}}},"11":{"name":"(anonymous_11)","line":110,"loc":{"start":{"line":110,"column":25},"end":{"line":110,"column":43}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":5,"column":76}},"2":{"start":{"line":15,"column":0},"end":{"line":74,"column":2}},"3":{"start":{"line":16,"column":2},"end":{"line":16,"column":16}},"4":{"start":{"line":22,"column":2},"end":{"line":24,"column":5}},"5":{"start":{"line":23,"column":4},"end":{"line":23,"column":50}},"6":{"start":{"line":26,"column":2},"end":{"line":46,"column":3}},"7":{"start":{"line":28,"column":4},"end":{"line":32,"column":7}},"8":{"start":{"line":29,"column":6},"end":{"line":31,"column":9}},"9":{"start":{"line":30,"column":8},"end":{"line":30,"column":28}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":28}},"11":{"start":{"line":37,"column":4},"end":{"line":45,"column":7}},"12":{"start":{"line":38,"column":6},"end":{"line":38,"column":24}},"13":{"start":{"line":39,"column":6},"end":{"line":44,"column":7}},"14":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"15":{"start":{"line":41,"column":10},"end":{"line":41,"column":28}},"16":{"start":{"line":43,"column":8},"end":{"line":43,"column":27}},"17":{"start":{"line":48,"column":2},"end":{"line":48,"column":23}},"18":{"start":{"line":50,"column":2},"end":{"line":66,"column":5}},"19":{"start":{"line":51,"column":4},"end":{"line":65,"column":5}},"20":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"21":{"start":{"line":53,"column":8},"end":{"line":53,"column":51}},"22":{"start":{"line":55,"column":6},"end":{"line":55,"column":21}},"23":{"start":{"line":56,"column":11},"end":{"line":65,"column":5}},"24":{"start":{"line":57,"column":6},"end":{"line":59,"column":7}},"25":{"start":{"line":58,"column":8},"end":{"line":58,"column":52}},"26":{"start":{"line":60,"column":6},"end":{"line":60,"column":22}},"27":{"start":{"line":61,"column":11},"end":{"line":65,"column":5}},"28":{"start":{"line":62,"column":6},"end":{"line":62,"column":64}},"29":{"start":{"line":63,"column":11},"end":{"line":65,"column":5}},"30":{"start":{"line":64,"column":6},"end":{"line":64,"column":17}},"31":{"start":{"line":68,"column":2},"end":{"line":70,"column":3}},"32":{"start":{"line":69,"column":4},"end":{"line":69,"column":23}},"33":{"start":{"line":72,"column":2},"end":{"line":73,"column":26}},"34":{"start":{"line":87,"column":0},"end":{"line":116,"column":2}},"35":{"start":{"line":88,"column":2},"end":{"line":90,"column":3}},"36":{"start":{"line":89,"column":4},"end":{"line":89,"column":14}},"37":{"start":{"line":92,"column":2},"end":{"line":92,"column":40}},"38":{"start":{"line":93,"column":2},"end":{"line":93,"column":33}},"39":{"start":{"line":95,"column":2},"end":{"line":95,"column":39}},"40":{"start":{"line":96,"column":2},"end":{"line":96,"column":52}},"41":{"start":{"line":98,"column":2},"end":{"line":108,"column":5}},"42":{"start":{"line":100,"column":6},"end":{"line":100,"column":42}},"43":{"start":{"line":103,"column":6},"end":{"line":103,"column":37}},"44":{"start":{"line":106,"column":6},"end":{"line":106,"column":25}},"45":{"start":{"line":110,"column":2},"end":{"line":114,"column":5}},"46":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"47":{"start":{"line":112,"column":6},"end":{"line":112,"column":74}},"48":{"start":{"line":115,"column":2},"end":{"line":115,"column":25}},"49":{"start":{"line":119,"column":0},"end":{"line":119,"column":27}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"4":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"5":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":11},"end":{"line":56,"column":11}},{"start":{"line":56,"column":11},"end":{"line":56,"column":11}}]},"7":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"8":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":11},"end":{"line":61,"column":11}},{"start":{"line":61,"column":11},"end":{"line":61,"column":11}}]},"9":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":11},"end":{"line":63,"column":11}},{"start":{"line":63,"column":11},"end":{"line":63,"column":11}}]},"10":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"11":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":12}},{"start":{"line":68,"column":16},"end":{"line":68,"column":23}}]},"12":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":2},"end":{"line":88,"column":2}},{"start":{"line":88,"column":2},"end":{"line":88,"column":2}}]},"13":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":111,"column":4}},{"start":{"line":111,"column":4},"end":{"line":111,"column":4}}]}},"code":["'use strict';","","","var Graph = require('../../data_structures/graph'),","    depthFirstSearch = require('../../algorithms/graph/depth_first_search');","","","/** Examine a graph and compute pair of end vertices of the existing Euler path."," * Return pair of undefined values if there is no specific choice of end points."," * Return value format: {start: START, finish: FINISH}."," *"," * @param {Graph} Graph, must be connected and contain at least one vertex."," * @return Object"," */","var eulerEndpoints = function (graph) {","  var rank = {};","  //     start     ->  rank = +1","  // middle points ->  rank =  0","  //    finish     ->  rank = -1","","  // Initialize ranks to be outdegrees of vertices.","  graph.vertices.forEach(function (vertex) {","    rank[vertex] = graph.neighbors(vertex).length;","  });","","  if (graph.directed) {","    // rank = outdegree - indegree","    graph.vertices.forEach(function (vertex) {","      graph.neighbors(vertex).forEach(function (neighbor) {","        rank[neighbor] -= 1;","      });","    });","  }","  else {","    // Compute ranks from vertex degree parity values.","    var startChosen = false;","    graph.vertices.forEach(function (vertex) {","      rank[vertex] %= 2;","      if (rank[vertex]) {","        if (startChosen) {","          rank[vertex] = -1;","        }","        startChosen = true;","      }","    });","  }","","  var start, finish, v;","","  graph.vertices.forEach(function (vertex) {","    if (rank[vertex] === 1) {","      if (start) {","        throw new Error('Duplicate start vertex.');","      }","      start = vertex;","    } else if (rank[vertex] === -1) {","      if (finish) {","        throw new Error('Duplicate finish vertex.');","      }","      finish = vertex;","    } else if (rank[vertex]) {","      throw new Error('Unexpected vertex degree for ' + vertex);","    } else if (!v) {","      v = vertex;","    }","  });","","  if (!start && !finish) {","    start = finish = v;","  }","","  return {start: start,","          finish: finish};","};","","","/**"," * Compute Euler path (either walk or tour, depending on the graph)."," * Euler path is a trail in a graph which visits every edge exactly once."," * The procedure works both for directed and undirected graphs,"," *   although the details differ a bit."," * The resulting array consists of exactly |E|+1 vertices."," *"," * @param {Graph}"," * @return Array"," */","var eulerPath = function (graph) {","  if (!graph.vertices.size) {","    return [];","  }","","  var endpoints = eulerEndpoints(graph);","  var route = [endpoints.finish];","","  var seen = new Graph(graph.directed);","  graph.vertices.forEach(seen.addVertex.bind(seen));","","  depthFirstSearch(graph, endpoints.start, {","    allowTraversal: function (vertex, neighbor) {","      return !seen.edge(vertex, neighbor);","    },","    beforeTraversal: function (vertex, neighbor) {","      seen.addEdge(vertex, neighbor);","    },","    afterTraversal: function (vertex) {","      route.push(vertex);","    }","  });","","  graph.vertices.forEach(function (vertex) {","    if (seen.neighbors(vertex).length < graph.neighbors(vertex).length) {","      throw new Error('There is no euler path for a disconnected graph.');","    }","  });","  return route.reverse();","};","","","module.exports = eulerPath;",""],"l":{"4":1,"15":1,"16":0,"22":0,"23":0,"26":0,"28":0,"29":0,"30":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"43":0,"48":0,"50":0,"51":0,"52":0,"53":0,"55":0,"56":0,"57":0,"58":0,"60":0,"61":0,"62":0,"63":0,"64":0,"68":0,"69":0,"72":0,"87":1,"88":0,"89":0,"92":0,"93":0,"95":0,"96":0,"98":0,"100":0,"103":0,"106":0,"110":0,"111":0,"112":0,"115":0,"119":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/kruskal.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/kruskal.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":14},"end":{"line":15,"column":31}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":25},"end":{"line":25,"column":43}}},"3":{"name":"(anonymous_3)","line":26,"loc":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"4":{"name":"(anonymous_4)","line":37,"loc":{"start":{"line":37,"column":13},"end":{"line":37,"column":29}}},"5":{"name":"(anonymous_5)","line":39,"loc":{"start":{"line":39,"column":13},"end":{"line":39,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":4,"column":51}},"2":{"start":{"line":15,"column":0},"end":{"line":47,"column":2}},"3":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":61}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":52}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":50}},"8":{"start":{"line":24,"column":2},"end":{"line":24,"column":17}},"9":{"start":{"line":25,"column":2},"end":{"line":35,"column":5}},"10":{"start":{"line":26,"column":4},"end":{"line":34,"column":7}},"11":{"start":{"line":28,"column":6},"end":{"line":33,"column":7}},"12":{"start":{"line":29,"column":8},"end":{"line":32,"column":11}},"13":{"start":{"line":37,"column":2},"end":{"line":44,"column":5}},"14":{"start":{"line":38,"column":4},"end":{"line":38,"column":31}},"15":{"start":{"line":40,"column":4},"end":{"line":43,"column":5}},"16":{"start":{"line":41,"column":6},"end":{"line":41,"column":59}},"17":{"start":{"line":42,"column":6},"end":{"line":42,"column":60}},"18":{"start":{"line":46,"column":2},"end":{"line":46,"column":13}},"19":{"start":{"line":50,"column":0},"end":{"line":50,"column":25}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]}},"code":["'use strict';","","var DisjointSetForest = require('../../data_structures/disjoint_set_forest'),","    Graph = require('../../data_structures/graph');","","","/**"," * Kruskal's minimum spanning tree (forest) algorithm."," * Complexity: O(E * log(V))."," *"," * @param {Graph} graph - Undirected graph."," * @return {Graph} Minimum spanning tree or forest"," *   (depending on whether input graph is connected itself)."," */","var kruskal = function (graph) {","  if (graph.directed) {","    throw new Error('Can\\'t build MST of a directed graph.');","  }","","  var connectedComponents = new DisjointSetForest();","  var mst = new Graph(false);","  graph.vertices.forEach(mst.addVertex.bind(mst));","","  var edges = [];","  graph.vertices.forEach(function (vertex) {","    graph.neighbors(vertex).forEach(function (neighbor) {","      // Compared as strings, loops intentionally omitted.","      if (vertex < neighbor) {","        edges.push({","          ends: [vertex, neighbor],","          weight: graph.edge(vertex, neighbor)","        });","      }","    });","  });","","  edges.sort(function (a, b) {","    return a.weight - b.weight;","  }).forEach(function (edge) {","    if (!connectedComponents.sameSubset(edge.ends[0], edge.ends[1])) {","      mst.addEdge(edge.ends[0], edge.ends[1], edge.weight);","      connectedComponents.merge(edge.ends[0], edge.ends[1]);","    }","  });","","  return mst;","};","","","module.exports = kruskal;",""],"l":{"3":1,"15":1,"16":0,"17":0,"20":0,"21":0,"22":0,"24":0,"25":0,"26":0,"28":0,"29":0,"37":0,"38":0,"40":0,"41":0,"42":0,"46":0,"50":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/breadth_first_search.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/breadth_first_search.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":25},"end":{"line":26,"column":60}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":58},"end":{"line":29,"column":70}}},"3":{"name":"(anonymous_3)","line":30,"loc":{"start":{"line":30,"column":35},"end":{"line":30,"column":59}}},"4":{"name":"(anonymous_4)","line":35,"loc":{"start":{"line":35,"column":11},"end":{"line":35,"column":39}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":13},"end":{"line":46,"column":25}}},"6":{"name":"(anonymous_6)","line":63,"loc":{"start":{"line":63,"column":25},"end":{"line":63,"column":66}}},"7":{"name":"(anonymous_7)","line":69,"loc":{"start":{"line":69,"column":16},"end":{"line":69,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"2":{"start":{"line":26,"column":0},"end":{"line":52,"column":2}},"3":{"start":{"line":27,"column":2},"end":{"line":27,"column":30}},"4":{"start":{"line":29,"column":2},"end":{"line":44,"column":7}},"5":{"start":{"line":30,"column":4},"end":{"line":33,"column":11}},"6":{"start":{"line":31,"column":6},"end":{"line":31,"column":26}},"7":{"start":{"line":32,"column":6},"end":{"line":32,"column":18}},"8":{"start":{"line":35,"column":4},"end":{"line":43,"column":6}},"9":{"start":{"line":36,"column":6},"end":{"line":42,"column":7}},"10":{"start":{"line":37,"column":8},"end":{"line":37,"column":30}},"11":{"start":{"line":38,"column":8},"end":{"line":38,"column":20}},"12":{"start":{"line":41,"column":8},"end":{"line":41,"column":21}},"13":{"start":{"line":46,"column":2},"end":{"line":46,"column":28}},"14":{"start":{"line":47,"column":2},"end":{"line":47,"column":56}},"15":{"start":{"line":48,"column":2},"end":{"line":48,"column":56}},"16":{"start":{"line":49,"column":2},"end":{"line":49,"column":56}},"17":{"start":{"line":51,"column":2},"end":{"line":51,"column":19}},"18":{"start":{"line":63,"column":0},"end":{"line":82,"column":2}},"19":{"start":{"line":64,"column":2},"end":{"line":64,"column":32}},"20":{"start":{"line":65,"column":2},"end":{"line":65,"column":32}},"21":{"start":{"line":66,"column":2},"end":{"line":66,"column":59}},"22":{"start":{"line":68,"column":2},"end":{"line":68,"column":13}},"23":{"start":{"line":69,"column":2},"end":{"line":74,"column":4}},"24":{"start":{"line":70,"column":4},"end":{"line":73,"column":5}},"25":{"start":{"line":71,"column":6},"end":{"line":71,"column":46}},"26":{"start":{"line":72,"column":6},"end":{"line":72,"column":33}},"27":{"start":{"line":76,"column":2},"end":{"line":81,"column":3}},"28":{"start":{"line":77,"column":4},"end":{"line":77,"column":31}},"29":{"start":{"line":78,"column":4},"end":{"line":78,"column":34}},"30":{"start":{"line":79,"column":4},"end":{"line":79,"column":45}},"31":{"start":{"line":80,"column":4},"end":{"line":80,"column":34}},"32":{"start":{"line":85,"column":0},"end":{"line":85,"column":36}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":14},"end":{"line":27,"column":23}},{"start":{"line":27,"column":27},"end":{"line":27,"column":29}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":29},"end":{"line":29,"column":53}},{"start":{"line":29,"column":57},"end":{"line":44,"column":6}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":6}},{"start":{"line":36,"column":6},"end":{"line":36,"column":6}}]},"4":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":26},"end":{"line":47,"column":47}},{"start":{"line":47,"column":51},"end":{"line":47,"column":55}}]},"5":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":26},"end":{"line":48,"column":47}},{"start":{"line":48,"column":51},"end":{"line":48,"column":55}}]},"6":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":26},"end":{"line":49,"column":47}},{"start":{"line":49,"column":51},"end":{"line":49,"column":55}}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]}},"code":["'use strict';","","var Queue = require('../../data_structures/queue');","","","/**"," * @typedef {Object} Callbacks"," * @param {function(vertex: *, neighbor: *): boolean} allowTraversal -"," *   Determines whether BFS should traverse from the vertex to its neighbor"," *   (along the edge). By default prohibits visiting the same vertex again."," * @param {function(vertex: *, neighbor: *)} onTraversal - Called when BFS"," *   follows the edge (and puts its head into the queue)."," * @param {function(vertex: *)} enterVertex - Called when BFS enters the vertex."," * @param {function(vertex: *)} leaveVertex - Called when BFS leaves the vertex."," */","","","/**"," * Fill in missing callbacks."," *"," * @param {Callbacks} callbacks"," * @param {Array} seenVertices - Vertices already discovered,"," *   used by default allowTraversal implementation."," * @return {Callbacks} The same object or new one (if null passed)."," */","var normalizeCallbacks = function (callbacks, seenVertices) {","  callbacks = callbacks || {};","","  callbacks.allowTraversal = callbacks.allowTraversal || (function () {","    var seen = seenVertices.reduce(function (seen, vertex) {","      seen[vertex] = true;","      return seen;","    }, {});","","    return function (vertex, neighbor) {","      if (!seen[neighbor]) {","        seen[neighbor] = true;","        return true;","      }","      else {","        return false;","      }","    };","  })();","","  var noop = function () {};","  callbacks.onTraversal = callbacks.onTraversal || noop;","  callbacks.enterVertex = callbacks.enterVertex || noop;","  callbacks.leaveVertex = callbacks.leaveVertex || noop;","","  return callbacks;","};","","","/**"," * Run Breadth-First Search from a start vertex."," * Complexity (default implementation): O(V + E)."," *"," * @param {Graph} graph"," * @param {*} startVertex"," * @param {Callbacks} [callbacks]"," */","var breadthFirstSearch = function (graph, startVertex, callbacks) {","  var vertexQueue = new Queue();","  vertexQueue.push(startVertex);","  callbacks = normalizeCallbacks(callbacks, [startVertex]);","","  var vertex;","  var enqueue = function (neighbor) {","    if (callbacks.allowTraversal(vertex, neighbor)) {","      callbacks.onTraversal(vertex, neighbor);","      vertexQueue.push(neighbor);","    }","  };","","  while (!vertexQueue.isEmpty()) {","    vertex = vertexQueue.pop();","    callbacks.enterVertex(vertex);","    graph.neighbors(vertex).forEach(enqueue);","    callbacks.leaveVertex(vertex);","  }","};","","","module.exports = breadthFirstSearch;",""],"l":{"3":1,"26":1,"27":0,"29":0,"30":0,"31":0,"32":0,"35":0,"36":0,"37":0,"38":0,"41":0,"46":0,"47":0,"48":0,"49":0,"51":0,"63":1,"64":0,"65":0,"66":0,"68":0,"69":0,"70":0,"71":0,"72":0,"76":0,"77":0,"78":0,"79":0,"80":0,"85":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/bfs_shortest_path.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":22},"end":{"line":16,"column":47}}},"2":{"name":"(anonymous_2)","line":21,"loc":{"start":{"line":21,"column":17},"end":{"line":21,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":16,"column":0},"end":{"line":31,"column":2}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":35}},"4":{"start":{"line":18,"column":2},"end":{"line":18,"column":23}},"5":{"start":{"line":20,"column":2},"end":{"line":25,"column":5}},"6":{"start":{"line":22,"column":6},"end":{"line":22,"column":48}},"7":{"start":{"line":23,"column":6},"end":{"line":23,"column":34}},"8":{"start":{"line":27,"column":2},"end":{"line":30,"column":4}},"9":{"start":{"line":34,"column":0},"end":{"line":34,"column":33}}},"branchMap":{},"code":["'use strict';","","var breadthFirstSearch = require('./breadth_first_search');","","","/**"," * Shortest-path algorithm based on Breadth-First Search."," * Works solely on graphs with equal edge weights (but works fast)."," * Complexity: O(V + E)."," *"," * @param {Graph} graph"," * @param {string} source"," * @return {{distance: Object.<string, number>,"," *           previous: Object.<string, string>}}"," */","var bfsShortestPath = function (graph, source) {","  var distance = {}, previous = {};","  distance[source] = 0;","","  breadthFirstSearch(graph, source, {","    onTraversal: function (vertex, neighbor) {","      distance[neighbor] = distance[vertex] + 1;","      previous[neighbor] = vertex;","    }","  });","","  return {","    distance: distance,","    previous: previous","  };","};","","","module.exports = bfsShortestPath;",""],"l":{"3":1,"16":1,"17":0,"18":0,"20":0,"22":0,"23":0,"27":0,"34":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/prim.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/prim.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":11},"end":{"line":15,"column":28}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":25},"end":{"line":24,"column":43}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":14},"end":{"line":28,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":4,"column":51}},"2":{"start":{"line":15,"column":0},"end":{"line":52,"column":2}},"3":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":61}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":35}},"7":{"start":{"line":23,"column":2},"end":{"line":23,"column":30}},"8":{"start":{"line":24,"column":2},"end":{"line":26,"column":5}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":31}},"10":{"start":{"line":28,"column":2},"end":{"line":34,"column":4}},"11":{"start":{"line":29,"column":4},"end":{"line":29,"column":46}},"12":{"start":{"line":30,"column":4},"end":{"line":33,"column":5}},"13":{"start":{"line":31,"column":6},"end":{"line":31,"column":41}},"14":{"start":{"line":32,"column":6},"end":{"line":32,"column":32}},"15":{"start":{"line":36,"column":2},"end":{"line":49,"column":3}},"16":{"start":{"line":37,"column":4},"end":{"line":37,"column":30}},"17":{"start":{"line":38,"column":4},"end":{"line":39,"column":30}},"18":{"start":{"line":41,"column":4},"end":{"line":46,"column":5}},"19":{"start":{"line":42,"column":6},"end":{"line":42,"column":50}},"20":{"start":{"line":45,"column":6},"end":{"line":45,"column":28}},"21":{"start":{"line":48,"column":4},"end":{"line":48,"column":62}},"22":{"start":{"line":51,"column":2},"end":{"line":51,"column":13}},"23":{"start":{"line":55,"column":0},"end":{"line":55,"column":22}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]}},"code":["'use strict';","","var PriorityQueue = require('../../data_structures/priority_queue'),","    Graph = require('../../data_structures/graph');","","","/**"," * Prim's minimum spanning tree (forest) algorithm."," * Complexity: O(E * log(V))."," *"," * @param {Graph} graph - Undirected graph."," * @return {Graph} Minimum spanning tree or forest"," *   (depending on whether input graph is connected itself)."," */","var prim = function (graph) {","  if (graph.directed) {","    throw new Error('Can\\'t build MST of a directed graph.');","  }","","  var mst = new Graph(false);","  var parent = Object.create(null);","","  var q = new PriorityQueue();","  graph.vertices.forEach(function (vertex) {","    q.insert(vertex, Infinity);","  });","","  var relax = function (vertex, neighbor) {","    var weight = graph.edge(vertex, neighbor);","    if (weight < q.priority(neighbor)) {","      q.changePriority(neighbor, weight);","      parent[neighbor] = vertex;","    }","  };","","  while (!q.isEmpty()) {","    var top = q.extract(true);","    var vertex = top.item,","        weight = top.priority;","","    if (parent[vertex]) {","      mst.addEdge(parent[vertex], vertex, weight);","    }","    else {","      mst.addVertex(vertex);","    }","","    graph.neighbors(vertex).forEach(relax.bind(null, vertex));","  }","","  return mst;","};","","","module.exports = prim;",""],"l":{"3":1,"15":1,"16":0,"17":0,"20":0,"21":0,"23":0,"24":0,"25":0,"28":0,"29":0,"30":0,"31":0,"32":0,"36":0,"37":0,"38":0,"41":0,"42":0,"45":0,"48":0,"51":0,"55":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/floyd_warshall.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/graph/floyd_warshall.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":20},"end":{"line":12,"column":37}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":25},"end":{"line":19,"column":40}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":27},"end":{"line":21,"column":43}}},"4":{"name":"(anonymous_4)","line":35,"loc":{"start":{"line":35,"column":25},"end":{"line":35,"column":43}}},"5":{"name":"(anonymous_5)","line":39,"loc":{"start":{"line":39,"column":25},"end":{"line":39,"column":43}}},"6":{"name":"(anonymous_6)","line":40,"loc":{"start":{"line":40,"column":27},"end":{"line":40,"column":42}}},"7":{"name":"(anonymous_7)","line":41,"loc":{"start":{"line":41,"column":29},"end":{"line":41,"column":45}}},"8":{"name":"(anonymous_8)","line":52,"loc":{"start":{"line":52,"column":25},"end":{"line":52,"column":43}}},"9":{"name":"(anonymous_9)","line":67,"loc":{"start":{"line":67,"column":13},"end":{"line":67,"column":34}}},"10":{"name":"pushInOrder","line":76,"loc":{"start":{"line":76,"column":7},"end":{"line":76,"column":39}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":94,"column":2}},"2":{"start":{"line":18,"column":2},"end":{"line":18,"column":37}},"3":{"start":{"line":19,"column":2},"end":{"line":30,"column":5}},"4":{"start":{"line":20,"column":4},"end":{"line":20,"column":40}},"5":{"start":{"line":21,"column":4},"end":{"line":29,"column":7}},"6":{"start":{"line":22,"column":6},"end":{"line":28,"column":7}},"7":{"start":{"line":23,"column":8},"end":{"line":23,"column":32}},"8":{"start":{"line":24,"column":13},"end":{"line":28,"column":7}},"9":{"start":{"line":25,"column":8},"end":{"line":25,"column":52}},"10":{"start":{"line":27,"column":8},"end":{"line":27,"column":39}},"11":{"start":{"line":34,"column":2},"end":{"line":34,"column":41}},"12":{"start":{"line":35,"column":2},"end":{"line":37,"column":5}},"13":{"start":{"line":36,"column":4},"end":{"line":36,"column":47}},"14":{"start":{"line":39,"column":2},"end":{"line":49,"column":5}},"15":{"start":{"line":40,"column":4},"end":{"line":48,"column":7}},"16":{"start":{"line":41,"column":6},"end":{"line":47,"column":9}},"17":{"start":{"line":42,"column":8},"end":{"line":42,"column":66}},"18":{"start":{"line":43,"column":8},"end":{"line":46,"column":9}},"19":{"start":{"line":44,"column":10},"end":{"line":44,"column":37}},"20":{"start":{"line":45,"column":10},"end":{"line":45,"column":43}},"21":{"start":{"line":52,"column":2},"end":{"line":57,"column":5}},"22":{"start":{"line":53,"column":4},"end":{"line":56,"column":5}},"23":{"start":{"line":55,"column":6},"end":{"line":55,"column":71}},"24":{"start":{"line":67,"column":2},"end":{"line":88,"column":4}},"25":{"start":{"line":68,"column":4},"end":{"line":71,"column":5}},"26":{"start":{"line":70,"column":6},"end":{"line":70,"column":18}},"27":{"start":{"line":73,"column":4},"end":{"line":73,"column":21}},"28":{"start":{"line":75,"column":4},"end":{"line":85,"column":5}},"29":{"start":{"line":76,"column":6},"end":{"line":84,"column":20}},"30":{"start":{"line":77,"column":8},"end":{"line":83,"column":9}},"31":{"start":{"line":78,"column":10},"end":{"line":78,"column":26}},"32":{"start":{"line":80,"column":10},"end":{"line":80,"column":47}},"33":{"start":{"line":81,"column":10},"end":{"line":81,"column":35}},"34":{"start":{"line":82,"column":10},"end":{"line":82,"column":36}},"35":{"start":{"line":87,"column":4},"end":{"line":87,"column":16}},"36":{"start":{"line":90,"column":2},"end":{"line":93,"column":4}},"37":{"start":{"line":97,"column":0},"end":{"line":97,"column":31}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":6}},{"start":{"line":22,"column":6},"end":{"line":22,"column":6}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":13},"end":{"line":24,"column":13}},{"start":{"line":24,"column":13},"end":{"line":24,"column":13}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"6":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"7":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":77,"column":8}},{"start":{"line":77,"column":8},"end":{"line":77,"column":8}}]}},"code":["'use strict';","","","/**"," * Floyd-Warshall algorithm."," * Compute all-pairs shortest paths (a path for each pair of vertices)."," * Complexity: O(V^3)."," *"," * @param {Graph} graph"," * @return {{distance, path}}"," */","var floydWarshall = function (graph) {","","  // Fill in the distances with initial values:","  //   - 0 if source == destination;","  //   - edge(source, destination) if there is a direct edge;","  //   - +inf otherwise.","  var distance = Object.create(null);","  graph.vertices.forEach(function (src) {","    distance[src] = Object.create(null);","    graph.vertices.forEach(function (dest) {","      if (src === dest) {","        distance[src][dest] = 0;","      } else if (graph.edge(src, dest) !== undefined) {","        distance[src][dest] = graph.edge(src, dest);","      } else {","        distance[src][dest] = Infinity;","      }","    });","  });","","  // Internal vertex with the largest index along the shortest path.","  // Needed for path reconstruction.","  var middleVertex = Object.create(null);","  graph.vertices.forEach(function (vertex) {","    middleVertex[vertex] = Object.create(null);","  });","","  graph.vertices.forEach(function (middle) {","    graph.vertices.forEach(function (src) {","      graph.vertices.forEach(function (dest) {","        var dist = distance[src][middle] + distance[middle][dest];","        if (dist < distance[src][dest]) {","          distance[src][dest] = dist;","          middleVertex[src][dest] = middle;","        }","      });","    });","  });","","  // Check for a negative-weighted cycle.","  graph.vertices.forEach(function (vertex) {","    if (distance[vertex][vertex] < 0) {","      // Negative-weighted cycle found.","      throw new Error('The graph contains a negative-weighted cycle!');","    }","  });","","  /**","   * Reconstruct the shortest path for a given pair of end vertices.","   * Complexity: O(L), L - length of the path (number of edges).","   *","   * @param {string} srce","   * @param {string} dest","   * @return {?string[]} Null if destination is unreachable.","   */","  var path = function (src, dest) {","    if (!Number.isFinite(distance[src][dest])) {","      // dest unreachable.","      return null;","    }","","    var path = [src];","","    if (src !== dest) {","      (function pushInOrder(src, dest) {","        if (middleVertex[src][dest] === undefined) {","          path.push(dest);","        } else {","          var middle = middleVertex[src][dest];","          pushInOrder(src, middle);","          pushInOrder(middle, dest);","        }","      })(src, dest);","    }","","    return path;","  };","","  return {","    distance: distance,","    path: path","  };","};","","","module.exports = floydWarshall;",""],"l":{"12":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"27":0,"34":0,"35":0,"36":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"52":0,"53":0,"55":0,"67":0,"68":0,"70":0,"73":0,"75":0,"76":0,"77":0,"78":0,"80":0,"81":0,"82":0,"87":0,"90":0,"97":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/geometry.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/geometry.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":6,"column":2}}},"branchMap":{},"code":["'use strict';","","// Geometry algorithms","module.exports = {","  BezierCurve: require('./algorithms/geometry/bezier_curve')","};",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/geometry/bezier_curve.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/geometry/bezier_curve.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":18},"end":{"line":14,"column":36}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":28},"end":{"line":37,"column":41}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":32,"column":2}},"2":{"start":{"line":15,"column":2},"end":{"line":15,"column":25}},"3":{"start":{"line":16,"column":2},"end":{"line":16,"column":14}},"4":{"start":{"line":19,"column":2},"end":{"line":19,"column":14}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":11}},"6":{"start":{"line":21,"column":2},"end":{"line":26,"column":3}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":14}},"8":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"9":{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},"10":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"11":{"start":{"line":30,"column":4},"end":{"line":30,"column":64}},"12":{"start":{"line":37,"column":0},"end":{"line":55,"column":2}},"13":{"start":{"line":38,"column":2},"end":{"line":38,"column":25}},"14":{"start":{"line":39,"column":2},"end":{"line":39,"column":8}},"15":{"start":{"line":40,"column":2},"end":{"line":40,"column":19}},"16":{"start":{"line":43,"column":2},"end":{"line":43,"column":13}},"17":{"start":{"line":44,"column":2},"end":{"line":47,"column":3}},"18":{"start":{"line":45,"column":4},"end":{"line":45,"column":14}},"19":{"start":{"line":46,"column":4},"end":{"line":46,"column":11}},"20":{"start":{"line":49,"column":2},"end":{"line":53,"column":3}},"21":{"start":{"line":50,"column":4},"end":{"line":50,"column":36}},"22":{"start":{"line":51,"column":4},"end":{"line":51,"column":36}},"23":{"start":{"line":52,"column":4},"end":{"line":52,"column":15}},"24":{"start":{"line":54,"column":2},"end":{"line":54,"column":13}},"25":{"start":{"line":57,"column":0},"end":{"line":57,"column":29}}},"branchMap":{},"code":["'use strict';","","/**"," * 2D bezier-curve, https://en.wikipedia.org/wiki/B%C3%A9zier_curve"," * Usage:"," *   var b = new BezierCurve([{x: 0, y: 0}, {x: 10, y: 3}]);"," *   b.get(0.5); // {x: 5, y: 1.5}"," */","","/**"," * Generates a bezier-curve from a series of points"," * @param Array array of control points ([{x: x0, y: y0}, {x: x1, y: y1}])"," */","var BezierCurve = function (points) {","  this.n = points.length;","  this.p = [];","","  // The binomial coefficient","  var c = [1];","  var i, j;","  for (i = 1; i < this.n; ++i) {","    c.push(0);","    for (j = i; j >= 1; --j) {","        c[j] += c[j - 1];","    }","  }","","  // the i-th control point times the coefficient","  for (i = 0; i < this.n; ++i) {","    this.p.push({x: c[i] * points[i].x, y: c[i] * points[i].y});","  }","};","","/**"," * @param Number float variable from 0 to 1"," */","BezierCurve.prototype.get = function (t) {","  var res = {x: 0, y: 0};","  var i;","  var a = 1, b = 1;","","  // The coefficient","  var c = [];","  for (i = 0; i < this.n; ++i) {","    c.push(a);","    a *= t;","  }","","  for (i = this.n - 1; i >= 0; --i) {","    res.x += this.p[i].x * c[i] * b;","    res.y += this.p[i].y * c[i] * b;","    b *= 1 - t;","  }","  return res;","};","","module.exports = BezierCurve;",""],"l":{"14":1,"15":0,"16":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"29":0,"30":0,"37":1,"38":0,"39":0,"40":0,"43":0,"44":0,"45":0,"46":0,"49":0,"50":0,"51":0,"52":0,"54":0,"57":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/math.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/math.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":19,"column":2}}},"branchMap":{},"code":["'use strict';","","// Math algorithms","module.exports = {","  fibonacci: require('./algorithms/math/fibonacci'),","  fisherYates: require('./algorithms/math/fisher_yates'),","  gcd: require('./algorithms/math/gcd'),","  extendedEuclidean: require('./algorithms/math/extended_euclidean'),","  lcm: require('./algorithms/math/lcm'),","  newtonSqrt: require('./algorithms/math/newton_sqrt'),","  primalityTests: require('./algorithms/math/primality_tests'),","  reservoirSampling: require('./algorithms/math/reservoir_sampling'),","  fastPower: require('./algorithms/math/fast_power'),","  nextPermutation: require('./algorithms/math/next_permutation'),","  powerSet: require('./algorithms/math/power_set'),","  shannonEntropy: require('./algorithms/math/shannon_entropy'),","  collatzConjecture: require('./algorithms/math/collatz_conjecture'),","  greatestDifference: require('./algorithms/math/greatest_difference')","};",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/fibonacci.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/fibonacci.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":1,"18":1,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1,"30":1,"31":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":21},"end":{"line":18,"column":34}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":16},"end":{"line":28,"column":29}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":26},"end":{"line":46,"column":38}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":12},"end":{"line":49,"column":25}}},"5":{"name":"(anonymous_5)","line":66,"loc":{"start":{"line":66,"column":16},"end":{"line":66,"column":34}}},"6":{"name":"(anonymous_6)","line":78,"loc":{"start":{"line":78,"column":21},"end":{"line":78,"column":39}}},"7":{"name":"(anonymous_7)","line":82,"loc":{"start":{"line":82,"column":23},"end":{"line":82,"column":39}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":67}},"4":{"start":{"line":28,"column":0},"end":{"line":38,"column":2}},"5":{"start":{"line":29,"column":2},"end":{"line":31,"column":14}},"6":{"start":{"line":32,"column":2},"end":{"line":36,"column":3}},"7":{"start":{"line":33,"column":4},"end":{"line":33,"column":34}},"8":{"start":{"line":34,"column":4},"end":{"line":34,"column":28}},"9":{"start":{"line":35,"column":4},"end":{"line":35,"column":21}},"10":{"start":{"line":37,"column":2},"end":{"line":37,"column":13}},"11":{"start":{"line":46,"column":0},"end":{"line":57,"column":5}},"12":{"start":{"line":47,"column":2},"end":{"line":47,"column":21}},"13":{"start":{"line":49,"column":2},"end":{"line":54,"column":4}},"14":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"15":{"start":{"line":51,"column":6},"end":{"line":51,"column":41}},"16":{"start":{"line":53,"column":4},"end":{"line":53,"column":20}},"17":{"start":{"line":56,"column":2},"end":{"line":56,"column":13}},"18":{"start":{"line":66,"column":0},"end":{"line":69,"column":2}},"19":{"start":{"line":67,"column":2},"end":{"line":67,"column":35}},"20":{"start":{"line":68,"column":2},"end":{"line":68,"column":64}},"21":{"start":{"line":78,"column":0},"end":{"line":95,"column":2}},"22":{"start":{"line":80,"column":2},"end":{"line":80,"column":33}},"23":{"start":{"line":82,"column":2},"end":{"line":87,"column":4}},"24":{"start":{"line":83,"column":4},"end":{"line":86,"column":53}},"25":{"start":{"line":89,"column":2},"end":{"line":89,"column":75}},"26":{"start":{"line":94,"column":2},"end":{"line":94,"column":25}},"27":{"start":{"line":98,"column":0},"end":{"line":98,"column":39}},"28":{"start":{"line":99,"column":0},"end":{"line":99,"column":47}},"29":{"start":{"line":100,"column":0},"end":{"line":100,"column":29}},"30":{"start":{"line":101,"column":0},"end":{"line":101,"column":39}},"31":{"start":{"line":102,"column":0},"end":{"line":102,"column":27}}},"branchMap":{"1":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":17},"end":{"line":19,"column":18}},{"start":{"line":19,"column":21},"end":{"line":19,"column":66}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]}},"code":["'use strict';","","/**"," * Different implementations of the Fibonacci sequence"," */","","var power = require('./fast_power');","","/**","  * Regular fibonacci implementation following the definition:","  * Fib(0) = 0","  * Fib(1) = 1","  * Fib(n) = Fib(n-1) + Fib(n-2)","  *","  * @param Number","  * @return Number","  */","var fibExponential = function (n) {","  return n < 2 ? n : fibExponential(n - 1) + fibExponential(n - 2);","};","","/**","  * O(n) in time, O(1) in space and doesn't use recursion","  *","  * @param Number","  * @return Number","  */","var fibLinear = function (n) {","  var fibNMinus2 = 0,","      fibNMinus1 = 1,","      fib = n;","  for (var i = 1; i < n; i++) {","    fib = fibNMinus1 + fibNMinus2;","    fibNMinus2 = fibNMinus1;","    fibNMinus1 = fib;","  }","  return fib;","};","","/**","  * Implementation with memoization, O(n) in time, O(n) in space","  *","  * @param Number","  * @return Number","  */","var fibWithMemoization = (function () {","  var cache = [0, 1];","","  var fib = function (n) {","    if (cache[n] === undefined) {","      cache[n] = fib(n - 1) + fib(n - 2);","    }","    return cache[n];","  };","","  return fib;","})();","","/**","  * Implementation using Binet's formula with the rounding trick.","  * O(1) in time, O(1) in space","  *","  * @param Number","  * @return Number","  */","var fibDirect = function (number) {","  var phi = (1 + Math.sqrt(5)) / 2;","  return Math.floor(Math.pow(phi, number) / Math.sqrt(5) + 0.5);","};","","/**","  * Implementation based on matrix exponentiation.","  * O(log(n)) in time, O(1) in space","  *","  * @param Number","  * @return Number","  */","var fibLogarithmic = function (number) {","  // Transforms [f_1, f_0] to [f_2, f_1] and so on.","  var nextFib = [[1, 1], [1, 0]];","","  var matrixMultiply = function (a, b) {","    return [[a[0][0] * b[0][0] + a[0][1] * b[1][0],","             a[0][0] * b[0][1] + a[0][1] * b[1][1]],","            [a[1][0] * b[0][0] + a[1][1] * b[1][0],","             a[1][0] * b[0][1] + a[1][1] * b[1][1]]];","  };","","  var transform = power(nextFib, number, matrixMultiply, [[1, 0], [0, 1]]);","","  // [f_n, f_{n-1}] = Transform * [f_0, f_{-1}] = Transform * [0, 1]","  // Hence the result is the first row of Transform multiplied by [0, 1],","  // which is the same as transform[0][1].","  return transform[0][1];","};","","// Use fibLinear as the default implementation","fibLinear.exponential = fibExponential;","fibLinear.withMemoization = fibWithMemoization;","fibLinear.direct = fibDirect;","fibLinear.logarithmic = fibLogarithmic;","module.exports = fibLinear;",""],"l":{"7":1,"18":1,"19":0,"28":1,"29":0,"32":0,"33":0,"34":0,"35":0,"37":0,"46":1,"47":1,"49":1,"50":0,"51":0,"53":0,"56":1,"66":1,"67":0,"68":0,"78":1,"80":0,"82":0,"83":0,"89":0,"94":0,"98":1,"99":1,"100":1,"101":1,"102":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/fast_power.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/fast_power.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":4,"loc":{"start":{"line":4,"column":29},"end":{"line":4,"column":45}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":16},"end":{"line":20,"column":54}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":19},"end":{"line":41,"column":36}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":6,"column":2}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":15}},"3":{"start":{"line":20,"column":0},"end":{"line":50,"column":2}},"4":{"start":{"line":21,"column":2},"end":{"line":24,"column":3}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":33}},"6":{"start":{"line":23,"column":4},"end":{"line":23,"column":17}},"7":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"8":{"start":{"line":26,"column":4},"end":{"line":26,"column":65}},"9":{"start":{"line":30,"column":2},"end":{"line":37,"column":3}},"10":{"start":{"line":31,"column":4},"end":{"line":36,"column":5}},"11":{"start":{"line":32,"column":6},"end":{"line":32,"column":72}},"12":{"start":{"line":35,"column":6},"end":{"line":35,"column":22}},"13":{"start":{"line":40,"column":2},"end":{"line":40,"column":13}},"14":{"start":{"line":41,"column":2},"end":{"line":43,"column":4}},"15":{"start":{"line":42,"column":4},"end":{"line":42,"column":65}},"16":{"start":{"line":44,"column":2},"end":{"line":48,"column":3}},"17":{"start":{"line":45,"column":4},"end":{"line":47,"column":5}},"18":{"start":{"line":46,"column":6},"end":{"line":46,"column":25}},"19":{"start":{"line":49,"column":2},"end":{"line":49,"column":16}},"20":{"start":{"line":53,"column":0},"end":{"line":53,"column":27}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"3":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":6},"end":{"line":25,"column":15}},{"start":{"line":25,"column":19},"end":{"line":25,"column":46}}]},"4":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"5":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"6":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":38},"end":{"line":42,"column":43}},{"start":{"line":42,"column":46},"end":{"line":42,"column":64}}]},"7":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]}},"code":["'use strict';","","","var multiplicationOperator = function (a, b) {","  return a * b;","};","","","/**"," * Raise value to a positive integer power by repeated squaring."," *"," * @param {*} base"," * @param {number} power"," * @param {function} [mul] - Multiplication function,"," *   standard multiplication operator by default."," * @param {*} identity - Identity value, used when power == 0."," *   If mul is not set, defaults to 1."," * @return {*}"," */","var fastPower = function (base, power, mul, identity) {","  if (mul === undefined) {","    mul = multiplicationOperator;","    identity = 1;","  }","  if (power < 0 || Math.floor(power) !== power) {","    throw new Error('Power must be a positive integer or zero.');","  }","","  // If the power is zero, identity value must be given (or set by default).","  if (!power) {","    if (identity === undefined) {","      throw new Error('The power is zero, but identity value not set.');","    }","    else {","      return identity;","    }","  }","","  // Iterative form of the algorithm avoids checking the same thing twice.","  var result;","  var multiplyBy = function (value) {","    result = (result === undefined) ? value : mul(result, value);","  };","  for (var factor = base; power; power >>>= 1, factor = mul(factor, factor)) {","    if (power & 1) {","      multiplyBy(factor);","    }","  }","  return result;","};","","","module.exports = fastPower;",""],"l":{"4":1,"5":0,"20":1,"21":0,"22":0,"23":0,"25":0,"26":0,"30":0,"31":0,"32":0,"35":0,"40":0,"41":0,"42":0,"44":0,"45":0,"46":0,"49":0,"53":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/fisher_yates.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/fisher_yates.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":18},"end":{"line":7,"column":31}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":14,"column":2}},"2":{"start":{"line":8,"column":2},"end":{"line":13,"column":3}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":48}},"4":{"start":{"line":10,"column":4},"end":{"line":10,"column":19}},"5":{"start":{"line":11,"column":4},"end":{"line":11,"column":16}},"6":{"start":{"line":12,"column":4},"end":{"line":12,"column":15}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":29}}},"branchMap":{},"code":["'use strict';","","/**"," * Fisher-Yates shuffles the elements in an array"," * in O(n)"," */","var fisherYates = function (a) {","  for (var i = a.length - 1; i > 0; i--) {","    var j = Math.floor(Math.random() * (i + 1));","    var tmp = a[i];","    a[i] = a[j];","    a[j] = tmp;","  }","};","","module.exports = fisherYates;",""],"l":{"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"16":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/gcd.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/gcd.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":23},"end":{"line":11,"column":39}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":25},"end":{"line":35,"column":41}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":22,"column":2}},"2":{"start":{"line":12,"column":2},"end":{"line":12,"column":14}},"3":{"start":{"line":13,"column":2},"end":{"line":13,"column":21}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":23}},"5":{"start":{"line":15,"column":2},"end":{"line":19,"column":3}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":12}},"7":{"start":{"line":17,"column":4},"end":{"line":17,"column":14}},"8":{"start":{"line":18,"column":4},"end":{"line":18,"column":12}},"9":{"start":{"line":21,"column":2},"end":{"line":21,"column":11}},"10":{"start":{"line":35,"column":0},"end":{"line":83,"column":2}},"11":{"start":{"line":38,"column":2},"end":{"line":40,"column":3}},"12":{"start":{"line":39,"column":4},"end":{"line":39,"column":13}},"13":{"start":{"line":42,"column":2},"end":{"line":44,"column":3}},"14":{"start":{"line":43,"column":4},"end":{"line":43,"column":13}},"15":{"start":{"line":46,"column":2},"end":{"line":46,"column":12}},"16":{"start":{"line":49,"column":2},"end":{"line":52,"column":3}},"17":{"start":{"line":50,"column":4},"end":{"line":50,"column":12}},"18":{"start":{"line":51,"column":4},"end":{"line":51,"column":12}},"19":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"20":{"start":{"line":57,"column":4},"end":{"line":57,"column":12}},"21":{"start":{"line":60,"column":2},"end":{"line":60,"column":10}},"22":{"start":{"line":63,"column":2},"end":{"line":79,"column":20}},"23":{"start":{"line":66,"column":4},"end":{"line":68,"column":5}},"24":{"start":{"line":67,"column":6},"end":{"line":67,"column":14}},"25":{"start":{"line":72,"column":4},"end":{"line":76,"column":5}},"26":{"start":{"line":73,"column":6},"end":{"line":73,"column":14}},"27":{"start":{"line":74,"column":6},"end":{"line":74,"column":12}},"28":{"start":{"line":75,"column":6},"end":{"line":75,"column":14}},"29":{"start":{"line":78,"column":4},"end":{"line":78,"column":11}},"30":{"start":{"line":82,"column":2},"end":{"line":82,"column":20}},"31":{"start":{"line":85,"column":0},"end":{"line":85,"column":45}},"32":{"start":{"line":86,"column":0},"end":{"line":86,"column":34}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":72,"column":4}},{"start":{"line":72,"column":4},"end":{"line":72,"column":4}}]}},"code":["'use strict';","","/**"," * Euclidean algorithm to calculate the Greatest Common Divisor (GCD)"," *"," * @param Number"," * @param Number"," *"," * @return Number"," */","var gcdDivisionBased = function (a, b) {","  var tmp = a;","  a = Math.max(a, b);","  b = Math.min(tmp, b);","  while (b !== 0) {","    tmp = b;","    b = a % b;","    a = tmp;","  }","","  return a;","};","","/**"," * Binary GCD algorithm (Stein's Algorithm)"," *"," * @link https://en.wikipedia.org/wiki/Binary_GCD_algorithm"," * This is basically a js version of the c implementation on Wikipedia"," *"," * @param Number"," * @param Number"," *"," * @return Number"," */","var gcdBinaryIterative = function (a, b) {","","  // GCD(0,b) == b; GCD(a,0) == a, GCD(0,0) == 0","  if (a === 0) {","    return b;","  }","","  if (b === 0) {","    return a;","  }","","  var shift;","  // Let shift = log(K), where K is the greatest power of 2","  // dividing both a and b","  for (shift = 0; ((a | b) & 1) === 0; ++shift) {","    a >>= 1;","    b >>= 1;","  }","","  // Remove all factors of 2 in a -- they are not common","  // Note: a is not zero, so while will terminate","  while ((a & 1) === 0) {","    a >>= 1;","  }","","  var tmp;","","  // From here on, a is always odd","  do {","    // Remove all factors of 2 in b -- they are not common","    // Note: b is not zero, so while will terminate","    while ((b & 1) === 0) {","      b >>= 1;","    }","","    // Now a and b are both odd. Swap if necessary so a <= b,","    // then set b = b - a (which is even).","    if (a > b) {","      tmp = b;","      b = a;","      a = tmp;","    }","","    b -= a;  // Here b >= a","  } while (b !== 0);","","  // restore common factors of 2","  return a << shift;","};","","gcdDivisionBased.binary = gcdBinaryIterative;","module.exports = gcdDivisionBased;",""],"l":{"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"21":0,"35":1,"38":0,"39":0,"42":0,"43":0,"46":0,"49":0,"50":0,"51":0,"56":0,"57":0,"60":0,"63":0,"66":0,"67":0,"72":0,"73":0,"74":0,"75":0,"78":0,"82":0,"85":1,"86":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/extended_euclidean.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/extended_euclidean.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":16},"end":{"line":13,"column":32}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":38,"column":2}},"2":{"start":{"line":14,"column":2},"end":{"line":14,"column":22}},"3":{"start":{"line":15,"column":2},"end":{"line":15,"column":22}},"4":{"start":{"line":16,"column":2},"end":{"line":16,"column":22}},"5":{"start":{"line":17,"column":2},"end":{"line":17,"column":21}},"6":{"start":{"line":18,"column":2},"end":{"line":32,"column":3}},"7":{"start":{"line":19,"column":4},"end":{"line":19,"column":36}},"8":{"start":{"line":21,"column":4},"end":{"line":21,"column":13}},"9":{"start":{"line":22,"column":4},"end":{"line":22,"column":28}},"10":{"start":{"line":23,"column":4},"end":{"line":23,"column":16}},"11":{"start":{"line":25,"column":4},"end":{"line":25,"column":13}},"12":{"start":{"line":26,"column":4},"end":{"line":26,"column":28}},"13":{"start":{"line":27,"column":4},"end":{"line":27,"column":16}},"14":{"start":{"line":29,"column":4},"end":{"line":29,"column":13}},"15":{"start":{"line":30,"column":4},"end":{"line":30,"column":28}},"16":{"start":{"line":31,"column":4},"end":{"line":31,"column":16}},"17":{"start":{"line":34,"column":2},"end":{"line":37,"column":4}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":27}}},"branchMap":{},"code":["'use strict';","","/**"," * Extended Euclidean algorithm to calculate the solve of"," *   ax + by = gcd(a, b)"," * gcd(a, b) is the greatest common divisor of integers a and b."," *"," * @param Number"," * @param Number"," *"," * @return {Number, Number}"," */","var extEuclid = function (a, b) {","  var s = 0, oldS = 1;","  var t = 1, oldT = 0;","  var r = b, oldR = a;","  var quotient, temp;","  while (r !== 0) {","    quotient = Math.floor(oldR / r);","","    temp = r;","    r = oldR - quotient * r;","    oldR = temp;","","    temp = s;","    s = oldS - quotient * s;","    oldS = temp;","","    temp = t;","    t = oldT - quotient * t;","    oldT = temp;","  }","","  return {","    x: oldS,","    y: oldT","  };","};","","module.exports = extEuclid;",""],"l":{"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"21":0,"22":0,"23":0,"25":0,"26":0,"27":0,"29":0,"30":0,"31":0,"34":0,"40":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/lcm.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/lcm.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":15,"column":0},"end":{"line":22,"column":2}},"3":{"start":{"line":16,"column":3},"end":{"line":18,"column":3}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":13}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":18}},"6":{"start":{"line":20,"column":2},"end":{"line":20,"column":18}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":35}},"8":{"start":{"line":33,"column":0},"end":{"line":33,"column":50}},"9":{"start":{"line":44,"column":0},"end":{"line":44,"column":59}},"10":{"start":{"line":46,"column":0},"end":{"line":46,"column":27}},"11":{"start":{"line":47,"column":0},"end":{"line":47,"column":32}},"12":{"start":{"line":48,"column":0},"end":{"line":48,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":3},"end":{"line":16,"column":3}},{"start":{"line":16,"column":3},"end":{"line":16,"column":3}}]},"2":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":7},"end":{"line":16,"column":14}},{"start":{"line":16,"column":18},"end":{"line":16,"column":25}}]}},"code":["'use strict';","","var gcd = require('./gcd.js');","","/**"," * Calcule the Least Common Multiple with a given Greatest Common Denominator"," * function"," *"," * @param Number"," * @param Number"," * @param Function"," *"," * @return Number"," */","var genericLCM = function (gcdFunction, a, b) {","   if (a === 0 || b === 0) {","    return 0;","  }","  a = Math.abs(a);","  b = Math.abs(b);","  return a / gcdFunction(a, b) * b;","};","","/**"," * Algorithm to calculate Least Common Multiple based on Euclidean algorithm"," * calls the generic LCM function passing the division based GCD calculator"," *"," * @param Number"," * @param Number"," *"," * @return Number"," */","var lcmDivisionBased = genericLCM.bind(null, gcd);","","/**"," * Algorithm to calculate Least Common Multiple based on Stein's Algorithm"," * calls the generic LCM function passing the binary interative GCD calculator"," *"," * @param Number"," * @param Number"," *"," * @return Number"," */","var lcmBinaryIterative = genericLCM.bind(null, gcd.binary);","","var lcm = lcmDivisionBased;","lcm.binary = lcmBinaryIterative;","module.exports = lcm;",""],"l":{"3":1,"15":1,"16":0,"17":0,"19":0,"20":0,"21":0,"33":1,"44":1,"46":1,"47":1,"48":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/newton_sqrt.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/newton_sqrt.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":11},"end":{"line":10,"column":50}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":32,"column":2}},"2":{"start":{"line":11,"column":2},"end":{"line":11,"column":32}},"3":{"start":{"line":12,"column":2},"end":{"line":12,"column":39}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":21}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":21}},"6":{"start":{"line":17,"column":2},"end":{"line":17,"column":12}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":16}},"8":{"start":{"line":19,"column":2},"end":{"line":25,"column":66}},"9":{"start":{"line":20,"column":4},"end":{"line":20,"column":8}},"10":{"start":{"line":21,"column":4},"end":{"line":21,"column":51}},"11":{"start":{"line":22,"column":4},"end":{"line":22,"column":19}},"12":{"start":{"line":23,"column":4},"end":{"line":24,"column":24}},"13":{"start":{"line":23,"column":20},"end":{"line":23,"column":35}},"14":{"start":{"line":24,"column":9},"end":{"line":24,"column":24}},"15":{"start":{"line":28,"column":2},"end":{"line":28,"column":29}},"16":{"start":{"line":29,"column":2},"end":{"line":29,"column":40}},"17":{"start":{"line":29,"column":29},"end":{"line":29,"column":40}},"18":{"start":{"line":31,"column":2},"end":{"line":31,"column":11}},"19":{"start":{"line":34,"column":0},"end":{"line":34,"column":22}}},"branchMap":{"1":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":14},"end":{"line":11,"column":23}},{"start":{"line":11,"column":27},"end":{"line":11,"column":31}}]},"2":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":18},"end":{"line":12,"column":31}},{"start":{"line":12,"column":35},"end":{"line":12,"column":38}}]},"3":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"4":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":11},"end":{"line":25,"column":43}},{"start":{"line":25,"column":47},"end":{"line":25,"column":64}}]},"5":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]}},"code":["'use strict';","","/**"," * Newton's method to calculate square root"," *"," * @param Number n - the number which the square root should be calculated"," * @param Number tolerance - The error margin accepted (Default 1e-7)"," * @param Number maxIterations - The max number of iterations (Default 1e7)"," */","var sqrt = function (n, tolerance, maxIterations) {","  tolerance = tolerance || 1e-7;","  maxIterations = maxIterations || 1e7;","","  var upperBound = n;","  var lowerBound = 0;","","  var i = 0;","  var square, x;","  do {","    i++;","    x = (upperBound - lowerBound) / 2 + lowerBound;","    square = x * x;","    if (square < n) lowerBound = x;","    else upperBound = x;","  } while (Math.abs(square - n) > tolerance && i < maxIterations);","","  // Checks if the number is a perfect square to return the exact root","  var roundX = Math.round(x);","  if (roundX * roundX === n) x = roundX;","","  return x;","};","","module.exports = sqrt;",""],"l":{"10":1,"11":0,"12":0,"14":0,"15":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"28":0,"29":0,"31":0,"34":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/primality_tests.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/primality_tests.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":27},"end":{"line":11,"column":55}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":16},"end":{"line":25,"column":29}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":24},"end":{"line":41,"column":37}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":16,"column":2}},"2":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":17}},"4":{"start":{"line":15,"column":2},"end":{"line":15,"column":26}},"5":{"start":{"line":25,"column":0},"end":{"line":32,"column":2}},"6":{"start":{"line":26,"column":2},"end":{"line":30,"column":3}},"7":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"8":{"start":{"line":28,"column":6},"end":{"line":28,"column":19}},"9":{"start":{"line":31,"column":2},"end":{"line":31,"column":14}},"10":{"start":{"line":41,"column":0},"end":{"line":49,"column":2}},"11":{"start":{"line":42,"column":2},"end":{"line":42,"column":26}},"12":{"start":{"line":43,"column":2},"end":{"line":47,"column":3}},"13":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"14":{"start":{"line":45,"column":6},"end":{"line":45,"column":19}},"15":{"start":{"line":48,"column":2},"end":{"line":48,"column":14}},"16":{"start":{"line":51,"column":0},"end":{"line":54,"column":2}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"3":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]}},"code":["'use strict';","","/**","* Checks whether a number is prime using a given primality test","*","* @param Function","* @param Number","*","* @return Boolean","*/","var genericPrimalityTest = function (primalityTest, n) {","  if (n <= 1) {","    return false;","  }","  return primalityTest(n);","};","","/**","* Checks whether a number is prime using the naive algorithm O(n)","*","* @param Number","*","* @return Boolean","*/","var naiveTest = function (n) {","  for (var i = 2; i < n; ++i) {","    if (n % i === 0) {","      return false;","    }","  }","  return true;","};","","/**","* Checks whether a number is prime using the trial divison algorithm O(sqrt(n))","*","* @param Number","*","* @return Boolean","*/","var trialDivisionTest = function (n) {","  var sqrt = Math.sqrt(n);","  for (var i = 2; i <= sqrt; ++i) {","    if (n % i === 0) {","      return false;","    }","  }","  return true;","};","","module.exports = {","  naiveTest: genericPrimalityTest.bind(null, naiveTest),","  trialDivisionTest: genericPrimalityTest.bind(null, trialDivisionTest)","};",""],"l":{"11":1,"12":0,"13":0,"15":0,"25":1,"26":0,"27":0,"28":0,"31":0,"41":1,"42":0,"43":0,"44":0,"45":0,"48":0,"51":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/reservoir_sampling.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/reservoir_sampling.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":24},"end":{"line":11,"column":53}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":23,"column":2}},"2":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":73}},"4":{"start":{"line":15,"column":2},"end":{"line":15,"column":45}},"5":{"start":{"line":16,"column":2},"end":{"line":21,"column":3}},"6":{"start":{"line":17,"column":4},"end":{"line":17,"column":48}},"7":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"8":{"start":{"line":19,"column":6},"end":{"line":19,"column":30}},"9":{"start":{"line":22,"column":2},"end":{"line":22,"column":19}},"10":{"start":{"line":26,"column":0},"end":{"line":26,"column":35}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]}},"code":["'use strict';","","","/**"," * Sample random elements from the array using reservoir algorithm."," *"," * @param {Array} array"," * @param {number} sampleSize"," * @return {Array}"," */","var reservoirSampling = function (array, sampleSize) {","  if (sampleSize > array.length) {","    throw new Error('Sample size exceeds the total number of elements.');","  }","  var reservoir = array.slice(0, sampleSize);","  for (var i = sampleSize; i < array.length; ++i) {","    var j = Math.floor(Math.random() * (i + 1));","    if (j < sampleSize) {","      reservoir[j] = array[i];","    }","  }","  return reservoir;","};","","","module.exports = reservoirSampling;",""],"l":{"11":1,"12":0,"13":0,"15":0,"16":0,"17":0,"18":0,"19":0,"22":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/next_permutation.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/next_permutation.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":22},"end":{"line":16,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":16,"column":0},"end":{"line":48,"column":2}},"3":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"4":{"start":{"line":18,"column":4},"end":{"line":18,"column":17}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":38}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":31}},"7":{"start":{"line":24,"column":2},"end":{"line":26,"column":3}},"8":{"start":{"line":25,"column":4},"end":{"line":25,"column":15}},"9":{"start":{"line":27,"column":2},"end":{"line":30,"column":3}},"10":{"start":{"line":29,"column":4},"end":{"line":29,"column":17}},"11":{"start":{"line":31,"column":2},"end":{"line":31,"column":34}},"12":{"start":{"line":32,"column":2},"end":{"line":32,"column":35}},"13":{"start":{"line":33,"column":2},"end":{"line":35,"column":3}},"14":{"start":{"line":34,"column":4},"end":{"line":34,"column":19}},"15":{"start":{"line":38,"column":2},"end":{"line":38,"column":34}},"16":{"start":{"line":39,"column":2},"end":{"line":39,"column":32}},"17":{"start":{"line":42,"column":2},"end":{"line":46,"column":3}},"18":{"start":{"line":43,"column":4},"end":{"line":43,"column":27}},"19":{"start":{"line":44,"column":4},"end":{"line":44,"column":31}},"20":{"start":{"line":45,"column":4},"end":{"line":45,"column":24}},"21":{"start":{"line":47,"column":2},"end":{"line":47,"column":14}},"22":{"start":{"line":51,"column":0},"end":{"line":51,"column":33}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":9},"end":{"line":24,"column":14}},{"start":{"line":24,"column":18},"end":{"line":24,"column":72}}]},"3":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]}},"code":["'use strict';","","var Comparator = require('../../util/comparator');","","","/**"," * Narayana's algorithm computes the subsequent permutation"," *   in lexicographical order."," * Complexity: O(n)."," *"," * @param {Array} array"," * @param {function} [compareFn] - Custom compare function."," * @return {boolean} Boolean flag indicating whether the algorithm succeeded,"," *   true unless the input permutation is lexicographically the last one."," */","var nextPermutation = function (array, compareFn) {","  if (!array.length) {","    return false;","  }","  var cmp = new Comparator(compareFn);","","  // Find pivot and successor indices.","  var pivot = array.length - 1;","  while (pivot && cmp.greaterThanOrEqual(array[pivot - 1], array[pivot])) {","    pivot -= 1;","  }","  if (!pivot) {","    // Permutation is sorted in descending order.","    return false;","  }","  var pivotValue = array[--pivot];","  var successor = array.length - 1;","  while (cmp.lessThanOrEqual(array[successor], pivotValue)) {","    successor -= 1;","  }","","  // Swap values.","  array[pivot] = array[successor];","  array[successor] = pivotValue;","","  // Reverse the descending part.","  for (var left = pivot, right = array.length; ++left < --right;) {","    var temp = array[left];","    array[left] = array[right];","    array[right] = temp;","  }","  return true;","};","","","module.exports = nextPermutation;",""],"l":{"3":1,"16":1,"17":0,"18":0,"20":0,"23":0,"24":0,"25":0,"27":0,"29":0,"31":0,"32":0,"33":0,"34":0,"38":0,"39":0,"42":0,"43":0,"44":0,"45":0,"47":0,"51":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/power_set.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/power_set.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":24},"end":{"line":10,"column":41}}},"2":{"name":"(anonymous_2)","line":47,"loc":{"start":{"line":47,"column":24},"end":{"line":47,"column":41}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":37},"end":{"line":58,"column":53}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":42,"column":2}},"2":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":14}},"4":{"start":{"line":16,"column":2},"end":{"line":16,"column":20}},"5":{"start":{"line":17,"column":2},"end":{"line":17,"column":17}},"6":{"start":{"line":18,"column":2},"end":{"line":18,"column":8}},"7":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"8":{"start":{"line":21,"column":4},"end":{"line":21,"column":20}},"9":{"start":{"line":24,"column":2},"end":{"line":39,"column":3}},"10":{"start":{"line":26,"column":4},"end":{"line":26,"column":22}},"11":{"start":{"line":28,"column":4},"end":{"line":38,"column":5}},"12":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"13":{"start":{"line":31,"column":8},"end":{"line":31,"column":29}},"14":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"15":{"start":{"line":35,"column":8},"end":{"line":35,"column":35}},"16":{"start":{"line":41,"column":2},"end":{"line":41,"column":18}},"17":{"start":{"line":47,"column":0},"end":{"line":67,"column":2}},"18":{"start":{"line":48,"column":2},"end":{"line":66,"column":3}},"19":{"start":{"line":49,"column":4},"end":{"line":49,"column":14}},"20":{"start":{"line":50,"column":9},"end":{"line":66,"column":3}},"21":{"start":{"line":51,"column":4},"end":{"line":51,"column":32}},"22":{"start":{"line":53,"column":4},"end":{"line":53,"column":22}},"23":{"start":{"line":54,"column":4},"end":{"line":54,"column":29}},"24":{"start":{"line":56,"column":4},"end":{"line":56,"column":23}},"25":{"start":{"line":58,"column":4},"end":{"line":63,"column":7}},"26":{"start":{"line":59,"column":6},"end":{"line":59,"column":26}},"27":{"start":{"line":60,"column":6},"end":{"line":60,"column":40}},"28":{"start":{"line":61,"column":6},"end":{"line":61,"column":52}},"29":{"start":{"line":62,"column":6},"end":{"line":62,"column":35}},"30":{"start":{"line":65,"column":4},"end":{"line":65,"column":20}},"31":{"start":{"line":70,"column":0},"end":{"line":70,"column":33}},"32":{"start":{"line":71,"column":0},"end":{"line":71,"column":39}},"33":{"start":{"line":72,"column":0},"end":{"line":72,"column":26}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":9},"end":{"line":50,"column":9}},{"start":{"line":50,"column":9},"end":{"line":50,"column":9}}]}},"code":["/**"," * Iterative and recursive implementations of power set"," */","","'use strict';","","/**"," * Iterative power set calculation"," */","var powerSetIterative = function (array) {","","  if (array.length === 0) {","    return [];","  }","","  var powerSet = [];","  var cache = [];","  var i;","","  for (i = 0; i < array.length; i++) {","    cache[i] = true;","  }","","  for (i = 0; i < Math.pow(2, array.length); i++) {","","    powerSet.push([]);","","    for (var j = 0; j < array.length; j++) {","","      if (i % Math.pow(2, j) === 0) {","        cache[j] = !cache[j];","      }","","      if (cache[j]) {","        powerSet[i].push(array[j]);","      }","","    }","  }","","  return powerSet;","};","","/**"," * Recursive power set calculation"," */","var powerSetRecursive = function (array) {","  if (array.length === 0) {","    return [];","  } else if (array.length === 1) {","    return [ [], [ array[0] ] ];","  } else {","    var powerSet = [];","    var firstElem = array[0];","","    array.splice(0, 1);","","    powerSetRecursive(array).forEach(function (elem) {","      powerSet.push(elem);","      var withFirstElem = [ firstElem ];","      withFirstElem.push.apply(withFirstElem, elem);","      powerSet.push(withFirstElem);","    });","","    return powerSet;","  }","};","","// Use powerSetIterative as the default implementation","var powerSet = powerSetIterative;","powerSet.recursive = powerSetRecursive;","module.exports = powerSet;",""],"l":{"10":1,"12":0,"13":0,"16":0,"17":0,"18":0,"20":0,"21":0,"24":0,"26":0,"28":0,"30":0,"31":0,"34":0,"35":0,"41":0,"47":1,"48":0,"49":0,"50":0,"51":0,"53":0,"54":0,"56":0,"58":0,"59":0,"60":0,"61":0,"62":0,"65":0,"70":1,"71":1,"72":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/shannon_entropy.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/shannon_entropy.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":21},"end":{"line":9,"column":36}}},"2":{"name":"(anonymous_2)","line":11,"loc":{"start":{"line":11,"column":25},"end":{"line":11,"column":46}}},"3":{"name":"(anonymous_3)","line":17,"loc":{"start":{"line":17,"column":37},"end":{"line":17,"column":52}}},"4":{"name":"(anonymous_4)","line":22,"loc":{"start":{"line":22,"column":22},"end":{"line":22,"column":38}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":25,"column":2}},"2":{"start":{"line":11,"column":2},"end":{"line":14,"column":9}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":35}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":15}},"5":{"start":{"line":17,"column":2},"end":{"line":19,"column":5}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":35}},"7":{"start":{"line":22,"column":2},"end":{"line":24,"column":21}},"8":{"start":{"line":23,"column":4},"end":{"line":23,"column":31}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":32}}},"branchMap":{"1":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":16},"end":{"line":12,"column":29}},{"start":{"line":12,"column":33},"end":{"line":12,"column":34}}]}},"code":["'use strict';","","/**"," * Calculate Shannon Entropy of an array"," *"," * @param {Array} arr - An array of values."," * @return Number"," */","var shannonEntropy = function (arr) {","  // find the frequency of each value","  var freqs = arr.reduce(function (acc, item) {","    acc[item] = acc[item] + 1 || 1;","    return acc;","  }, {});","","  // find the probability of each value","  var probs = Object.keys(freqs).map(function (key) {","    return freqs[key] / arr.length;","  });","","  // calulate the shannon entropy of the array","  return probs.reduce(function (e, p) {","    return e - p * Math.log(p);","  }, 0) * Math.LOG2E;","};","","module.exports = shannonEntropy;",""],"l":{"9":1,"11":0,"12":0,"13":0,"17":0,"18":0,"22":0,"23":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/collatz_conjecture.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/collatz_conjecture.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"calculateCollatzConjecture","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":44}}},"2":{"name":"generateCollatzConjecture","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":43}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":19}},"2":{"start":{"line":13,"column":0},"end":{"line":18,"column":1}},"3":{"start":{"line":14,"column":2},"end":{"line":14,"column":44}},"4":{"start":{"line":14,"column":23},"end":{"line":14,"column":44}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":59}},"6":{"start":{"line":15,"column":24},"end":{"line":15,"column":59}},"7":{"start":{"line":17,"column":2},"end":{"line":17,"column":40}},"8":{"start":{"line":27,"column":0},"end":{"line":36,"column":1}},"9":{"start":{"line":28,"column":2},"end":{"line":28,"column":29}},"10":{"start":{"line":30,"column":2},"end":{"line":33,"column":25}},"11":{"start":{"line":31,"column":4},"end":{"line":31,"column":48}},"12":{"start":{"line":32,"column":4},"end":{"line":32,"column":35}},"13":{"start":{"line":35,"column":2},"end":{"line":35,"column":27}},"14":{"start":{"line":39,"column":0},"end":{"line":42,"column":2}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]}},"code":["'use strict';","","// cache algorithm results","var cache = {1: 1};","","/**"," * Collatz Conjecture algorithm"," *"," * @param Number"," * @return Number"," */","","function calculateCollatzConjecture(number) {","  if (number in cache) return cache[number];","  if (number % 2 === 0) return cache[number] = number >> 1;","","  return cache[number] = number * 3 + 1;","}","","/**"," * Generate Collatz Conjecture"," *"," * @param Number"," * @return Array"," */","","function generateCollatzConjecture(number) {","  var collatzConjecture = [];","","  do {","    number = calculateCollatzConjecture(number);","    collatzConjecture.push(number);","  } while (number !== 1);","","  return collatzConjecture;","}","","// export Collatz Conjecture methods","module.exports = {","  generate: generateCollatzConjecture,","  calculate: calculateCollatzConjecture,","};",""],"l":{"4":1,"13":1,"14":0,"15":0,"17":0,"27":1,"28":0,"30":0,"31":0,"32":0,"35":0,"39":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/greatest_difference.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/math/greatest_difference.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":25},"end":{"line":11,"column":44}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":26,"column":2}},"2":{"start":{"line":12,"column":2},"end":{"line":12,"column":16}},"3":{"start":{"line":13,"column":2},"end":{"line":13,"column":27}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":30}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":13}},"6":{"start":{"line":16,"column":2},"end":{"line":16,"column":28}},"7":{"start":{"line":18,"column":2},"end":{"line":23,"column":3}},"8":{"start":{"line":19,"column":4},"end":{"line":19,"column":28}},"9":{"start":{"line":21,"column":4},"end":{"line":21,"column":43}},"10":{"start":{"line":21,"column":26},"end":{"line":21,"column":43}},"11":{"start":{"line":22,"column":4},"end":{"line":22,"column":45}},"12":{"start":{"line":22,"column":27},"end":{"line":22,"column":45}},"13":{"start":{"line":25,"column":2},"end":{"line":25,"column":28}},"14":{"start":{"line":28,"column":0},"end":{"line":28,"column":36}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]}},"code":["'use strict';","","/**"," * Find the greatest difference between two numbers in a set"," * This solution has a cost of O(n)"," *"," * @param {number[]} numbers"," * @returns {number}"," */","","var greatestDifference = function (numbers) {","  var index = 0;","  var largest = numbers[0];","  var length = numbers.length;","  var number;","  var smallest = numbers[0];","","  for (index; index < length; index++) {","    number = numbers[index];","","    if (number > largest) largest = number;","    if (number < smallest) smallest = number;","  }","","  return largest - smallest;","};","","module.exports = greatestDifference;",""],"l":{"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"18":0,"19":0,"21":0,"22":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/search.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/search.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":9,"column":2}}},"branchMap":{},"code":["'use strict';","","// Search algorithms","module.exports = {","  bfs: require('./algorithms/search/bfs'),","  binarySearch: require('./algorithms/search/binarysearch'),","  ternarySearch: require('./algorithms/search/ternary_search'),","  dfs: require('./algorithms/search/dfs')","};",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/search/bfs.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/search/bfs.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":10},"end":{"line":7,"column":36}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":54}},"2":{"start":{"line":7,"column":0},"end":{"line":17,"column":2}},"3":{"start":{"line":8,"column":2},"end":{"line":8,"column":22}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":15}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":11}},"6":{"start":{"line":11,"column":2},"end":{"line":16,"column":3}},"7":{"start":{"line":12,"column":4},"end":{"line":12,"column":19}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":25}},"9":{"start":{"line":14,"column":4},"end":{"line":14,"column":37}},"10":{"start":{"line":14,"column":19},"end":{"line":14,"column":37}},"11":{"start":{"line":15,"column":4},"end":{"line":15,"column":39}},"12":{"start":{"line":15,"column":20},"end":{"line":15,"column":39}},"13":{"start":{"line":19,"column":0},"end":{"line":19,"column":21}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":14,"column":4}},{"start":{"line":14,"column":4},"end":{"line":14,"column":4}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":4}},{"start":{"line":15,"column":4},"end":{"line":15,"column":4}}]}},"code":["'use strict';","var Queue = require('../../data_structures/queue.js');","","/**"," * Breadth-first search for binary trees"," */","var bfs = function (root, callback) {","  var q = new Queue();","  q.push(root);","  var node;","  while (!q.isEmpty()) {","    node = q.pop();","    callback(node.value);","    if (node.left) q.push(node.left);","    if (node.right) q.push(node.right);","  }","};","","module.exports = bfs;",""],"l":{"2":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"19":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/search/binarysearch.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/search/binarysearch.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":19},"end":{"line":12,"column":51}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":25,"column":2}},"2":{"start":{"line":13,"column":2},"end":{"line":14,"column":35}},"3":{"start":{"line":16,"column":2},"end":{"line":22,"column":3}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":39}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":45}},"6":{"start":{"line":18,"column":36},"end":{"line":18,"column":45}},"7":{"start":{"line":20,"column":4},"end":{"line":21,"column":21}},"8":{"start":{"line":20,"column":34},"end":{"line":20,"column":47}},"9":{"start":{"line":21,"column":9},"end":{"line":21,"column":21}},"10":{"start":{"line":24,"column":2},"end":{"line":24,"column":12}},"11":{"start":{"line":27,"column":0},"end":{"line":27,"column":30}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]}},"code":["'use strict';","","/**","  * Binary Search finds elements in sorted arrays in logarithmic","  * time (O(lg n))","  *","  * @param Array","  * @param Number|String","  *","  * @return Boolean","  */","var binarySearch = function (sortedArray, element) {","  var init = 0,","      end = sortedArray.length - 1;","","  while (end >= init) {","    var m = ((end - init) >> 1) + init;","    if (sortedArray[m] === element) return m;","","    if (sortedArray[m] < element) init = m + 1;","    else end = m - 1;","  }","","  return -1;","};","","module.exports = binarySearch;",""],"l":{"12":1,"13":0,"16":0,"17":0,"18":0,"20":0,"21":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/search/ternary_search.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/search/ternary_search.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":20},"end":{"line":9,"column":58}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":19,"column":2}},"2":{"start":{"line":10,"column":2},"end":{"line":17,"column":3}},"3":{"start":{"line":11,"column":4},"end":{"line":12,"column":48}},"4":{"start":{"line":14,"column":4},"end":{"line":16,"column":25}},"5":{"start":{"line":15,"column":6},"end":{"line":15,"column":23}},"6":{"start":{"line":16,"column":6},"end":{"line":16,"column":25}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":28}},"8":{"start":{"line":21,"column":0},"end":{"line":21,"column":31}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":14,"column":4}},{"start":{"line":14,"column":4},"end":{"line":14,"column":4}}]}},"code":["'use strict';","","/**","  *  Finds the maximum of unimodal function fn() within [left, right]","  *  To find the minimum, revert the if/else statement or revert the comparison.","  *  Time complexity: O(log(n))","  */","","var ternarySearch = function (fn, left, right, precision) {","  while (Math.abs(right - left) > precision) {","    var leftThird = left + (right - left) / 3,","        rightThird = right - (right - left) / 3;","","    if (fn(leftThird) < fn(rightThird))","      left = leftThird; else","      right = rightThird;","  }","  return (left + right) / 2;","};","","module.exports = ternarySearch;",""],"l":{"9":1,"10":0,"11":0,"14":0,"15":0,"16":0,"18":0,"21":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/search/dfs.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/search/dfs.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":14},"end":{"line":7,"column":40}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":15},"end":{"line":18,"column":41}}},"3":{"name":"(anonymous_3)","line":29,"loc":{"start":{"line":29,"column":16},"end":{"line":29,"column":42}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":13,"column":2}},"2":{"start":{"line":8,"column":2},"end":{"line":12,"column":3}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":33}},"4":{"start":{"line":10,"column":4},"end":{"line":10,"column":25}},"5":{"start":{"line":11,"column":4},"end":{"line":11,"column":34}},"6":{"start":{"line":18,"column":0},"end":{"line":24,"column":2}},"7":{"start":{"line":19,"column":2},"end":{"line":23,"column":3}},"8":{"start":{"line":20,"column":4},"end":{"line":20,"column":25}},"9":{"start":{"line":21,"column":4},"end":{"line":21,"column":34}},"10":{"start":{"line":22,"column":4},"end":{"line":22,"column":35}},"11":{"start":{"line":29,"column":0},"end":{"line":35,"column":2}},"12":{"start":{"line":30,"column":2},"end":{"line":34,"column":3}},"13":{"start":{"line":31,"column":4},"end":{"line":31,"column":35}},"14":{"start":{"line":32,"column":4},"end":{"line":32,"column":36}},"15":{"start":{"line":33,"column":4},"end":{"line":33,"column":25}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":28}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":30}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":25}}},"branchMap":{"1":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":2},"end":{"line":8,"column":2}},{"start":{"line":8,"column":2},"end":{"line":8,"column":2}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]}},"code":["'use strict';","","/**"," * Depth first search for trees"," * (in order)"," */","var inOrder = function (node, callback) {","  if (node) {","    inOrder(node.left, callback);","    callback(node.value);","    inOrder(node.right, callback);","  }","};","","/**"," * Pre order"," */","var preOrder = function (node, callback) {","  if (node) {","    callback(node.value);","    preOrder(node.left, callback);","    preOrder(node.right, callback);","  }","};","","/**"," * Post order"," */","var postOrder = function (node, callback) {","  if (node) {","    postOrder(node.left, callback);","    postOrder(node.right, callback);","    callback(node.value);","  }","};","","// Set inOrder as the default implementation","inOrder.preOrder = preOrder;","inOrder.postOrder = postOrder;","module.exports = inOrder;",""],"l":{"7":1,"8":0,"9":0,"10":0,"11":0,"18":1,"19":0,"20":0,"21":0,"22":0,"29":1,"30":0,"31":0,"32":0,"33":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/sorting.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/sorting.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":15,"column":2}}},"branchMap":{},"code":["'use strict';","","// Sorting algorithms","module.exports = {","  bubbleSort: require('./algorithms/sorting/bubble_sort'),","  shortBubbleSort: require('./algorithms/sorting/short_bubble_sort'),","  countingSort: require('./algorithms/sorting/counting_sort'),","  heapSort: require('./algorithms/sorting/heap_sort'),","  mergeSort: require('./algorithms/sorting/merge_sort'),","  quicksort: require('./algorithms/sorting/quicksort'),","  selectionSort: require('./algorithms/sorting/selection_sort'),","  radixSort: require('./algorithms/sorting/radix_sort'),","  insertionSort: require('./algorithms/sorting/insertion_sort'),","  shellSort: require('./algorithms/sorting/shell_sort')","};",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/bubble_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/bubble_sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":44}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"2":{"start":{"line":7,"column":0},"end":{"line":28,"column":2}},"3":{"start":{"line":8,"column":2},"end":{"line":8,"column":48}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":19}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":20}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":20}},"7":{"start":{"line":12,"column":2},"end":{"line":26,"column":3}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":21}},"9":{"start":{"line":14,"column":4},"end":{"line":22,"column":5}},"10":{"start":{"line":15,"column":6},"end":{"line":21,"column":7}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":23}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":24}},"13":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"14":{"start":{"line":19,"column":8},"end":{"line":19,"column":21}},"15":{"start":{"line":20,"column":8},"end":{"line":20,"column":21}},"16":{"start":{"line":23,"column":4},"end":{"line":24,"column":15}},"17":{"start":{"line":24,"column":6},"end":{"line":24,"column":15}},"18":{"start":{"line":25,"column":4},"end":{"line":25,"column":21}},"19":{"start":{"line":27,"column":2},"end":{"line":27,"column":11}},"20":{"start":{"line":30,"column":0},"end":{"line":30,"column":28}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":6},"end":{"line":15,"column":6}},{"start":{"line":15,"column":6},"end":{"line":15,"column":6}}]},"2":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]}},"code":["'use strict';","var Comparator = require('../../util/comparator');","","/**"," * Bubble sort algorithm O(n^2)"," */","var bubbleSort = function (a, comparatorFn) {","  var comparator = new Comparator(comparatorFn);","  var n = a.length;","  var bound = n - 1;","  var check = false;","  for (var i = 0; i < n - 1; i++) {","    var newbound = 0;","    for (var j = 0; j < bound; j++) {","      if (comparator.greaterThan(a[j], a[j + 1])) {","        var tmp = a[j];","        a[j] = a[j + 1];","        a[j + 1] = tmp;","        newbound = j;","        check = true;","      }","    }","    if (!check)","      return a;","    bound = newbound;","  }","  return a;","};","","module.exports = bubbleSort;",""],"l":{"2":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/short_bubble_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"shortBubbleSort","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":10,"column":0},"end":{"line":34,"column":1}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":48}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":32}},"5":{"start":{"line":13,"column":2},"end":{"line":13,"column":12}},"6":{"start":{"line":15,"column":2},"end":{"line":31,"column":3}},"7":{"start":{"line":16,"column":4},"end":{"line":16,"column":27}},"8":{"start":{"line":17,"column":4},"end":{"line":17,"column":26}},"9":{"start":{"line":26,"column":4},"end":{"line":30,"column":5}},"10":{"start":{"line":27,"column":6},"end":{"line":27,"column":27}},"11":{"start":{"line":28,"column":6},"end":{"line":28,"column":22}},"12":{"start":{"line":29,"column":6},"end":{"line":29,"column":13}},"13":{"start":{"line":33,"column":2},"end":{"line":33,"column":15}},"14":{"start":{"line":36,"column":0},"end":{"line":36,"column":33}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]}},"code":["'use strict';","","var Comparator = require('../../util/comparator');","","/**"," * short bubble sort algorithm"," * worst: O(n^2) best: O(n)"," */","","function shortBubbleSort(array, comparatorFn) {","  var comparator = new Comparator(comparatorFn);","  var length = array.length - 1;","  var i = 0;","","  for (i; i < length; i++) {","    var current = array[i];","    var next = array[i+1];","","    /**","     * If the current value if greater than the next:","     * - set current value to next value;","     * - and set next value to current value;","     * - then reset iterator counter to rescan for values to be sorted.","     */","","    if (comparator.greaterThan(current, next)) {","      array[i+1] = current;","      array[i] = next;","      i = -1;","    }","  }","","  return array;","}","","module.exports = shortBubbleSort;",""],"l":{"3":1,"10":1,"11":0,"12":0,"13":0,"15":0,"16":0,"17":0,"26":0,"27":0,"28":0,"29":0,"33":0,"36":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/counting_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/counting_sort.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":19},"end":{"line":14,"column":36}}},"2":{"name":"(anonymous_2)","line":54,"loc":{"start":{"line":54,"column":17},"end":{"line":54,"column":34}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":44,"column":2}},"2":{"start":{"line":15,"column":2},"end":{"line":15,"column":30}},"3":{"start":{"line":16,"column":2},"end":{"line":16,"column":26}},"4":{"start":{"line":17,"column":2},"end":{"line":17,"column":28}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":8}},"6":{"start":{"line":20,"column":2},"end":{"line":28,"column":3}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":32}},"8":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"9":{"start":{"line":24,"column":6},"end":{"line":24,"column":36}},"10":{"start":{"line":27,"column":4},"end":{"line":27,"column":44}},"11":{"start":{"line":30,"column":2},"end":{"line":30,"column":13}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":18}},"13":{"start":{"line":33,"column":2},"end":{"line":41,"column":3}},"14":{"start":{"line":34,"column":4},"end":{"line":40,"column":5}},"15":{"start":{"line":35,"column":6},"end":{"line":35,"column":49}},"16":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"17":{"start":{"line":38,"column":8},"end":{"line":38,"column":48}},"18":{"start":{"line":43,"column":2},"end":{"line":43,"column":15}},"19":{"start":{"line":54,"column":0},"end":{"line":65,"column":2}},"20":{"start":{"line":55,"column":2},"end":{"line":55,"column":25}},"21":{"start":{"line":56,"column":2},"end":{"line":56,"column":28}},"22":{"start":{"line":58,"column":2},"end":{"line":62,"column":3}},"23":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"24":{"start":{"line":60,"column":6},"end":{"line":60,"column":25}},"25":{"start":{"line":64,"column":2},"end":{"line":64,"column":13}},"26":{"start":{"line":67,"column":0},"end":{"line":67,"column":30}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]}},"code":["'use strict';","","/**"," * Sorts an array of objects according to their 'key' property"," * Every object inside the array MUST have the 'key' property with"," * a integer value."," *"," * Execution Time: (3 * array.length - 1)"," * Asymptotic Complexity: O(array.length + maximumKey)"," *"," * @param Array"," * @return Array"," */","var countingSort = function (array) {","  var max = maximumKey(array);","  var auxiliaryArray = [];","  var length = array.length;","  var i;","","  for (i = 0; i < length; i++) {","    var position = array[i].key;","","    if (auxiliaryArray[position] === undefined) {","      auxiliaryArray[position] = [];","    }","","    auxiliaryArray[position].push(array[i]);","  }","","  array = [];","  var pointer = 0;","","  for (i = 0; i <= max; i++) {","    if (auxiliaryArray[i] !== undefined) {","      var localLength = auxiliaryArray[i].length;","","      for (var j = 0; j < localLength; j++) {","        array[pointer++] = auxiliaryArray[i][j];","      }","    }","  }","","  return array;","};","","/**"," * Finds the maximum key from an array of objects"," *"," * Asymptotic Complexity: O(array.length)"," *"," * @param Array"," * @return Integer"," */","var maximumKey = function (array) {","  var max = array[0].key;","  var length = array.length;","","  for (var i = 1; i < length; i++) {","    if (array[i].key > max) {","      max = array[i].key;","    }","  }","","  return max;","};","","module.exports = countingSort;",""],"l":{"14":1,"15":0,"16":0,"17":0,"18":0,"20":0,"21":0,"23":0,"24":0,"27":0,"30":0,"31":0,"33":0,"34":0,"35":0,"37":0,"38":0,"43":0,"54":1,"55":0,"56":0,"58":0,"59":0,"60":0,"64":0,"67":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/heap_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/heap_sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":15},"end":{"line":9,"column":46}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":60}},"2":{"start":{"line":9,"column":0},"end":{"line":19,"column":2}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":42}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":25}},"5":{"start":{"line":14,"column":2},"end":{"line":14,"column":18}},"6":{"start":{"line":15,"column":2},"end":{"line":16,"column":35}},"7":{"start":{"line":16,"column":4},"end":{"line":16,"column":35}},"8":{"start":{"line":18,"column":2},"end":{"line":18,"column":16}},"9":{"start":{"line":21,"column":0},"end":{"line":21,"column":26}}},"branchMap":{},"code":["'use strict';","var MinHeap = require('../../data_structures/heap').MinHeap;","","/**"," * Heap sort first creates a valid heap data structure. Next it"," * iteratively removes the smallest element of the heap until it's"," * empty. The time complexity of the algorithm is O(n.lg n)"," */","var heapsort = function (array, comparatorFn) {","","  var minHeap = new MinHeap(comparatorFn);","  minHeap.heapify(array);","","  var result = [];","  while (!minHeap.isEmpty())","    result.push(minHeap.extract());","","  return result;","};","","module.exports = heapsort;",""],"l":{"2":1,"9":1,"11":0,"12":0,"14":0,"15":0,"16":0,"18":0,"21":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/merge_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/merge_sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":20},"end":{"line":8,"column":44}}},"2":{"name":"mergeSort","line":11,"loc":{"start":{"line":11,"column":10},"end":{"line":11,"column":32}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":12},"end":{"line":23,"column":40}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"2":{"start":{"line":8,"column":0},"end":{"line":21,"column":2}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":45}},"4":{"start":{"line":11,"column":2},"end":{"line":20,"column":8}},"5":{"start":{"line":12,"column":4},"end":{"line":17,"column":5}},"6":{"start":{"line":13,"column":6},"end":{"line":13,"column":33}},"7":{"start":{"line":14,"column":6},"end":{"line":14,"column":47}},"8":{"start":{"line":15,"column":6},"end":{"line":15,"column":45}},"9":{"start":{"line":16,"column":6},"end":{"line":16,"column":41}},"10":{"start":{"line":19,"column":4},"end":{"line":19,"column":13}},"11":{"start":{"line":23,"column":0},"end":{"line":35,"column":2}},"12":{"start":{"line":24,"column":2},"end":{"line":26,"column":18}},"13":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"14":{"start":{"line":29,"column":4},"end":{"line":29,"column":67}},"15":{"start":{"line":34,"column":2},"end":{"line":34,"column":65}},"16":{"start":{"line":37,"column":0},"end":{"line":37,"column":31}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":12,"column":4}},{"start":{"line":12,"column":4},"end":{"line":12,"column":4}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":9},"end":{"line":28,"column":21}},{"start":{"line":28,"column":25},"end":{"line":28,"column":37}}]},"3":{"line":29,"type":"cond-expr","locations":[{"start":{"line":29,"column":50},"end":{"line":29,"column":56}},{"start":{"line":29,"column":59},"end":{"line":29,"column":65}}]},"4":{"line":34,"type":"cond-expr","locations":[{"start":{"line":34,"column":39},"end":{"line":34,"column":49}},{"start":{"line":34,"column":52},"end":{"line":34,"column":62}}]}},"code":["'use strict';","var Comparator = require('../../util/comparator');","","/**"," * Merge sort"," * O(n.lgn)"," */","var mergeSortInit = function (a, compareFn) {","  var comparator = new Comparator(compareFn);","","  return (function mergeSort(a) {","    if (a.length > 1) {","      var middle = a.length >> 1;","      var left = mergeSort(a.slice(0, middle));","      var right = mergeSort(a.slice(middle));","      a = merge(left, right, comparator);","    }","","    return a;","  })(a);","};","","var merge = function (a, b, comparator) {","  var i = 0,","      j = 0,","      result = [];","","  while (i < a.length && j < b.length) {","    result.push(comparator.lessThan(a[i], b[j]) ? a[i++] : b[j++]);","  }","","  // Concats the elements from the sub-array","  // that has not been included yet","  return result.concat((i < a.length ? a.slice(i) : b.slice(j)));","};","","module.exports = mergeSortInit;",""],"l":{"2":1,"8":1,"9":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"19":0,"23":1,"24":0,"28":0,"29":0,"34":0,"37":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/quicksort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/quicksort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":20},"end":{"line":8,"column":51}}},"2":{"name":"quicksort","line":12,"loc":{"start":{"line":12,"column":10},"end":{"line":12,"column":44}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":16},"end":{"line":37,"column":49}}},"4":{"name":"(anonymous_4)","line":60,"loc":{"start":{"line":60,"column":11},"end":{"line":60,"column":34}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"2":{"start":{"line":8,"column":0},"end":{"line":28,"column":2}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":48}},"4":{"start":{"line":12,"column":2},"end":{"line":27,"column":33}},"5":{"start":{"line":13,"column":4},"end":{"line":24,"column":5}},"6":{"start":{"line":14,"column":6},"end":{"line":14,"column":51}},"7":{"start":{"line":17,"column":6},"end":{"line":23,"column":7}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":36}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":19}},"10":{"start":{"line":21,"column":8},"end":{"line":21,"column":36}},"11":{"start":{"line":22,"column":8},"end":{"line":22,"column":19}},"12":{"start":{"line":26,"column":4},"end":{"line":26,"column":17}},"13":{"start":{"line":37,"column":0},"end":{"line":55,"column":2}},"14":{"start":{"line":40,"column":2},"end":{"line":40,"column":58}},"15":{"start":{"line":41,"column":2},"end":{"line":41,"column":17}},"16":{"start":{"line":45,"column":2},"end":{"line":45,"column":27}},"17":{"start":{"line":47,"column":2},"end":{"line":52,"column":3}},"18":{"start":{"line":48,"column":4},"end":{"line":51,"column":5}},"19":{"start":{"line":49,"column":6},"end":{"line":49,"column":34}},"20":{"start":{"line":50,"column":6},"end":{"line":50,"column":24}},"21":{"start":{"line":53,"column":2},"end":{"line":53,"column":34}},"22":{"start":{"line":54,"column":2},"end":{"line":54,"column":25}},"23":{"start":{"line":60,"column":0},"end":{"line":64,"column":2}},"24":{"start":{"line":61,"column":2},"end":{"line":61,"column":21}},"25":{"start":{"line":62,"column":2},"end":{"line":62,"column":22}},"26":{"start":{"line":63,"column":2},"end":{"line":63,"column":17}},"27":{"start":{"line":66,"column":0},"end":{"line":66,"column":31}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":6},"end":{"line":17,"column":6}},{"start":{"line":17,"column":6},"end":{"line":17,"column":6}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]}},"code":["'use strict';","var Comparator = require('../../util/comparator');","","/**"," * Quicksort recursively sorts parts of the array in"," * O(n.lg n)"," */","var quicksortInit = function (array, comparatorFn) {","","  var comparator = new Comparator(comparatorFn);","","  return (function quicksort(array, lo, hi) {","    while (lo < hi) {","      var p = partition(array, comparator, lo, hi);","      //Chooses only the smallest partition to use recursion on and","      //tail-optimize the other. This guarantees O(log n) space in worst case.","      if (p - lo < hi - p) {","        quicksort(array, lo, p - 1);","        lo = p + 1;","      } else {","        quicksort(array, p + 1, hi);","        hi = p - 1;","      }","    }","","    return array;","  })(array, 0, array.length - 1);","};","","/**"," * Chooses a pivot and makes every element that is"," * lower than the pivot move to its left, and every"," * greater element moves to its right"," *"," * @return Number the positon of the pivot"," */","var partition = function (a, comparator, lo, hi) {","  // pick a random element, swap with the rightmost and","  // use it as pivot","  swap(a, Math.floor(Math.random() * (hi - lo)) + lo, hi);","  var pivot = hi;","","  // dividerPosition keeps track of the position","  // where the pivot should be inserted","  var dividerPosition = lo;","","  for (var i = lo; i < hi; i++) {","    if (comparator.lessThan(a[i], a[pivot])) {","      swap(a, i, dividerPosition);","      dividerPosition++;","    }","  }","  swap(a, dividerPosition, pivot);","  return dividerPosition;","};","","/**"," * Swaps two elements in the array"," */","var swap = function (array, x, y) {","  var tmp = array[y];","  array[y] = array[x];","  array[x] = tmp;","};","","module.exports = quicksortInit;",""],"l":{"2":1,"8":1,"10":0,"12":0,"13":0,"14":0,"17":0,"18":0,"19":0,"21":0,"22":0,"26":0,"37":1,"40":0,"41":0,"45":0,"47":0,"48":0,"49":0,"50":0,"53":0,"54":0,"60":1,"61":0,"62":0,"63":0,"66":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/selection_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/selection_sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":20},"end":{"line":6,"column":47}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"2":{"start":{"line":6,"column":0},"end":{"line":24,"column":2}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":48}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":19}},"5":{"start":{"line":9,"column":2},"end":{"line":21,"column":3}},"6":{"start":{"line":10,"column":4},"end":{"line":10,"column":16}},"7":{"start":{"line":11,"column":4},"end":{"line":15,"column":5}},"8":{"start":{"line":12,"column":6},"end":{"line":14,"column":7}},"9":{"start":{"line":13,"column":8},"end":{"line":13,"column":16}},"10":{"start":{"line":16,"column":4},"end":{"line":20,"column":5}},"11":{"start":{"line":17,"column":6},"end":{"line":17,"column":21}},"12":{"start":{"line":18,"column":6},"end":{"line":18,"column":20}},"13":{"start":{"line":19,"column":6},"end":{"line":19,"column":19}},"14":{"start":{"line":23,"column":2},"end":{"line":23,"column":11}},"15":{"start":{"line":26,"column":0},"end":{"line":26,"column":31}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":6},"end":{"line":12,"column":6}},{"start":{"line":12,"column":6},"end":{"line":12,"column":6}}]},"2":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]}},"code":["'use strict';","var Comparator = require('../../util/comparator');","/**"," * Selection sort algorithm O(n^2)"," */","var selectionSort = function (a, comparatorFn) {","  var comparator = new Comparator(comparatorFn);","  var n = a.length;","  for (var i = 0; i < n - 1; i++) {","    var min = i;","    for (var j = i + 1; j < n; j++) {","      if (comparator.greaterThan(a[min], a[j])) {","        min = j;","      }","    }","    if (min !== i) {","      var tmp = a[i];","      a[i] = a[min];","      a[min] = tmp;","    }","  }","","  return a;","};","","module.exports = selectionSort;",""],"l":{"2":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"16":0,"17":0,"18":0,"19":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/radix_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/radix_sort.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":16},"end":{"line":14,"column":33}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":28},"end":{"line":40,"column":50}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":17},"end":{"line":76,"column":30}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":24,"column":2}},"2":{"start":{"line":15,"column":2},"end":{"line":15,"column":30}},"3":{"start":{"line":16,"column":2},"end":{"line":17,"column":50}},"4":{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},"5":{"start":{"line":20,"column":4},"end":{"line":20,"column":44}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":15}},"7":{"start":{"line":40,"column":0},"end":{"line":65,"column":2}},"8":{"start":{"line":41,"column":2},"end":{"line":41,"column":28}},"9":{"start":{"line":42,"column":2},"end":{"line":42,"column":18}},"10":{"start":{"line":43,"column":2},"end":{"line":43,"column":8}},"11":{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},"12":{"start":{"line":46,"column":4},"end":{"line":46,"column":19}},"13":{"start":{"line":49,"column":2},"end":{"line":52,"column":3}},"14":{"start":{"line":50,"column":4},"end":{"line":50,"column":79}},"15":{"start":{"line":51,"column":4},"end":{"line":51,"column":33}},"16":{"start":{"line":54,"column":2},"end":{"line":54,"column":18}},"17":{"start":{"line":56,"column":2},"end":{"line":62,"column":3}},"18":{"start":{"line":57,"column":4},"end":{"line":57,"column":39}},"19":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"20":{"start":{"line":60,"column":6},"end":{"line":60,"column":38}},"21":{"start":{"line":64,"column":2},"end":{"line":64,"column":15}},"22":{"start":{"line":76,"column":0},"end":{"line":84,"column":2}},"23":{"start":{"line":77,"column":2},"end":{"line":77,"column":10}},"24":{"start":{"line":78,"column":2},"end":{"line":82,"column":3}},"25":{"start":{"line":79,"column":4},"end":{"line":81,"column":5}},"26":{"start":{"line":80,"column":6},"end":{"line":80,"column":21}},"27":{"start":{"line":83,"column":2},"end":{"line":83,"column":13}},"28":{"start":{"line":86,"column":0},"end":{"line":86,"column":27}}},"branchMap":{"1":{"line":16,"type":"cond-expr","locations":[{"start":{"line":16,"column":31},"end":{"line":16,"column":32}},{"start":{"line":17,"column":4},"end":{"line":17,"column":48}}]},"2":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"3":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":25}},{"start":{"line":79,"column":29},"end":{"line":79,"column":43}}]}},"code":["'use strict';","","/**"," * Sorts an array of objects according to their 'key' property"," * Every object inside the array MUST have the 'key' property with"," * a integer value."," *"," * Asymptotic Complexity: O(array.length * d), where 'd' represents"," * the amount of digits in the larger key of the array"," *"," * @param Array"," * @return Array"," */","var radixSort = function (array) {","  var max = maximumKey(array);","  var digitsMax = (max === 0 ? 1 :","    1 + Math.floor(Math.log(max) / Math.log(10))); // log base 10","","  for (var i = 0; i < digitsMax; i++) {","    array = auxiliaryCountingSort(array, i);","  }","","  return array;","};","","/**"," * Auxiliary sorting method for RadixSort"," * Sorts an array of objects according to only one digit of"," * their 'key' property. The digit to be sorted is determined"," * by the 'mod' variable"," * Every object inside the array MUST have the 'key' property with"," * a integer value."," *"," * Execution Time: (2 * array.length + 10)"," * Asymptotic Complexity: O(array.length)"," *"," * @param Array"," * @return Array"," */","var auxiliaryCountingSort = function (array, mod) {","  var length = array.length;","  var bucket = [];","  var i;","","  for (i = 0; i < 10; i++) {","    bucket[i] = [];","  }","","  for (i = 0; i < length; i++) {","    var digit = parseInt((array[i].key / Math.pow(10, mod)).toFixed(mod)) % 10;","    bucket[digit].push(array[i]);","  }","","  var pointer = 0;","","  for (i = 0; i < 10; i++) {","    var localLength = bucket[i].length;","","    for (var j = 0; j < localLength; j++) {","      array[pointer++] = bucket[i][j];","    }","  }","","  return array;","};","","/**"," * Finds the maximum key from an array of objects"," *"," * Asymptotic Complexity: O(array.length)"," *"," * @param Array"," * @return Integer if array non-empty"," *         Undefined otherwise"," */","var maximumKey = function (a) {","  var max;","  for (var i = 1; i < a.length; i++) {","    if (max === undefined || a[i].key > max) {","      max = a[i].key;","    }","  }","  return max;","};","","module.exports = radixSort;",""],"l":{"14":1,"15":0,"16":0,"19":0,"20":0,"23":0,"40":1,"41":0,"42":0,"43":0,"45":0,"46":0,"49":0,"50":0,"51":0,"54":0,"56":0,"57":0,"59":0,"60":0,"64":0,"76":1,"77":0,"78":0,"79":0,"80":0,"83":0,"86":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/insertion_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/insertion_sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":20},"end":{"line":7,"column":52}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"2":{"start":{"line":7,"column":0},"end":{"line":23,"column":2}},"3":{"start":{"line":8,"column":2},"end":{"line":8,"column":48}},"4":{"start":{"line":10,"column":2},"end":{"line":20,"column":3}},"5":{"start":{"line":11,"column":4},"end":{"line":12,"column":12}},"6":{"start":{"line":14,"column":4},"end":{"line":17,"column":5}},"7":{"start":{"line":15,"column":6},"end":{"line":15,"column":32}},"8":{"start":{"line":16,"column":6},"end":{"line":16,"column":10}},"9":{"start":{"line":19,"column":4},"end":{"line":19,"column":20}},"10":{"start":{"line":22,"column":2},"end":{"line":22,"column":16}},"11":{"start":{"line":25,"column":0},"end":{"line":25,"column":31}}},"branchMap":{"1":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":11},"end":{"line":14,"column":16}},{"start":{"line":14,"column":20},"end":{"line":14,"column":59}}]}},"code":["'use strict';","var Comparator = require('../../util/comparator');","","/**"," * Insertion sort algorithm O(n + d)"," */","var insertionSort = function (vector, comparatorFn) {","  var comparator = new Comparator(comparatorFn);","","  for (var i = 1, len = vector.length; i < len; i++) {","    var aux = vector[i],","      j = i;","","    while (j > 0 && comparator.lessThan(aux, vector[j - 1])) {","      vector[j] = vector[j - 1];","      j--;","    }","","    vector[j] = aux;","  }","","  return vector;","};","","module.exports = insertionSort;",""],"l":{"2":1,"7":1,"8":0,"10":0,"11":0,"14":0,"15":0,"16":0,"19":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/shell_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/sorting/shell_sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":16},"end":{"line":6,"column":47}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"2":{"start":{"line":6,"column":0},"end":{"line":27,"column":2}},"3":{"start":{"line":7,"column":2},"end":{"line":11,"column":27}},"4":{"start":{"line":13,"column":2},"end":{"line":24,"column":3}},"5":{"start":{"line":14,"column":4},"end":{"line":22,"column":5}},"6":{"start":{"line":15,"column":6},"end":{"line":15,"column":22}},"7":{"start":{"line":16,"column":6},"end":{"line":16,"column":18}},"8":{"start":{"line":17,"column":6},"end":{"line":20,"column":7}},"9":{"start":{"line":18,"column":8},"end":{"line":18,"column":34}},"10":{"start":{"line":19,"column":8},"end":{"line":19,"column":20}},"11":{"start":{"line":21,"column":6},"end":{"line":21,"column":28}},"12":{"start":{"line":23,"column":4},"end":{"line":23,"column":28}},"13":{"start":{"line":26,"column":2},"end":{"line":26,"column":15}},"14":{"start":{"line":29,"column":0},"end":{"line":29,"column":27}}},"branchMap":{"1":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":13},"end":{"line":17,"column":23}},{"start":{"line":17,"column":27},"end":{"line":17,"column":65}}]}},"code":["'use strict';","var Comparator = require('../../util/comparator');","/**"," * shell sort  worst:O(n lg n)  best:O(n)"," */","var shellSort = function (array, comparatorFn) {","  var comparator = new Comparator(comparatorFn),","    begin = 0,","    end = array.length - 1,","    gap = parseInt((end - begin + 1) / 2),","    i = 0, j = 0, temp = 0;","","  while (gap >= 1) {","    for (i = begin + gap;i <= end;i += 1) {","      temp = array[i];","      j = i - gap;","      while (j >= begin && comparator.greaterThan(array[j], temp)) {","        array[j + gap] = array[j];","        j = j - gap;","      }","      array[j + gap] = temp;","    }","    gap = parseInt(gap / 2);","  }","","  return array;","};","","module.exports = shellSort;",""],"l":{"2":1,"6":1,"7":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"21":0,"23":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/string.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/string.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":14,"column":2}}},"branchMap":{},"code":["'use strict';","","// String algorithms","module.exports = {","  levenshtein: require('./algorithms/string/levenshtein'),","  rabinKarp: require('./algorithms/string/rabin_karp'),","  knuthMorrisPratt: require('./algorithms/string/knuth_morris_pratt'),","  huffman: require('./algorithms/string/huffman'),","  hamming: require('./algorithms/string/hamming'),","  longestCommonSubsequence: require(","    './algorithms/string/longest_common_subsequence'),","  longestCommonSubstring: require(","      './algorithms/string/longest_common_substring')","};",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/levenshtein.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/levenshtein.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":18},"end":{"line":18,"column":34}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":47,"column":2}},"2":{"start":{"line":19,"column":2},"end":{"line":19,"column":24}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":11}},"4":{"start":{"line":24,"column":2},"end":{"line":27,"column":3}},"5":{"start":{"line":25,"column":4},"end":{"line":25,"column":25}},"6":{"start":{"line":26,"column":4},"end":{"line":26,"column":27}},"7":{"start":{"line":30,"column":2},"end":{"line":32,"column":3}},"8":{"start":{"line":31,"column":4},"end":{"line":31,"column":27}},"9":{"start":{"line":33,"column":2},"end":{"line":44,"column":3}},"10":{"start":{"line":34,"column":4},"end":{"line":43,"column":5}},"11":{"start":{"line":36,"column":6},"end":{"line":42,"column":40}},"12":{"start":{"line":46,"column":2},"end":{"line":46,"column":42}},"13":{"start":{"line":49,"column":0},"end":{"line":49,"column":29}}},"branchMap":{"1":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":33},"end":{"line":42,"column":34}},{"start":{"line":42,"column":37},"end":{"line":42,"column":38}}]}},"code":["'use strict';","","/**"," * Calculates the edit distance between two strings"," * considering the same cost of 1 to every operation"," * (addition, deletion, substitution)"," *"," * It uses dynamic programing and creates a matrix"," * where every cell [i,j] represents the distance between"," * the substrings a[0..i] and b[0..j]"," *"," * O(a.length * b.length)"," *"," * @param String"," * @param String"," * @return Number"," */","var levenshtein = function (a, b) {","  var editDistance = [];","  var i, j;","","  // Initialize the edit distance matrix. The first collumn contains","  // the values comparing the string a to an empty string b","  for (i = 0; i <= a.length; i++) {","    editDistance[i] = [];","    editDistance[i][0] = i;","  }","","  // And the first line the values comparint the string b to an empty string a","  for (j = 0; j <= b.length; j++) {","    editDistance[0][j] = j;","  }","  for (i = 1; i <= a.length; i++) {","    for (j = 1; j <= b.length; j++) {","      // Finds the minimum cost for keeping the two strings equal","      editDistance[i][j] =","        Math.min(","          editDistance[i - 1][j - 1], // if we replace a[i] by b[j]","          editDistance[i - 1][j], // if we delete the char from a","          editDistance[i][j - 1] // if we add the char from b","        ) +","        (a[i - 1] !== b[j - 1] ? 1 : 0);","    }","  }","","  return editDistance[a.length][b.length];","};","","module.exports = levenshtein;",""],"l":{"18":1,"19":0,"20":0,"24":0,"25":0,"26":0,"30":0,"31":0,"33":0,"34":0,"36":0,"46":0,"49":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/rabin_karp.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/rabin_karp.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":16},"end":{"line":23,"column":38}}},"2":{"name":"(anonymous_2)","line":63,"loc":{"start":{"line":63,"column":11},"end":{"line":63,"column":27}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":10,"column":15}},"2":{"start":{"line":23,"column":0},"end":{"line":55,"column":2}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":37}},"4":{"start":{"line":24,"column":28},"end":{"line":24,"column":37}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":34}},"6":{"start":{"line":27,"column":2},"end":{"line":27,"column":56}},"7":{"start":{"line":28,"column":2},"end":{"line":28,"column":27}},"8":{"start":{"line":30,"column":2},"end":{"line":52,"column":3}},"9":{"start":{"line":31,"column":4},"end":{"line":45,"column":5}},"10":{"start":{"line":32,"column":6},"end":{"line":32,"column":52}},"11":{"start":{"line":39,"column":6},"end":{"line":40,"column":43}},"12":{"start":{"line":41,"column":6},"end":{"line":41,"column":35}},"13":{"start":{"line":42,"column":6},"end":{"line":42,"column":46}},"14":{"start":{"line":44,"column":6},"end":{"line":44,"column":62}},"15":{"start":{"line":47,"column":4},"end":{"line":51,"column":5}},"16":{"start":{"line":50,"column":6},"end":{"line":50,"column":63}},"17":{"start":{"line":54,"column":2},"end":{"line":54,"column":12}},"18":{"start":{"line":63,"column":0},"end":{"line":71,"column":2}},"19":{"start":{"line":64,"column":2},"end":{"line":64,"column":12}},"20":{"start":{"line":66,"column":2},"end":{"line":68,"column":3}},"21":{"start":{"line":67,"column":4},"end":{"line":67,"column":66}},"22":{"start":{"line":70,"column":2},"end":{"line":70,"column":11}},"23":{"start":{"line":73,"column":0},"end":{"line":73,"column":27}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":24,"column":2}},{"start":{"line":24,"column":2},"end":{"line":24,"column":2}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"3":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":4}},{"start":{"line":47,"column":4},"end":{"line":47,"column":4}}]},"4":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":44}},{"start":{"line":48,"column":8},"end":{"line":48,"column":36}}]},"5":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":36},"end":{"line":50,"column":37}},{"start":{"line":50,"column":40},"end":{"line":50,"column":62}}]}},"code":["'use strict';","","/**"," * A prime number used to create"," * the hash representation of a word"," *"," * Bigger the prime number,"," * bigger the hash value"," */","var base = 997;","","/**"," * Calculates String Matching between two Strings"," * Returns true if String 'b' is contained in String 'a'"," *"," * Average and Best Case Complexity: O(a.length + b.length)"," * Worst Case Complexity: O(a.length * b.length)"," *"," * @param String"," * @param String"," * @return Integer"," */","var rabinKarp = function (s, pattern) {","  if (pattern.length === 0) return 0;","","  var hashPattern = hash(pattern);","  var currentSubstring = s.substring(0, pattern.length);","  var hashCurrentSubstring;","","  for (var i = pattern.length; i <= s.length; i++) {","    if (hashCurrentSubstring === undefined) {","      hashCurrentSubstring = hash(currentSubstring);","    } else {","      /*","       * Re-hash","       * Recalculates the hash representation of a word so that it isn't","       * necessary to traverse the whole word again","       */","      hashCurrentSubstring -= currentSubstring.charCodeAt(0) *","        Math.pow(base, pattern.length - 1);","      hashCurrentSubstring *= base;","      hashCurrentSubstring += s.charCodeAt(i);","","      currentSubstring = currentSubstring.substring(1) + s[i];","    }","","    if (hashPattern === hashCurrentSubstring &&","        pattern === currentSubstring) {","      // Hack for the off-by-one when matching in the beginning of the string","      return i === pattern.length ? 0 : i - pattern.length + 1;","    }","  }","","  return -1;","};","","/**"," * Creates the hash representation of 'word'"," *"," * @param String"," * @return Number"," */","var hash = function (word) {","  var h = 0;","","  for (var i = 0; i < word.length; i++) {","    h += word.charCodeAt(i) * Math.pow(base, word.length - i - 1);","  }","","  return h;","};","","module.exports = rabinKarp;",""],"l":{"10":1,"23":1,"24":0,"26":0,"27":0,"28":0,"30":0,"31":0,"32":0,"39":0,"41":0,"42":0,"44":0,"47":0,"50":0,"54":0,"63":1,"64":0,"66":0,"67":0,"70":0,"73":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/knuth_morris_pratt.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/knuth_morris_pratt.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":23},"end":{"line":18,"column":48}}},"2":{"name":"(anonymous_2)","line":57,"loc":{"start":{"line":57,"column":17},"end":{"line":57,"column":36}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":45,"column":2}},"2":{"start":{"line":19,"column":2},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":37}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":12}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":12}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":34}},"7":{"start":{"line":25,"column":2},"end":{"line":42,"column":3}},"8":{"start":{"line":26,"column":4},"end":{"line":41,"column":5}},"9":{"start":{"line":27,"column":6},"end":{"line":29,"column":7}},"10":{"start":{"line":28,"column":8},"end":{"line":28,"column":17}},"11":{"start":{"line":30,"column":6},"end":{"line":30,"column":10}},"12":{"start":{"line":33,"column":6},"end":{"line":40,"column":7}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":21}},"14":{"start":{"line":35,"column":8},"end":{"line":35,"column":29}},"15":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"16":{"start":{"line":39,"column":8},"end":{"line":39,"column":12}},"17":{"start":{"line":44,"column":2},"end":{"line":44,"column":20}},"18":{"start":{"line":57,"column":0},"end":{"line":82,"column":2}},"19":{"start":{"line":58,"column":2},"end":{"line":58,"column":30}},"20":{"start":{"line":59,"column":2},"end":{"line":59,"column":17}},"21":{"start":{"line":60,"column":2},"end":{"line":60,"column":19}},"22":{"start":{"line":61,"column":2},"end":{"line":61,"column":14}},"23":{"start":{"line":63,"column":2},"end":{"line":63,"column":16}},"24":{"start":{"line":64,"column":2},"end":{"line":64,"column":15}},"25":{"start":{"line":66,"column":2},"end":{"line":79,"column":3}},"26":{"start":{"line":67,"column":4},"end":{"line":78,"column":5}},"27":{"start":{"line":68,"column":6},"end":{"line":68,"column":12}},"28":{"start":{"line":69,"column":6},"end":{"line":69,"column":28}},"29":{"start":{"line":70,"column":6},"end":{"line":70,"column":17}},"30":{"start":{"line":72,"column":9},"end":{"line":78,"column":5}},"31":{"start":{"line":73,"column":6},"end":{"line":73,"column":23}},"32":{"start":{"line":76,"column":6},"end":{"line":76,"column":26}},"33":{"start":{"line":77,"column":6},"end":{"line":77,"column":17}},"34":{"start":{"line":81,"column":2},"end":{"line":81,"column":15}},"35":{"start":{"line":84,"column":0},"end":{"line":84,"column":34}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":6}},{"start":{"line":27,"column":6},"end":{"line":27,"column":6}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"5":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":9},"end":{"line":72,"column":9}},{"start":{"line":72,"column":9},"end":{"line":72,"column":9}}]}},"code":["'use strict';","","/**"," * String Matching algorithm"," * Tries to match the given pattern inside the given text"," * If the pattern exists inside the text, it will be returned"," * the index of the begining of the pattern in the text,"," * otherwise it will be returned the length of the text"," *"," * Asymptotic Complexity: O(text.length)"," *"," * @param {Array} text of Numbers, Strings or Characters"," *     or {String}"," * @param {Array} pattern of Numbers, Strings or Characters"," *     or {String}"," * @return {Number}"," */","var knuthMorrisPratt = function (text, pattern) {","  var textLength = text.length;","  var patternLength = pattern.length;","  var m = 0;","  var i = 0;","  var table = buildTable(pattern);","","  while (m + i < textLength) {","    if (pattern[i] === text[m + i]) {","      if (i === patternLength - 1) {","        return m;","      }","      ++i;","    }","    else {","      if (table[i] >= 0) {","        i = table[i];","        m = m + i - table[i];","      }","      else {","        i = 0;","        ++m;","      }","    }","  }","","  return textLength;","};","","/**"," * Builds the dinamic table of the given pattern"," * to record how the pattern can match it self"," *"," * Asymptotic Complexity: O(pattern.length)"," *"," * @param {Array} pattern of Numbers, Strings or Characters"," *     or {String}"," * @return {Array} of Integers"," */","var buildTable = function (pattern) {","  var length = pattern.length;","  var table = [];","  var position = 2;","  var cnd = 0;","","  table[0] = -1;","  table[1] = 0;","","  while (position < length) {","    if (pattern[position - 1] === pattern[cnd]) {","      ++cnd;","      table[position] = cnd;","      ++position;","    }","    else if (cnd > 0) {","      cnd = table[cnd];","    }","    else {","      table[position] = 0;","      ++position;","    }","  }","","  return table;","};","","module.exports = knuthMorrisPratt;",""],"l":{"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"25":0,"26":0,"27":0,"28":0,"30":0,"33":0,"34":0,"35":0,"38":0,"39":0,"44":0,"57":1,"58":0,"59":0,"60":0,"61":0,"63":0,"64":0,"66":0,"67":0,"68":0,"69":0,"70":0,"72":0,"73":0,"76":0,"77":0,"81":0,"84":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/huffman.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/huffman.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":15},"end":{"line":21,"column":33}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":27},"end":{"line":25,"column":43}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":17},"end":{"line":53,"column":34}}},"4":{"name":"(anonymous_4)","line":64,"loc":{"start":{"line":64,"column":38},"end":{"line":64,"column":55}}},"5":{"name":"(anonymous_5)","line":84,"loc":{"start":{"line":84,"column":17},"end":{"line":84,"column":47}}},"6":{"name":"(anonymous_6)","line":93,"loc":{"start":{"line":93,"column":27},"end":{"line":93,"column":43}}},"7":{"name":"(anonymous_7)","line":97,"loc":{"start":{"line":97,"column":41},"end":{"line":97,"column":57}}},"8":{"name":"(anonymous_8)","line":104,"loc":{"start":{"line":104,"column":16},"end":{"line":104,"column":32}}},"9":{"name":"(anonymous_9)","line":107,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":29}}},"10":{"name":"(anonymous_10)","line":119,"loc":{"start":{"line":119,"column":23},"end":{"line":119,"column":35}}},"11":{"name":"unroll","line":140,"loc":{"start":{"line":140,"column":3},"end":{"line":140,"column":27}}},"12":{"name":"(anonymous_12)","line":150,"loc":{"start":{"line":150,"column":32},"end":{"line":150,"column":55}}},"13":{"name":"(anonymous_13)","line":156,"loc":{"start":{"line":156,"column":36},"end":{"line":156,"column":52}}},"14":{"name":"(anonymous_14)","line":174,"loc":{"start":{"line":174,"column":17},"end":{"line":174,"column":52}}},"15":{"name":"(anonymous_15)","line":181,"loc":{"start":{"line":181,"column":50},"end":{"line":181,"column":73}}},"16":{"name":"(anonymous_16)","line":188,"loc":{"start":{"line":188,"column":50},"end":{"line":188,"column":72}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":17}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"3":{"start":{"line":21,"column":0},"end":{"line":44,"column":2}},"4":{"start":{"line":22,"column":2},"end":{"line":22,"column":18}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":45}},"6":{"start":{"line":25,"column":2},"end":{"line":33,"column":5}},"7":{"start":{"line":26,"column":4},"end":{"line":26,"column":46}},"8":{"start":{"line":27,"column":4},"end":{"line":27,"column":26}},"9":{"start":{"line":29,"column":4},"end":{"line":32,"column":5}},"10":{"start":{"line":30,"column":6},"end":{"line":30,"column":32}},"11":{"start":{"line":31,"column":6},"end":{"line":31,"column":42}},"12":{"start":{"line":36,"column":2},"end":{"line":41,"column":3}},"13":{"start":{"line":37,"column":4},"end":{"line":37,"column":48}},"14":{"start":{"line":40,"column":4},"end":{"line":40,"column":32}},"15":{"start":{"line":43,"column":2},"end":{"line":43,"column":16}},"16":{"start":{"line":53,"column":0},"end":{"line":74,"column":2}},"17":{"start":{"line":54,"column":2},"end":{"line":60,"column":3}},"18":{"start":{"line":55,"column":4},"end":{"line":55,"column":14}},"19":{"start":{"line":57,"column":7},"end":{"line":60,"column":3}},"20":{"start":{"line":58,"column":4},"end":{"line":59,"column":49}},"21":{"start":{"line":62,"column":2},"end":{"line":62,"column":54}},"22":{"start":{"line":64,"column":2},"end":{"line":66,"column":14}},"23":{"start":{"line":65,"column":4},"end":{"line":65,"column":72}},"24":{"start":{"line":69,"column":2},"end":{"line":69,"column":41}},"25":{"start":{"line":70,"column":2},"end":{"line":70,"column":37}},"26":{"start":{"line":71,"column":2},"end":{"line":71,"column":76}},"27":{"start":{"line":73,"column":2},"end":{"line":73,"column":16}},"28":{"start":{"line":84,"column":0},"end":{"line":164,"column":2}},"29":{"start":{"line":85,"column":2},"end":{"line":90,"column":3}},"30":{"start":{"line":86,"column":4},"end":{"line":89,"column":6}},"31":{"start":{"line":92,"column":2},"end":{"line":92,"column":19}},"32":{"start":{"line":93,"column":2},"end":{"line":95,"column":5}},"33":{"start":{"line":94,"column":4},"end":{"line":94,"column":45}},"34":{"start":{"line":97,"column":2},"end":{"line":102,"column":5}},"35":{"start":{"line":98,"column":4},"end":{"line":101,"column":6}},"36":{"start":{"line":104,"column":2},"end":{"line":106,"column":4}},"37":{"start":{"line":105,"column":4},"end":{"line":105,"column":29}},"38":{"start":{"line":107,"column":2},"end":{"line":109,"column":4}},"39":{"start":{"line":108,"column":4},"end":{"line":108,"column":49}},"40":{"start":{"line":111,"column":2},"end":{"line":111,"column":24}},"41":{"start":{"line":116,"column":2},"end":{"line":116,"column":18}},"42":{"start":{"line":117,"column":2},"end":{"line":117,"column":40}},"43":{"start":{"line":119,"column":2},"end":{"line":122,"column":4}},"44":{"start":{"line":120,"column":4},"end":{"line":121,"column":54}},"45":{"start":{"line":124,"column":2},"end":{"line":133,"column":3}},"46":{"start":{"line":125,"column":4},"end":{"line":125,"column":51}},"47":{"start":{"line":126,"column":4},"end":{"line":126,"column":17}},"48":{"start":{"line":127,"column":4},"end":{"line":127,"column":17}},"49":{"start":{"line":128,"column":4},"end":{"line":131,"column":6}},"50":{"start":{"line":132,"column":4},"end":{"line":132,"column":23}},"51":{"start":{"line":136,"column":2},"end":{"line":136,"column":30}},"52":{"start":{"line":137,"column":2},"end":{"line":137,"column":46}},"53":{"start":{"line":140,"column":2},"end":{"line":148,"column":11}},"54":{"start":{"line":141,"column":4},"end":{"line":147,"column":5}},"55":{"start":{"line":142,"column":6},"end":{"line":142,"column":51}},"56":{"start":{"line":143,"column":6},"end":{"line":143,"column":28}},"57":{"start":{"line":144,"column":6},"end":{"line":144,"column":28}},"58":{"start":{"line":145,"column":6},"end":{"line":145,"column":16}},"59":{"start":{"line":146,"column":6},"end":{"line":146,"column":16}},"60":{"start":{"line":150,"column":2},"end":{"line":153,"column":9}},"61":{"start":{"line":151,"column":4},"end":{"line":151,"column":64}},"62":{"start":{"line":152,"column":4},"end":{"line":152,"column":15}},"63":{"start":{"line":156,"column":2},"end":{"line":158,"column":14}},"64":{"start":{"line":157,"column":4},"end":{"line":157,"column":26}},"65":{"start":{"line":160,"column":2},"end":{"line":163,"column":4}},"66":{"start":{"line":174,"column":0},"end":{"line":203,"column":2}},"67":{"start":{"line":175,"column":2},"end":{"line":177,"column":3}},"68":{"start":{"line":176,"column":4},"end":{"line":176,"column":46}},"69":{"start":{"line":181,"column":2},"end":{"line":184,"column":9}},"70":{"start":{"line":182,"column":4},"end":{"line":182,"column":35}},"71":{"start":{"line":183,"column":4},"end":{"line":183,"column":15}},"72":{"start":{"line":186,"column":2},"end":{"line":186,"column":26}},"73":{"start":{"line":188,"column":2},"end":{"line":196,"column":9}},"74":{"start":{"line":189,"column":4},"end":{"line":189,"column":17}},"75":{"start":{"line":190,"column":4},"end":{"line":190,"column":36}},"76":{"start":{"line":191,"column":4},"end":{"line":194,"column":5}},"77":{"start":{"line":192,"column":6},"end":{"line":192,"column":34}},"78":{"start":{"line":193,"column":6},"end":{"line":193,"column":16}},"79":{"start":{"line":195,"column":4},"end":{"line":195,"column":16}},"80":{"start":{"line":198,"column":2},"end":{"line":200,"column":3}},"81":{"start":{"line":199,"column":4},"end":{"line":199,"column":49}},"82":{"start":{"line":202,"column":2},"end":{"line":202,"column":33}},"83":{"start":{"line":206,"column":0},"end":{"line":206,"column":25}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":2},"end":{"line":36,"column":2}},{"start":{"line":36,"column":2},"end":{"line":36,"column":2}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":2},"end":{"line":54,"column":2}},{"start":{"line":54,"column":2},"end":{"line":54,"column":2}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":7},"end":{"line":57,"column":7}},{"start":{"line":57,"column":7},"end":{"line":57,"column":7}}]},"5":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":2},"end":{"line":85,"column":2}},{"start":{"line":85,"column":2},"end":{"line":85,"column":2}}]},"6":{"line":88,"type":"cond-expr","locations":[{"start":{"line":88,"column":27},"end":{"line":88,"column":29}},{"start":{"line":88,"column":32},"end":{"line":88,"column":34}}]},"7":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":21},"end":{"line":94,"column":34}},{"start":{"line":94,"column":38},"end":{"line":94,"column":39}}]},"8":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":11},"end":{"line":108,"column":12}},{"start":{"line":108,"column":17},"end":{"line":108,"column":18}},{"start":{"line":108,"column":23},"end":{"line":108,"column":40}},{"start":{"line":108,"column":45},"end":{"line":108,"column":47}}]},"9":{"line":120,"type":"cond-expr","locations":[{"start":{"line":121,"column":6},"end":{"line":121,"column":29}},{"start":{"line":121,"column":32},"end":{"line":121,"column":53}}]},"10":{"line":137,"type":"cond-expr","locations":[{"start":{"line":137,"column":37},"end":{"line":137,"column":39}},{"start":{"line":137,"column":42},"end":{"line":137,"column":45}}]},"11":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":141,"column":4}},{"start":{"line":141,"column":4},"end":{"line":141,"column":4}}]},"12":{"line":162,"type":"cond-expr","locations":[{"start":{"line":162,"column":25},"end":{"line":162,"column":41}},{"start":{"line":162,"column":44},"end":{"line":162,"column":50}}]},"13":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":2},"end":{"line":175,"column":2}},{"start":{"line":175,"column":2},"end":{"line":175,"column":2}}]},"14":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":4},"end":{"line":191,"column":4}},{"start":{"line":191,"column":4},"end":{"line":191,"column":4}}]},"15":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":2},"end":{"line":198,"column":2}},{"start":{"line":198,"column":2},"end":{"line":198,"column":2}}]}},"code":["'use strict';","","","var huffman = {};","","","/**"," * Maximum block size used by functions \"compress\", \"decompress\"."," *"," * @const"," */","var MAX_BLOCK_SIZE = (-1 >>> 0).toString(2).length;","","","/**"," * Compress 0-1 string to int32 array."," *"," * @param {string} string"," * @return {number[]}"," */","var compress = function (string) {","  var blocks = [];","  var currentBlock = 0, currentBlockSize = 0;","","  string.split('').forEach(function (char) {","    currentBlock = (currentBlock << 1) | char;","    currentBlockSize += 1;","","    if (currentBlockSize === MAX_BLOCK_SIZE) {","      blocks.push(currentBlock);","      currentBlock = currentBlockSize = 0;","    }","  });","","  // Append last block size to the end.","  if (currentBlockSize) {","    blocks.push(currentBlock, currentBlockSize);","  }","  else {","    blocks.push(MAX_BLOCK_SIZE);","  }","","  return blocks;","};","","","/**"," * Decompress int32 array back to 0-1 string."," *"," * @param {number[]} array"," * @return {string}"," */","var decompress = function (array) {","  if (!array.length) {","    return '';","  }","  else if (array.length === 1) {","    throw new Error('Compressed array must be either empty ' +","                    'or at least 2 blocks big.');","  }","","  var padding = new Array(MAX_BLOCK_SIZE + 1).join(0);","","  var string = array.slice(0, -2).map(function (block) {","    return (padding + (block >>> 0).toString(2)).slice(-padding.length);","  }).join('');","","  // Append the last block.","  var lastBlockSize = array.slice(-1)[0];","  var lastBlock = array.slice(-2)[0];","  string += (padding + (lastBlock >>> 0).toString(2)).slice(-lastBlockSize);","","  return string;","};","","","/**"," * Apply Huffman encoding to a string."," *"," * @param {string} string"," * @param {boolean} [compressed=false] - Whether compress the string to bits."," * @return {{encoding: Object.<string, string>, value: string|number[]}}"," */","huffman.encode = function (string, compressed) {","  if (!string.length) {","    return {","      encoding: {},","      value: (compressed ? [] : '')","    };","  }","","  var counter = {};","  string.split('').forEach(function (char) {","    counter[char] = (counter[char] || 0) + 1;","  });","","  var letters = Object.keys(counter).map(function (char) {","    return {","      char: char,","      count: counter[char]","    };","  });","","  var compare = function (a, b) {","    return a.count - b.count;","  };","  var less = function (a, b) {","    return a && (b && (a.count < b.count) || !b);","  };","","  letters.sort(compare);","","  // Each time two least letters are merged into one, the result is pushing into","  // this buffer. Since the letters are pushing in ascending order of frequency,","  // no more sorting is ever required.","  var buffer = [];","  var lettersIndex = 0, bufferIndex = 0;","","  var extractMinimum = function () {","    return less(letters[lettersIndex], buffer[bufferIndex]) ?","      letters[lettersIndex++] : buffer[bufferIndex++];","  };","","  for (var numLetters = letters.length; numLetters > 1; --numLetters) {","    var a = extractMinimum(), b = extractMinimum();","    a.code = '0';","    b.code = '1';","    var union = {","      count: a.count + b.count,","      parts: [a, b]","    };","    buffer.push(union);","  }","","  // At this point there is a single letter left.","  var root = extractMinimum();","  root.code = (letters.length > 1) ? '' : '0';","","  // Unroll the code recursively in reverse.","  (function unroll(parent) {","    if (parent.parts) {","      var a = parent.parts[0], b = parent.parts[1];","      a.code += parent.code;","      b.code += parent.code;","      unroll(a);","      unroll(b);","    }","  })(root);","","  var encoding = letters.reduce(function (acc, letter) {","    acc[letter.char] = letter.code.split('').reverse().join('');","    return acc;","  }, {});","","  // Finally, apply the encoding to the given string.","  var result = string.split('').map(function (char) {","    return encoding[char];","  }).join('');","","  return {","    encoding: encoding,","    value: (compressed ? compress(result) : result)","  };","};","","","/**"," * Decode a Huffman-encoded string or compressed number sequence."," *"," * @param {Object.<string, string>} encoding - Maps characters to 0-1 sequences."," * @param {string|number[]} encodedString"," * @return {string} Decoded string."," */","huffman.decode = function (encoding, encodedString) {","  if (Array.isArray(encodedString)) {","    encodedString = decompress(encodedString);","  }","","  // We can make use of the fact that encoding mapping is always one-to-one","  // and rely on the power of JS hashes instead of building hand-made FSMs.","  var letterByCode = Object.keys(encoding).reduce(function (acc, letter) {","    acc[encoding[letter]] = letter;","    return acc;","  }, {});","","  var decodedLetters = [];","","  var unresolved = encodedString.split('').reduce(function (code, char) {","    code += char;","    var letter = letterByCode[code];","    if (letter) {","      decodedLetters.push(letter);","      code = '';","    }","    return code;","  }, '');","","  if (unresolved) {","    throw new Error('Invalid string to decode.');","  }","","  return decodedLetters.join('');","};","","","module.exports = huffman;",""],"l":{"4":1,"12":1,"21":1,"22":0,"23":0,"25":0,"26":0,"27":0,"29":0,"30":0,"31":0,"36":0,"37":0,"40":0,"43":0,"53":1,"54":0,"55":0,"57":0,"58":0,"62":0,"64":0,"65":0,"69":0,"70":0,"71":0,"73":0,"84":1,"85":0,"86":0,"92":0,"93":0,"94":0,"97":0,"98":0,"104":0,"105":0,"107":0,"108":0,"111":0,"116":0,"117":0,"119":0,"120":0,"124":0,"125":0,"126":0,"127":0,"128":0,"132":0,"136":0,"137":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"150":0,"151":0,"152":0,"156":0,"157":0,"160":0,"174":1,"175":0,"176":0,"181":0,"182":0,"183":0,"186":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"195":0,"198":0,"199":0,"202":0,"206":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/hamming.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/hamming.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":14},"end":{"line":11,"column":30}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":25,"column":2}},"2":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":55}},"4":{"start":{"line":16,"column":2},"end":{"line":16,"column":15}},"5":{"start":{"line":18,"column":2},"end":{"line":22,"column":3}},"6":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"7":{"start":{"line":20,"column":6},"end":{"line":20,"column":13}},"8":{"start":{"line":24,"column":2},"end":{"line":24,"column":14}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":25}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]}},"code":["/**"," *"," * \"Hamming distance between two strings of equal length is the number of"," * positions at which the corresponding symbols are different. In another way,"," * it measures the minimum number of substitutions required to change one string"," * into the other.\" - https://en.wikipedia.org/wiki/Hamming_distance"," *"," */","'use strict';","","var hamming = function (a, b) {","  if (a.length !== b.length) {","    throw new Error('Strings must be equal in length');","  }","","  var dist = 0;","","  for (var i = 0; i < a.length; i++) {","    if (a[i] !== b[i]) {","      dist++;","    }","  }","","  return dist;","};","","module.exports = hamming;",""],"l":{"11":1,"12":0,"13":0,"16":0,"18":0,"19":0,"20":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/longest_common_subsequence.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/longest_common_subsequence.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":31},"end":{"line":10,"column":49}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":49,"column":2}},"2":{"start":{"line":12,"column":2},"end":{"line":12,"column":39}},"3":{"start":{"line":14,"column":2},"end":{"line":14,"column":11}},"4":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"5":{"start":{"line":17,"column":4},"end":{"line":17,"column":45}},"6":{"start":{"line":21,"column":2},"end":{"line":29,"column":3}},"7":{"start":{"line":22,"column":4},"end":{"line":28,"column":5}},"8":{"start":{"line":23,"column":6},"end":{"line":27,"column":7}},"9":{"start":{"line":24,"column":8},"end":{"line":24,"column":46}},"10":{"start":{"line":26,"column":8},"end":{"line":26,"column":65}},"11":{"start":{"line":32,"column":2},"end":{"line":32,"column":16}},"12":{"start":{"line":33,"column":2},"end":{"line":33,"column":16}},"13":{"start":{"line":34,"column":2},"end":{"line":34,"column":15}},"14":{"start":{"line":36,"column":2},"end":{"line":46,"column":3}},"15":{"start":{"line":37,"column":4},"end":{"line":45,"column":5}},"16":{"start":{"line":38,"column":6},"end":{"line":38,"column":28}},"17":{"start":{"line":39,"column":6},"end":{"line":39,"column":10}},"18":{"start":{"line":40,"column":6},"end":{"line":40,"column":10}},"19":{"start":{"line":41,"column":11},"end":{"line":45,"column":5}},"20":{"start":{"line":42,"column":6},"end":{"line":42,"column":10}},"21":{"start":{"line":44,"column":6},"end":{"line":44,"column":10}},"22":{"start":{"line":48,"column":2},"end":{"line":48,"column":13}},"23":{"start":{"line":51,"column":0},"end":{"line":51,"column":42}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":6},"end":{"line":23,"column":6}},{"start":{"line":23,"column":6},"end":{"line":23,"column":6}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":11},"end":{"line":41,"column":11}},{"start":{"line":41,"column":11},"end":{"line":41,"column":11}}]}},"code":["/**"," * Implementation of longest common subsequence"," */","","'use strict';","","/**"," * Implementation via dynamic programming"," */","var longestCommonSubsequence = function (s1, s2) {","  // Multidimensional array for dynamic programming algorithm","  var cache = new Array(s1.length + 1);","","  var i, j;","","  for (i = 0; i <= s1.length; i++) {","    cache[i] = new Int32Array(s2.length + 1);","  }","","  // Fill in the cache","  for (i = 1; i <= s1.length; i++) {","    for (j = 1; j <= s2.length; j++) {","      if (s1[i - 1] === s2[j - 1]) {","        cache[i][j] = cache[i - 1][j - 1] + 1;","      } else {","        cache[i][j] = Math.max(cache[i][j - 1], cache[i - 1][j]);","      }","    }","  }","","  // Build LCS from cache","  i = s1.length;","  j = s2.length;","  var lcs = '';","","  while (cache[i][j] !== 0) {","    if (s1[i - 1] === s2[j - 1]) {","      lcs = s1[i - 1] + lcs;","      i--;","      j--;","    } else if (cache[i - 1][j] > cache[i][j - 1]) {","      i--;","    } else {","      j--;","    }","  }","","  return lcs;","};","","module.exports = longestCommonSubsequence;",""],"l":{"10":1,"12":0,"14":0,"16":0,"17":0,"21":0,"22":0,"23":0,"24":0,"26":0,"32":0,"33":0,"34":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"44":0,"48":0,"51":1}},"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/longest_common_substring.js":{"path":"/home/travis/build/npmtest/node-npmtest-algorithms/node_modules/algorithms/algorithms/string/longest_common_substring.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":29},"end":{"line":10,"column":47}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":45,"column":2}},"2":{"start":{"line":12,"column":2},"end":{"line":12,"column":39}},"3":{"start":{"line":14,"column":2},"end":{"line":14,"column":11}},"4":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"5":{"start":{"line":17,"column":4},"end":{"line":17,"column":45}},"6":{"start":{"line":20,"column":2},"end":{"line":20,"column":23}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":20}},"8":{"start":{"line":24,"column":2},"end":{"line":37,"column":3}},"9":{"start":{"line":25,"column":4},"end":{"line":36,"column":5}},"10":{"start":{"line":26,"column":6},"end":{"line":35,"column":7}},"11":{"start":{"line":27,"column":8},"end":{"line":27,"column":46}},"12":{"start":{"line":28,"column":8},"end":{"line":32,"column":9}},"13":{"start":{"line":29,"column":10},"end":{"line":29,"column":28}},"14":{"start":{"line":30,"column":10},"end":{"line":30,"column":28}},"15":{"start":{"line":31,"column":10},"end":{"line":31,"column":34}},"16":{"start":{"line":34,"column":8},"end":{"line":34,"column":24}},"17":{"start":{"line":39,"column":2},"end":{"line":39,"column":15}},"18":{"start":{"line":40,"column":2},"end":{"line":42,"column":3}},"19":{"start":{"line":41,"column":4},"end":{"line":41,"column":65}},"20":{"start":{"line":44,"column":2},"end":{"line":44,"column":13}},"21":{"start":{"line":47,"column":0},"end":{"line":47,"column":40}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":6},"end":{"line":26,"column":6}},{"start":{"line":26,"column":6},"end":{"line":26,"column":6}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":8}},{"start":{"line":28,"column":8},"end":{"line":28,"column":8}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]}},"code":["/**"," * Implementation of longest common substring"," */","","'use strict';","","/**"," * Implementation via dynamic programming"," */","var longestCommonSubstring = function (s1, s2) {","  // Multidimensional array for dynamic programming algorithm","  var cache = new Array(s1.length + 1);","","  var i, j;","","  for (i = 0; i <= s1.length + 1; i++) {","    cache[i] = new Int32Array(s2.length + 1);","  }","","  var lcsPosition = {};","  var lcsLength = 0;","","  // Fill in the cache","  for (i = 1; i <= s1.length; i++) {","    for (j = 1; j <= s2.length; j++) {","      if (s1[i - 1] === s2[j - 1]) {","        cache[i][j] = cache[i - 1][j - 1] + 1;","        if (cache[i][j] > lcsLength) {","          lcsPosition.i = i;","          lcsPosition.j = j;","          lcsLength = cache[i][j];","        }","      } else {","        cache[i][j] = 0;","      }","    }","  }","","  var lcs = '';","  if (lcsLength) {","    lcs = s1.substring(lcsPosition.i - lcsLength, lcsPosition.i);","  }","","  return lcs;","};","","module.exports = longestCommonSubstring;",""],"l":{"10":1,"12":0,"14":0,"16":0,"17":0,"20":0,"21":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"34":0,"39":0,"40":0,"41":0,"44":0,"47":1}}}